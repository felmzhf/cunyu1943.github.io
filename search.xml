<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>提高工作效率的神器推荐之Windows</title>
      <link href="/2019/10/02/ti-gao-gong-zuo-xiao-lu-de-shen-qi-tui-jian-zhi-windows/"/>
      <url>/2019/10/02/ti-gao-gong-zuo-xiao-lu-de-shen-qi-tui-jian-zhi-windows/</url>
      
        <content type="html"><![CDATA[<script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>实用网站推荐</title>
      <link href="/2019/10/02/shi-yong-wang-zhan-tui-jian/"/>
      <url>/2019/10/02/shi-yong-wang-zhan-tui-jian/</url>
      
        <content type="html"><![CDATA[<h1 id="视频网站篇"><a href="#视频网站篇" class="headerlink" title="视频网站篇"></a>视频网站篇</h1><ul><li>种子下载网站：<a href="http://www.hao6v.com/" target="_blank" rel="noopener">http://www.hao6v.com/</a></li></ul><p><img src="https://upload-images.jianshu.io/upload_images/9747350-6d44e3c41d302b0f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/620" alt=""></p><ul><li>在线视频观看：<a href="http://www.94aw.com/" target="_blank" rel="noopener">http://www.94aw.com/</a></li></ul><p><img src="https://upload-images.jianshu.io/upload_images/9747350-78f14ebd2ccbcd3f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/620" alt=""></p><ul><li>NBA体育赛事观看：<a href="http://www.lanqiutv.com/" target="_blank" rel="noopener">http://www.lanqiutv.com/</a></li></ul><p><img src="https://upload-images.jianshu.io/upload_images/9747350-83885d04d09451fe.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/620" alt=""></p><ul><li>美剧天堂：<a href="http://www.meijutt.com/" target="_blank" rel="noopener">http://www.meijutt.com/</a></li></ul><p><img src="https://upload-images.jianshu.io/upload_images/9747350-1a3468ff58573da9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/620" alt=""></p><h1 id="软件下载篇"><a href="#软件下载篇" class="headerlink" title="软件下载篇"></a>软件下载篇</h1><ul><li>常用软件及破解版软件：<a href="http://www.zdfans.com/" target="_blank" rel="noopener">http://www.zdfans.com/</a></li></ul><p><img src="https://upload-images.jianshu.io/upload_images/9747350-73bd1e965c93d89f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/620" alt=""></p><ul><li>常用软件及破解版软件：<a href="http://www.ccav1.com/" target="_blank" rel="noopener">http://www.ccav1.com/</a></li></ul><p><img src="https://upload-images.jianshu.io/upload_images/9747350-bec690ad28281f62.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/620" alt=""></p><ul><li>Chrome插件：<a href="http://getcrx.cn/#/" target="_blank" rel="noopener">http://getcrx.cn/#/</a></li></ul><p><img src="https://upload-images.jianshu.io/upload_images/9747350-ec18f8755e0d666a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/620" alt=""></p><ul><li>系统镜像下载：<a href="https://msdn.itellyou.cn/" target="_blank" rel="noopener">https://msdn.itellyou.cn/</a></li></ul><p><img src="https://upload-images.jianshu.io/upload_images/9747350-001c66f99d26b090.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/620" alt=""></p><h1 id="动漫篇"><a href="#动漫篇" class="headerlink" title="动漫篇"></a>动漫篇</h1><ul><li>动漫之家：<a href="https://manhua.dmzj.com/" target="_blank" rel="noopener">https://manhua.dmzj.com/</a></li></ul><p><img src="https://upload-images.jianshu.io/upload_images/9747350-0cdce20cf006d504.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/620" alt=""></p><ul><li>嘀哩嘀哩：<a href="http://www.dilidili.wang/" target="_blank" rel="noopener">http://www.dilidili.wang/</a></li></ul><p><img src="https://upload-images.jianshu.io/upload_images/9747350-c9258d35bb8203e8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/620" alt=""></p><ul><li>新世界动漫：<a href="http://www.x4jdm.com/" target="_blank" rel="noopener">http://www.x4jdm.com/</a></li></ul><p><img src="https://upload-images.jianshu.io/upload_images/9747350-188ffe70e91ebf4a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/620" alt=""></p><ul><li>风车动漫：<a href="http://www.fengchedm.com/" target="_blank" rel="noopener">http://www.fengchedm.com/</a></li></ul><p><img src="https://upload-images.jianshu.io/upload_images/9747350-f0e2445c2f955dc0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/620" alt=""></p><h1 id="实用篇"><a href="#实用篇" class="headerlink" title="实用篇"></a>实用篇</h1><ul><li>图片压缩网站：<a href="http://www.gaitubao.com/" target="_blank" rel="noopener">http://www.gaitubao.com/</a></li></ul><p><img src="https://upload-images.jianshu.io/upload_images/9747350-98c740b005356cad.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/620" alt=""></p><ul><li>百度脑图：<a href="http://naotu.baidu.com/" target="_blank" rel="noopener">http://naotu.baidu.com/</a></li></ul><p><img src="https://upload-images.jianshu.io/upload_images/9747350-8eb9a2013752c12d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/620" alt=""></p><ul><li>在线流程图、思维导图、原型图、UML、网络拓扑图等制作：<a href="http://v3.processon.com/" target="_blank" rel="noopener">http://v3.processon.com/</a></li></ul><p><img src="https://upload-images.jianshu.io/upload_images/9747350-bc7c73f6584fa920.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/620" alt=""></p><ul><li>虫部落快搜：<a href="http://search.chongbuluo.com/" target="_blank" rel="noopener">http://search.chongbuluo.com/</a></li></ul><p><img src="https://upload-images.jianshu.io/upload_images/9747350-9465f0b2748678e4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/620" alt=""></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> tools </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>使用U盘安装Windows系统</title>
      <link href="/2019/10/02/shi-yong-u-pan-an-zhuang-windows-xi-tong/"/>
      <url>/2019/10/02/shi-yong-u-pan-an-zhuang-windows-xi-tong/</url>
      
        <content type="html"><![CDATA[<h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><ul><li>一个8G及以上的U盘；</li><li>软碟通UltraISO，<a href="https://cn.ultraiso.net/xiazai.html" target="_blank" rel="noopener">下载地址</a>，非免费，但试用就够了；</li><li>系统镜像，推荐去<a href="https://msdn.itellyou.cn/" target="_blank" rel="noopener">MSDN</a>下载，选择你需要安装的系统进行下载；</li></ul><p><img src="http://upload-images.jianshu.io/upload_images/9747350-351a128a86ea701a?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><h2 id="安装过程（以Windows10为例）"><a href="#安装过程（以Windows10为例）" class="headerlink" title="安装过程（以Windows10为例）"></a>安装过程（以Windows10为例）</h2><ul><li><p>利用U盘制作启动盘，准备好上述的东西，然后开始制作启动盘：</p><p> <img src="http://upload-images.jianshu.io/upload_images/9747350-baa6b765ca16821d?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><p> <img src="http://upload-images.jianshu.io/upload_images/9747350-ded172644e954f14?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><p> <img src="http://upload-images.jianshu.io/upload_images/9747350-c661cd11f09b766f?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p></li></ul><p><strong>注意：制作之前请确保自己U盘中的数据已经备份好，否则U盘数据会被擦除</strong>；</p><p><img src="http://upload-images.jianshu.io/upload_images/9747350-4b57edc9353b6dd0?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><ul><li>进入BIOS设置U盘启动，详情见<a href="http://www.udashi.com/jc/2.html" target="_blank" rel="noopener">BIOS设置U盘启动</a>；</li><li>设置好BIOS后重启机器，开始系统的安装：</li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> tools </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Windows </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Anaconda简单使用手册</title>
      <link href="/2019/10/02/anaconda-jian-dan-shi-yong-shou-ce/"/>
      <url>/2019/10/02/anaconda-jian-dan-shi-yong-shou-ce/</url>
      
        <content type="html"><![CDATA[<h2 id="安装部分"><a href="#安装部分" class="headerlink" title="安装部分"></a>安装部分</h2><h3 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h3><p>下载各平台对应的安装包，各平台安装包下载链接如下：</p><ul><li><a href="https://www.anaconda.com/download/#windows" target="_blank" rel="noopener">Windows</a></li><li><a href="https://www.anaconda.com/download/#macos" target="_blank" rel="noopener">macOs</a></li><li><a href="https://www.anaconda.com/download/#linux" target="_blank" rel="noopener">Linux</a></li></ul><h3 id="安装过程"><a href="#安装过程" class="headerlink" title="安装过程"></a>安装过程</h3><p>安装过程在此不给出具体过程，可参照官方给出教程，各平台对应教程如下：</p><ul><li><p><a href="http://docs.anaconda.com/anaconda/install/windows/" target="_blank" rel="noopener">Windows中Anaconda安装教程</a></p></li><li><p><a href="http://docs.anaconda.com/anaconda/install/mac-os/" target="_blank" rel="noopener">macOS中Anaconda安装教程</a></p></li><li><p><a href="http://docs.anaconda.com/anaconda/install/linux/" target="_blank" rel="noopener">Linux中Anconda安装教程</a></p><h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2></li><li><p>查看安装版本</p></li></ul><pre class="line-numbers language-shell"><code class="language-shell">conda --version<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>查看帮助信息</li></ul><pre class="line-numbers language-shell"><code class="language-shell">conda --helpconda -h<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>卸载conda</li></ul><pre class="line-numbers language-shell"><code class="language-shell"># Linux/macOSconda -rc ~/anaconda3<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>查看已创建的环境</li></ul><pre class="line-numbers language-shell"><code class="language-shell"># 下列命令三选一conda info --envsconda info -econda env list<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>创建新环境</li></ul><pre class="line-numbers language-shell"><code class="language-shell">conda --create -n '新环境名' '安装包名'eg:# 创建了一个名为'python3.5'，环境中默认安装版本为3.5的pythonconda --create -n python3.5 python=3.5 <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>切换环境</li></ul><pre class="line-numbers language-shell"><code class="language-shell"># Linux/macOSsource activate '环境名'# Windowsactivate '环境名'<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>退出环境</li></ul><pre class="line-numbers language-shell"><code class="language-shell"># Linux/macOSsource deactivate# Windowsdeactivate<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>复制环境</li></ul><pre class="line-numbers language-shell"><code class="language-shell">conda create --name '新环境名' --clone '被复制的环境名'<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>删除环境</li></ul><pre class="line-numbers language-shell"><code class="language-shell">conda remove --name '环境名' --all<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>设置Anaconda仓库的清华镜像</li></ul><pre class="line-numbers language-shell"><code class="language-shell">conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free/conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/main/conda config --set show_channel_urls yes<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>查找可供安装的包版本</li></ul><pre class="line-numbers language-shell"><code class="language-shell"># 1、精确查找conda search --full-name '包全名'# 2、模糊查找# 查找包含字段的包有哪些版本可供安装conda search '字段'<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>安装包</li></ul><pre class="line-numbers language-shell"><code class="language-shell">conda install '包名'<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>卸载包</li></ul><pre class="line-numbers language-shell"><code class="language-shell">conda remove'包名'<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>更新包</li></ul><pre class="line-numbers language-shell"><code class="language-shell"># 更新所有包conda update --all# 更新指定包conda update '包名'<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>好了，Anaconda的安装以及简单的使用教程到此结束了。相信你通过上面的内容，一定能够对你的学习有所帮助。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> tools </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Anaconda </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>强大的编辑器 - Vim</title>
      <link href="/2019/10/02/qiang-da-de-bian-ji-qi-vim/"/>
      <url>/2019/10/02/qiang-da-de-bian-ji-qi-vim/</url>
      
        <content type="html"><![CDATA[<h3 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h3><ul><li>无图形界面；</li><li>只能编辑文本内容，不能进行排版；</li><li>不支持鼠标操作；</li><li>无菜单、只有命令；</li></ul><h3 id="工作模式"><a href="#工作模式" class="headerlink" title="工作模式"></a>工作模式</h3><ul><li>命令模式：对文件进行常规编辑操作，如定位、翻页、复制等，是<code>vim</code>的入口；</li><li>末行模式：执行保存、退出等功能，是<code>vim</code>的出口；</li><li>编辑模式：正常的文字编辑功能；</li></ul><h3 id="命令及对应功能"><a href="#命令及对应功能" class="headerlink" title="命令及对应功能"></a>命令及对应功能</h3><table><thead><tr><th align="right">功能</th><th align="left">命令</th></tr></thead><tbody><tr><td align="right">打开文件并定位行</td><td align="left"><code>vim fileName + row</code></td></tr><tr><td align="right">保存</td><td align="left"><code>w</code></td></tr><tr><td align="right">退出，未保存不许退出</td><td align="left"><code>q</code></td></tr><tr><td align="right">强制退出</td><td align="left"><code>q!</code></td></tr><tr><td align="right">保存并退出</td><td align="left"><code>x</code></td></tr><tr><td align="right">重复命令多次</td><td align="left">先输入一个数字，再跟上一个命令</td></tr><tr><td align="right">向上</td><td align="left"><code>h</code></td></tr><tr><td align="right">向下</td><td align="left"><code>j</code></td></tr><tr><td align="right">向左</td><td align="left"><code>h</code></td></tr><tr><td align="right">向右</td><td align="left"><code>l</code></td></tr><tr><td align="right">向后移动一个单词</td><td align="left"><code>w</code></td></tr><tr><td align="right">向前移动一个单词</td><td align="left"><code>b</code></td></tr><tr><td align="right">行首</td><td align="left"><code>0</code></td></tr><tr><td align="right">行首，第一个非空白字符的位置</td><td align="left"><code>^</code></td></tr><tr><td align="right">行尾</td><td align="left"><code>$</code></td></tr><tr><td align="right">文件顶部</td><td align="left"><code>gg</code></td></tr><tr><td align="right">文件末尾</td><td align="left"><code>G</code></td></tr><tr><td align="right">移动到<code>row</code>对应行数</td><td align="left"><code>row gg</code>、<code>row G</code>、<code>：row</code></td></tr><tr><td align="right">向上翻页</td><td align="left"><code>ctrl + b</code></td></tr><tr><td align="right">向下翻页</td><td align="left"><code>ctrl + f</code></td></tr><tr><td align="right">屏幕顶部</td><td align="left"><code>H</code></td></tr><tr><td align="right">屏幕中间</td><td align="left"><code>M</code></td></tr><tr><td align="right">屏幕底部</td><td align="left"><code>L</code></td></tr><tr><td align="right">上一段</td><td align="left"><code>{</code></td></tr><tr><td align="right">下一段</td><td align="left"><code>}</code></td></tr><tr><td align="right">括号匹配及切换</td><td align="left"><code>%</code></td></tr><tr><td align="right">添加标记<code>x</code></td><td align="left"><code>mx</code></td></tr><tr><td align="right">定位到标记<code>x</code>所在位置</td><td align="left">‘<code>x</code></td></tr><tr><td align="right">从光标位置开始选择文本</td><td align="left"><code>v</code></td></tr><tr><td align="right">选中光标经过的完整行</td><td align="left"><code>V</code></td></tr><tr><td align="right">垂直方向选中文本</td><td align="left"><code>ctrl + v</code></td></tr><tr><td align="right">撤销</td><td align="left"><code>u</code></td></tr><tr><td align="right">恢复撤销</td><td align="left"><code>ctrl + r</code></td></tr><tr><td align="right">删除光标所在字符或选中文字</td><td align="left"><code>x</code></td></tr><tr><td align="right">删除移动命令对应内容</td><td align="left"><code>d</code></td></tr><tr><td align="right">删除光标所在行，<code>ndd</code>复制多行</td><td align="left"><code>dd</code></td></tr><tr><td align="right">删除至行尾</td><td align="left"><code>D</code></td></tr><tr><td align="right">复制</td><td align="left"><code>y</code></td></tr><tr><td align="right">复制一行，<code>nyy</code>复制多行</td><td align="left"><code>yy</code></td></tr><tr><td align="right">粘贴</td><td align="left"><code>p</code></td></tr><tr><td align="right">替换当前字符</td><td align="left"><code>r</code></td></tr><tr><td align="right">替换当前行光标后的字符</td><td align="left"><code>R</code></td></tr><tr><td align="right">向右增加缩进</td><td align="left"><code>&gt;&gt;</code></td></tr><tr><td align="right">向左减少缩进</td><td align="left"><code>&lt;&lt;</code></td></tr><tr><td align="right">重复上次命令</td><td align="left"><code>.</code></td></tr><tr><td align="right">查找<code>str</code>，<code>n</code>查找下一个，<code>N</code>查找上一个</td><td align="left"><code>/str</code></td></tr><tr><td align="right">向后查找当前光标所在单词</td><td align="left"><code>*</code></td></tr><tr><td align="right">向前查找当前光标所在单词</td><td align="left"><code>#</code></td></tr><tr><td align="right">全局替换</td><td align="left"><code>：%s/旧文本/新文本/g</code></td></tr><tr><td align="right">可视区域替换</td><td align="left"><code>：s/旧文本/新文本/g</code></td></tr><tr><td align="right">确认替换</td><td align="left"><code>：%s/旧文本/新文本/gc</code></td></tr><tr><td align="right">当前字符前插入文本</td><td align="left"><code>i</code></td></tr><tr><td align="right">行首插入文本</td><td align="left"><code>I</code></td></tr><tr><td align="right">当前字符后添加文本</td><td align="left"><code>a</code></td></tr><tr><td align="right">行末添加文本</td><td align="left"><code>A</code></td></tr><tr><td align="right">当前行后插入一空行</td><td align="left"><code>o</code></td></tr><tr><td align="right">当前行前插入一空行</td><td align="left"><code>O</code></td></tr><tr><td align="right">打开内置文件浏览器，浏览当前目录下文件</td><td align="left"><code>:e .</code></td></tr><tr><td align="right">新建文件</td><td align="left"><code>:n</code></td></tr><tr><td align="right">横向增加分屏</td><td align="left"><code>：sp [fileName]</code></td></tr><tr><td align="right">纵向增加分屏</td><td align="left"><code>：vsp [fileName]</code></td></tr></tbody></table><h3 id="常用配置"><a href="#常用配置" class="headerlink" title="常用配置"></a>常用配置</h3><p>一般而言，想要配置Vim的相关设置，需要在root用户的权限下修改<code>/etc/vim/vimrc或/etc/vimrc</code>文件相关内容。常用的配置如下：</p><pre class="line-numbers language-shell"><code class="language-shell">set autoindent                  " 按下回车后，下一行缩进格式与上一行保持一直set tabstop=4                   " 设置Tab键显示的空格数set spell spelllang=en_us       "英语单词拼写检查set number                      " 设置行号set nocompatible                " 设置是否与Vi兼容syntax on                       " 语法高亮set showmode                    " 显示当前属于命令模式还是插入模式set encoding=utf-8              " 设置utf-8编码set t_Co=256                    " 启用256色filetype indent on              " 文件类型检查set noerrorbells                "出错时不要发出响声警告set mouse=a                     " 支持鼠标<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>以上就是对与Linux中编辑器Vim的相关介绍以及基本操作的详细内容了，Vim这款编辑器在Vi的基础上又进一步，增加了新的功能，大大提高了开发效率。但同时，Vim对于新手而言是一个不太友好的编辑器，因为需要记住许多命令。所以我们作为一个新手想要快速掌握Vim的使用技巧，唯一的方法就是多去实践，在不断使用它的过程中我们就会发现我们对它的使用越来越熟练。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> tools </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vim </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux文件系统分层标准（FHS）</title>
      <link href="/2019/10/02/linux-wen-jian-xi-tong-fen-ceng-biao-zhun-fhs/"/>
      <url>/2019/10/02/linux-wen-jian-xi-tong-fen-ceng-biao-zhun-fhs/</url>
      
        <content type="html"><![CDATA[<p>对于刚接触Linux系统的我们来说，时常被Linux的系统结构搞得晕头转向，下面这张图介绍了Linux的文件系统分层标准，希望对你有所帮助。</p><p><img src="http://upload-images.jianshu.io/upload_images/9747350-1cd2eb2a77ddadb0?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 系统 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>修改Ubuntu默认root用户密码及更改用户密码</title>
      <link href="/2019/10/02/xiu-gai-ubuntu-mo-ren-root-yong-hu-mi-ma-ji-geng-gai-yong-hu-mi-ma/"/>
      <url>/2019/10/02/xiu-gai-ubuntu-mo-ren-root-yong-hu-mi-ma-ji-geng-gai-yong-hu-mi-ma/</url>
      
        <content type="html"><![CDATA[<h2 id="新安装的Ubuntu系统中默认的root用户密码是多少？该怎么修改？"><a href="#新安装的Ubuntu系统中默认的root用户密码是多少？该怎么修改？" class="headerlink" title="新安装的Ubuntu系统中默认的root用户密码是多少？该怎么修改？"></a>新安装的Ubuntu系统中默认的root用户密码是多少？该怎么修改？</h2><p> 如题，相信许多刚接触Ubuntu系统的新手大多会遇到这个问题，那么我们该如何解决这个问题呢？Ubuntu在安装过程中并没有让我们设置root用户密码，但当我们需要获取root用户的权限时，就会让我们输入root用户的密码，如下图：</p><p><img src="http://upload-images.jianshu.io/upload_images/9747350-dcd9a2c58cbfeabf?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><p>这就搞得我们一头雾水了。当初我们安装系统的时候只是设置好了一个用户名和用户的密码，并没有设置root用户密码啊，该怎么输入呢？你可能会抱着试一试的心态，输入自己创建的用户的密码，结果当然是密码错误了！！！</p><ul><li><p>原因：未设置之前，Ubuntu中默认的root密码是随机的，即每次开机都会有一个新的root密码，所以此时的root用户密码并不确定；</p></li><li><p>解决方法：Ubuntu中打开终端(ctrl + alt + t)，输入<code>sudo passwd</code>，如下图，然后重复两次你要设置的root密码，然后就会提示密码已更新了；</p><p> <img src="http://upload-images.jianshu.io/upload_images/9747350-970dc994741994dd?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p></li><li><p>测试是否设置成功：控制台中输入<code>su root</code>，然后输入刚才设置好的root密码，测试是否修改成功，成功后如下图所示；</p><p> <img src="http://upload-images.jianshu.io/upload_images/9747350-003ce7f59a6c7689?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p></li></ul><h2 id="修改指定用户的密码"><a href="#修改指定用户的密码" class="headerlink" title="修改指定用户的密码"></a>修改指定用户的密码</h2><ul><li><p>首先需要切换到<code>root</code>用户下，输入<code>sudo su</code>，然后输入上面改好的root用户密码即可切换到<code>root</code>用户；</p><p>  <img src="http://upload-images.jianshu.io/upload_images/9747350-6a43f514913fa140?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p></li><li><p>然后输入<code>passwd 用户名</code>，输入需要修改的新密码，重复两次即可，此时变回提示用户身份验证令牌已成功更新；</p><p>  <img src="http://upload-images.jianshu.io/upload_images/9747350-6240ab05865065c6?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p></li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 系统 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Ubuntu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VMware安装Ubuntu18.04</title>
      <link href="/2019/10/02/vmware-an-zhuang-ubuntu18-04/"/>
      <url>/2019/10/02/vmware-an-zhuang-ubuntu18-04/</url>
      
        <content type="html"><![CDATA[<h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><h4 id="Ubuntu"><a href="#Ubuntu" class="headerlink" title="Ubuntu"></a>Ubuntu</h4><ul><li><p>获取地址：</p><ul><li><p><a href="https://www.ubuntu.com/download/desktop?utm_expid=.t_P3dGHLTjiXbkBPgMHsUw.0&amp;utm_referrer=https%3A%2F%2Fwww.ubuntu.com%2Fdesktop" target="_blank" rel="noopener">官网</a></p><p><img src="http://upload-images.jianshu.io/upload_images/9747350-963b73f433292ce0?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p></li><li><p><a href="https://mirrors.tuna.tsinghua.edu.cn/ubuntu-releases/18.04/" target="_blank" rel="noopener">清华镜像站</a></p><p><img src="http://upload-images.jianshu.io/upload_images/9747350-51761975c46761c2?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p></li></ul></li></ul><h4 id="VMware"><a href="#VMware" class="headerlink" title="VMware"></a>VMware</h4><ul><li><p>获取地址<a href="https://pan.baidu.com/s/1dzmawpqmK5PuCBipIwLXoA#list/path=%2F%E8%99%9A%E6%8B%9F%E6%9C%BA%2FVMware%20Workstation%20%26%20%20KeyGen&amp;parentPath=%2F%E8%99%9A%E6%8B%9F%E6%9C%BA" target="_blank" rel="noopener">链接</a></p><p>  <img src="http://upload-images.jianshu.io/upload_images/9747350-5b85994cec8c1496?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p></li></ul><h2 id="安装过程"><a href="#安装过程" class="headerlink" title="安装过程"></a>安装过程</h2><ul><li><p>Vmware的安装过程此处不在赘述，不清楚如何安装的请自行百度，参见<a href="https://jingyan.baidu.com/article/9f7e7ec09da5906f281554d6.html" target="_blank" rel="noopener">VMware14安装教程</a></p></li><li><p>然后就是Vmware中安装Ubuntu18.04的过程如下：</p><p>  <img src="http://upload-images.jianshu.io/upload_images/9747350-fe983d70ceeaec3b?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><p>  <img src="http://upload-images.jianshu.io/upload_images/9747350-3a2758738f4edbc9?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><p>  <img src="http://upload-images.jianshu.io/upload_images/9747350-5119d64afff7d110?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><p>  <img src="http://upload-images.jianshu.io/upload_images/9747350-7598cdb1498ccb47?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><p>  <img src="http://upload-images.jianshu.io/upload_images/9747350-b3c9212e5d85e732?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><p>  <img src="http://upload-images.jianshu.io/upload_images/9747350-6a92ad5a578b8dd9?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><p>  <img src="http://upload-images.jianshu.io/upload_images/9747350-ddac8cf24d36ab2c?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><p>  <img src="http://upload-images.jianshu.io/upload_images/9747350-4db68f693b3c5f24?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><p>  <img src="http://upload-images.jianshu.io/upload_images/9747350-27485661c90e94d5?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><p>  <img src="http://upload-images.jianshu.io/upload_images/9747350-6a160fc6a60808df?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><p>  <img src="http://upload-images.jianshu.io/upload_images/9747350-7d8df4e929f090cc?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><p>  <img src="http://upload-images.jianshu.io/upload_images/9747350-2c3349f41e6b43ef?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><p>  <img src="http://upload-images.jianshu.io/upload_images/9747350-ba8b95f0b6259bbf?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><p>  <img src="http://upload-images.jianshu.io/upload_images/9747350-bff2988b72753d28?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><p>  <img src="http://upload-images.jianshu.io/upload_images/9747350-d1888586d97f54ae?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><p>  <img src="http://upload-images.jianshu.io/upload_images/9747350-05b4d09807eadd4f?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><p>  <img src="http://upload-images.jianshu.io/upload_images/9747350-bf2ef18ac29200a5?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><p>  <img src="http://upload-images.jianshu.io/upload_images/9747350-bfb91707c711408b?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p></li></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul><li>至此，Ubuntu18.04的安装结束，接下来你就可以尽情的捣鼓安装好的系统了QAQ。</li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 系统 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Ubuntu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux知识点总结</title>
      <link href="/2019/10/02/linux-zhi-shi-dian-zong-jie/"/>
      <url>/2019/10/02/linux-zhi-shi-dian-zong-jie/</url>
      
        <content type="html"><![CDATA[<h3 id="操作系统"><a href="#操作系统" class="headerlink" title="操作系统"></a>操作系统</h3><ul><li><p>定义：操作系统是一个特殊软件，它作为接口供程序员开发使用；</p></li><li><p>作用：</p><p>  1、直接操作硬件；</p><p>  2、把操作硬件的代码封装成系统调用，供其他程序员通过系统调用间接操作硬件；</p></li><li><p>分类：</p><p>  1、桌面：Windows、macOs、Linux；</p><p>  2、服务器：Linux、Windows Server；</p><p>  3、嵌入式：Linux；</p><p>  4、移动设备：iOS、Andro；</p></li></ul><h3 id="Linux内核及发行版"><a href="#Linux内核及发行版" class="headerlink" title="Linux内核及发行版"></a>Linux内核及发行版</h3><ul><li><p>内核： 系统核心，运行程序和管理硬件设别的核心程序，提供一个设备和应用程序间的抽象层；</p></li><li><p>内核版本：</p><p>  1、稳定版：工业级强度，可广泛应用与部署，新版本的发布只是修复旧版本的一些bug或者加入新的驱动程序；</p><p>  2、开发版：用于实验各种解决方案，因此更新很快；</p></li><li><p>发行版本：包括桌面环境、办公套件、媒体播放器、数据库等；</p></li></ul><h3 id="单用户与多用户操作系统"><a href="#单用户与多用户操作系统" class="headerlink" title="单用户与多用户操作系统"></a>单用户与多用户操作系统</h3><ul><li>单用户：一台计算机在同一时间内只能由一个用户使用，一个用户独享系统硬件和软件资源；</li><li>多用户：一台计算机能被多个用户同时使用，用户之间共享系统硬件和软件资源；</li></ul><h3 id="Linux中查阅命令帮助信息"><a href="#Linux中查阅命令帮助信息" class="headerlink" title="Linux中查阅命令帮助信息"></a>Linux中查阅命令帮助信息</h3><ul><li><code>command --hlep</code>：显示命令帮助信息；</li><li><code>man command</code>：查阅命令使用手册；</li></ul><table><thead><tr><th align="center">操作键</th><th align="center">功能</th></tr></thead><tbody><tr><td align="center">空格</td><td align="center">显示下一屏</td></tr><tr><td align="center">回车</td><td align="center">一次滚动一行</td></tr><tr><td align="center">b</td><td align="center">回滚一屏</td></tr><tr><td align="center">f</td><td align="center">前滚一屏</td></tr><tr><td align="center">/keyword</td><td align="center">搜索关键词</td></tr><tr><td align="center">q</td><td align="center">退出</td></tr></tbody></table><ul><li>通配符</li></ul><table><thead><tr><th align="center">通配符</th><th align="center">含义</th></tr></thead><tbody><tr><td align="center">*</td><td align="center">代表任意个字符</td></tr><tr><td align="center">？</td><td align="center">代表任一个字符</td></tr><tr><td align="center">[]</td><td align="center">表示可以匹配字符组中任意一个</td></tr><tr><td align="center">[mn]</td><td align="center">匹配m、n中任意一个</td></tr><tr><td align="center">[a-z]</td><td align="center">匹配从a-z范围内任意一个字符</td></tr></tbody></table><ul><li>重定向：<code>&gt;</code>、<code>&gt;&gt;</code><ul><li><code>&gt;</code>：表示输出，会覆盖原有内容；</li><li><code>&gt;&gt;</code>：表示追加，将内容追加到原有文件末尾；</li></ul></li></ul><h3 id="网卡与IP"><a href="#网卡与IP" class="headerlink" title="网卡与IP"></a>网卡与IP</h3><ul><li>网卡：负责网络通信的硬件设备；</li><li>IP：设置在网卡上的地址信息；</li></ul><h3 id="ssh与scp"><a href="#ssh与scp" class="headerlink" title="ssh与scp"></a>ssh与scp</h3><ul><li>ssh</li></ul><p>传输时对数据进行加密，同时防止DNS欺骗和IP欺骗，安全可靠性高；另外，传输的数据是经过压缩的，这样可以加快传输速度；</p><ul><li>常见端口号</li></ul><table><thead><tr><th align="center">服务</th><th align="center">端口号</th></tr></thead><tbody><tr><td align="center">SSH</td><td align="center">22</td></tr><tr><td align="center">Web</td><td align="center">80</td></tr><tr><td align="center">HTTPS</td><td align="center">443</td></tr><tr><td align="center">FTP</td><td align="center">21</td></tr></tbody></table><ul><li>scp</li></ul><p>在Linux下用来进行远程拷贝文件；</p><h3 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h3><ul><li><code>tree</code>：显示目录的树结构；</li><li><code>groupadd</code>：添加组；</li><li><code>groupdel</code>：删除组； </li><li><code>useradd -m -g groupName newUser</code>：添加新用户，<code>-m</code> 自动创建用户家目录，<code>-g</code>指定用户所属组；</li><li><code>paddwd userName</code>：设置用户密码；</li><li><code>userdel -r userName</code>：删除用户，<code>-r</code>自动删除用户家目录；</li><li><code>etc/passwd</code>文件存放用户信息，存放信息如下：<ul><li>1、用户名；</li><li>2、密码（x表示加密的密码）；</li><li>3、UID，用户标识；</li><li>4、GID，组标识；</li><li>5、用户全名或本地账号；</li><li>6、家目录；</li><li>7、登录时所使用的<code>shell</code>；</li></ul></li><li><code>usermod</code>：设置用户的主组/附加组和登陆shell；<ul><li>主组：常在创建新用户时指定，<code>在etc/passwd</code>的第4列<code>GID</code>对应的组；</li><li>附加组：在<code>etc/group</code>中最后一列表示该组的用户列表，用于指定用户的附加权限；</li><li><strong>注意</strong>：<code>useradd</code>添加的用户默认是没有使用<code>sudo</code>权限的，需要使用<code>usermod -G sudo userName</code>命令将其添加到<code>sudo</code>附加组中；</li></ul></li><li><code>bin</code>与<code>sbin</code><ul><li><code>bin</code>：二进制执行文件目录，用于具体应用，存放后期安装的一些软件；</li><li><code>sbin</code>：系统管理员专用二进制代码存放目录，用于系统管理，存放<code>root</code>用户的一些管理程序；</li></ul></li><li><code>df</code>：<code>disk free</code>显示磁盘剩余空间；</li><li><code>du</code>：<code>disk usage</code>显示目录下文件大小；</li><li><code>ps aux</code>：查看所有用户的所有进程的详细信息；<ul><li><code>a</code>：显示终端所有进程，包括其他用户进程；</li><li><code>u</code>：显示进程当前详细状态；</li><li><code>x</code>：显示无控制终端的进程；</li></ul></li><li><code>top</code>：动态显示运行中的进程且排序；</li><li><code>find [路径] -name “要搜索的文件”</code>：查找指定目录及其子目录下的文件；</li><li>软链接：<code>ln -s 源文件 链接文件</code>，类似快捷方式，当删除源文件之后，链接文件也不能访问；</li><li>硬连接：<code>ln 源文件 链接文件</code>，相当于<code>copy</code>一份，源文件删除之后，链接文件仍然能够访问；</li><li><strong>注意</strong>：<strong>文件名</strong>和<strong>文件的数据</strong>分开存储；</li><li>打包：<code>tar -cvf 打包名.tar 打包源文件</code>；</li><li>解包：<code>tar -xvf 打包名.tar</code>；</li><li>压缩：<code>tar -zcvf 压缩文件.tar.gz 压缩源文件</code>、<code>tar -jcvf 压缩文件.tar.bz2 压缩源文件</code>；</li><li>解压缩：<code>tar -zxvf 压缩文件.tar.gz</code>、<code>tar -jxvf 压缩文件.tar.bz2</code>，<code>-C</code>用于指定解压缩目录，解压缩目录必须存在；</li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 系统 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++知识点总结</title>
      <link href="/2019/10/02/c-zhi-shi-dian-zong-jie/"/>
      <url>/2019/10/02/c-zhi-shi-dian-zong-jie/</url>
      
        <content type="html"><![CDATA[<h2 id="const在不同位置时的不同意义"><a href="#const在不同位置时的不同意义" class="headerlink" title="const在不同位置时的不同意义"></a>const在不同位置时的不同意义</h2><ul><li>指针类型前：声明一个指向常量的指针，程序中不能通过指针来改变它所指向的值，但指针本身的值可以改变，即指针可以指向其他数据；</li><li>"*”号和指针名之间，声明一个指针常量(常指针)，指针本身的值不可改变，即不能指向其他数据，但指向的数据的值可以改变；</li><li>两个地方都加，声明指向常量的指针常量，指针本身的值不可改变，指向的数据也不能通过指针改变；</li></ul><h2 id="函数指针"><a href="#函数指针" class="headerlink" title="函数指针"></a>函数指针</h2><ul><li>使用函数指针之前，必须先赋值，使它指向一个函数入口地址，赋值语法格式为：函数指针名 = 函数名，其中函数名代表的函数必须是一个已经定义过的，和函数指针具有相同返回类型的函数，指针调用函数格式：(*指针变量)(实参列表)；</li></ul><h2 id="访问权限"><a href="#访问权限" class="headerlink" title="访问权限"></a>访问权限</h2><ul><li>public：可被任意实体访问；</li><li>protected：只允许本类及子类的成员函数访问；</li><li>private：只允许本类的成员函数访问；</li></ul><h2 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h2><ul><li>创建对象时，自动调用构造函数，不能在程序中直接调用，可有任意类型参数，但不能有返回类型；</li><li>构造函数作用：为对象分配空间、为数据成员赋初值、请求其他资源；</li><li>构造函数工作：初始化虚函数表、建立基类对象、建立非静态数据成员对象、安置虚基类对象信息、执行构造函数体中的代码；</li><li>若一个类中没有定义构造函数，编译器会自动生成不带参数的默认构造函数，格式为：</li></ul><pre><code>&lt;类名&gt;::&lt;默认构造函数名&gt;(){}</code></pre><h2 id="析构函数"><a href="#析构函数" class="headerlink" title="析构函数"></a>析构函数</h2><ul><li>析构函数作用：清除对象、释放内存；</li><li>析构函数工作：执行析构函数中的代码、将对象占据的存储空间归还系统、做公共及用户要求的善后工作；</li><li>析构函数无参数和返回值，一个类中只能定义一个析构函数，故不能重载，格式为：</li></ul><pre><code>~&lt;类名&gt;();</code></pre><h2 id="内存布局"><a href="#内存布局" class="headerlink" title="内存布局"></a>内存布局</h2><ul><li>全局数据区：存放全局变量、静态数据、常量；</li><li>代码区：存放类成员函数、其他函数代码；</li><li>栈区：存放局部变量、函数参数、返回数据、返回地址；</li><li>堆区：自由存储区；</li></ul><h2 id="运算符重载重载形式"><a href="#运算符重载重载形式" class="headerlink" title="运算符重载重载形式"></a>运算符重载重载形式</h2><ul><li>重载为类的成员函数，参数个数比原来的运算数少一个</li></ul><pre><code>&lt;函数类型&gt; operator &lt;运算符&gt; (&lt;形参列表&gt;){&lt;函数体&gt;;}</code></pre><ul><li>重载为类的友元函数，参数个数与原运算数个数一样多；</li></ul><pre><code>friend &lt;函数类型&gt; operator &lt;运算符&gt; (&lt;形参列表&gt;){&lt;函数体&gt;;}</code></pre><ul><li>函数重载：返回值类型可以相同可以不同，但形参列表一定不同；</li></ul><h2 id="静态数据成员"><a href="#静态数据成员" class="headerlink" title="静态数据成员"></a>静态数据成员</h2><ul><li>初始化格式：<code>&lt;类型&gt;&lt;类名&gt;::&lt;静态数据成员&gt;=&lt;值&gt;;</code></li><li>引用格式：<code>&lt;类名&gt;::&lt;静态数据成员&gt;;</code></li></ul><h2 id="继承方式"><a href="#继承方式" class="headerlink" title="继承方式"></a>继承方式</h2><ul><li>私有继承private：父类的公有成员和保护成员作为子类的的私有成员，且不能被子类的派生类访问；</li><li>公有继承public：父类的公有成员和保护成员作为子类的成员时，仍保持原有状态，父类私有成员仍为私有；</li><li>保护继承protected：父类的公有成员和保护成员成为子类的保护成员，且只能被他的派生类成员函数或友元访问，父类私有成员仍为私有；<br><img src="http://upload-images.jianshu.io/upload_images/9747350-52e4395e21e3025c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></li></ul><h2 id="派生类构造函数调用顺序："><a href="#派生类构造函数调用顺序：" class="headerlink" title="派生类构造函数调用顺序："></a>派生类构造函数调用顺序：</h2><ul><li>调用基类的构造函数，调用顺序按继承时说明的顺序；</li><li>调用子对象类的构造函数，调用顺序按在类中说明的顺序；</li><li>派生类构造函数体中内容；</li></ul><h2 id="函数模版"><a href="#函数模版" class="headerlink" title="函数模版"></a>函数模版</h2><pre><code>template &lt; 模板形参表 &gt;template &lt;typename T&gt;返回值类型 函数名（形式参数列表）{    函数体语句}例：template &lt;typename T&gt;void swap( T&amp; v1, T&amp; v2){    T temp;    temp = v1;    v1 = v2;    v2 = temp;}</code></pre><h2 id="虚函数"><a href="#虚函数" class="headerlink" title="虚函数"></a>虚函数</h2><ul><li>虚函数必须是类的成员函数，不能是友元，但可以是另一个类的友元，不能为全局函数，也不能为静态函数，析构函数可以为虚函数，但构造函数不能为虚函数；</li></ul><h2 id="变量初始化"><a href="#变量初始化" class="headerlink" title="变量初始化"></a>变量初始化</h2><ul><li>局部变量：定义时，系统不会进行初始化；</li><li>全局变量：定义时，系统自动初始化，</li></ul><p><img src="http://upload-images.jianshu.io/upload_images/9747350-09bf0e212ee6b7f8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1000" alt=""></p><h2 id="友元函数"><a href="#友元函数" class="headerlink" title="友元函数"></a>友元函数</h2><ul><li>在类中定义过，但不是成员函数，定义在类外部，但有权访问类中成员；</li></ul><h2 id="this指针"><a href="#this指针" class="headerlink" title="this指针"></a>this指针</h2><ul><li>只有成员函数才有this指针，友元函数没有this指针；</li></ul><h2 id="静态成员函数与普通成员函数区别："><a href="#静态成员函数与普通成员函数区别：" class="headerlink" title="静态成员函数与普通成员函数区别："></a>静态成员函数与普通成员函数区别：</h2><ul><li>静态成员函数没有this指针，只能访问静态成员（包括静态成员变量和静态成员函数）；</li><li>普通成员函数有this指针，可以访问类中任意成员，而静态成员函数无this指针；</li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 编程语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C/C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C语言知识点总结</title>
      <link href="/2019/10/02/c-yu-yan-zhi-shi-dian-zong-jie/"/>
      <url>/2019/10/02/c-yu-yan-zhi-shi-dian-zong-jie/</url>
      
        <content type="html"><![CDATA[<h3 id="Debug和Release版本比较"><a href="#Debug和Release版本比较" class="headerlink" title="Debug和Release版本比较"></a>Debug和Release版本比较</h3><ul><li>Debug附加了许多调试信息，主要用于调试，故文件大；</li><li>Release是经过优化后的版本，去掉了调试信息，代码进行了优化，故文件较小，且编译速度快过Debug，用于发布平台的配置管理器的设置；</li></ul><h3 id="32位与64位"><a href="#32位与64位" class="headerlink" title="32位与64位"></a>32位与64位</h3><ul><li>32位，地址为32位，最大使用内存4G，只能运行32位的数据；</li><li>64位，地址为64位，既可以运行32位的数据，也可以运行64位的数据；</li></ul><h3 id="指针"><a href="#指针" class="headerlink" title="指针"></a>指针</h3><ul><li>指针是个量，对应一块内存区域；</li><li>指针存储的是某个内存单元的地址；</li><li>访问方式：<pre><code>    1、直接访问：按变量地址存取变量值，取地址符&amp;；    2、间接访问：通过存放变量地址的变量去访问变量，间接运算符*；</code></pre></li><li>在函数中改变一个外部变量，需要变量的地址；</li><li>若是数据，需要指向数据的指针存储数据的地址；</li><li>若是指针，需要指向指针的指针存用户指针的地址；</li></ul><h3 id="数组与指针"><a href="#数组与指针" class="headerlink" title="数组与指针"></a>数组与指针</h3><ul><li>p[i]等价于*(p+i)，&amp;p[i]等价于p+i;</li><li>a[i][j]等价于*(*(a+i)+j)，&amp;a[i][j]等价于*(a+i)+j， a[i]等价于*(a+i)；</li><li>行数组指针定义方法：数据类型（*指针变量名）[二维数组列数]；</li><li>二维数组地址不可变化，数据可以变化，可以在不修改地址的情况下管理数据，指针数组指向的数据不可变化，但地址可以变化，在不修改数据的情况下查看数据；</li><li>三维数组与指针，A[i][j][k]的三种表达形式：*(A[i][j]+k)、*(*(A[i]+j)+k)、*(*(*(A+i)+j)+k)；</li></ul><h3 id="函数与指针"><a href="#函数与指针" class="headerlink" title="函数与指针"></a>函数与指针</h3><ul><li>若在程序中定义了一个函数，在编译时，编译系统为函数代码分配一段存储空间，这段存储空间的起始地址，称为这个函数的指针，int(*p)(int, int)，代表定义p是指向函数的指针变量，可以指向类型为整形且有两个整形参数的函数；</li><li>定义返回值为指针值的函数的一般形式：类型名 *函数名（参数列表）；</li></ul><h3 id="malloc和free函数"><a href="#malloc和free函数" class="headerlink" title="malloc和free函数"></a>malloc和free函数</h3><ul><li>动态内存分配，无法知道内存具体位置时，想要绑定真正的内存空间，则要用到动态分配内存，原型为extern void* malloc(unsigned int size)，空指针可以转换为任何类型的指针，size仅仅是申请字节的大小，并不管申请的内存块中存储的数据类型，故申请内存的长度需通过“长度 x sizeof（类型）”的方式给出，使用完之后要用free释放内存；</li><li>一个类型的指针包含三个信息：地址、步长、内容如何解析；</li><li>在栈区开辟一段内存，系统会自己回收，在堆区开辟一段内存，需要手动用free释放；</li></ul><h3 id="calloc和realloc函数"><a href="#calloc和realloc函数" class="headerlink" title="calloc和realloc函数"></a>calloc和realloc函数</h3><ul><li>calloc原型：void* calloc（unsigned int num，unsigned int size），num：对象个数，size：对象占据的内存字节数，功能是为已经分配的内存重新分配空间并复制内容，会自动将内存初始化为0；</li><li>realloc原型：void<em>realloc（void</em> ptr，unsigned int size），ptr：已分配的内存地址，size：重新分配的字节数</li></ul><h3 id="内存分区"><a href="#内存分区" class="headerlink" title="内存分区"></a>内存分区</h3><ul><li>C/C++中，内存分为：堆、栈、自由存储区、全局/静态存储区、常量存储区；</li><li>堆：由new分配的内存块，一般对应一个delete，若没用释放，则程序结束后操作系统自动回收；</li><li>栈：编译器需要的时候分配，不需要时自动清楚的变量的存储区，通常是局部变量、函数参数等；</li><li>自由存储区：由malloc等分配的内存块，必须用free释放；</li><li>全局存储区：全局变量和静态变量的存储区域，未初始化的两者在相邻存的另一块区域，程序结束后自动释放；</li><li>常量存储区：存放常量，不可修改；</li></ul><h3 id="sizeof和strlen"><a href="#sizeof和strlen" class="headerlink" title="sizeof和strlen"></a>sizeof和strlen</h3><ul><li>实例</li></ul><pre><code>#include &lt;iostream&gt;#include &lt;string.h&gt;int main(){    char str[10] = "hello";    cout &lt;&lt; sizeof(str) &lt;&lt;endl &lt;&lt; sizeof("hello")&lt;&lt; endl &lt;&lt; str(str)&lt;&lt; endl;    system("pause");    return 0;}</code></pre><ul><li>结果：</li></ul><p><img src="http://upload-images.jianshu.io/upload_images/9747350-6aee95a3e2f42b7f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><ul><li>结论：对一个数组字符串，sizeof不管是否初始化，只输出其预留内存大小，而strlen()输出初始化后的字符串所占内存大小，不含’\0’；</li></ul><h3 id="gets和scanf"><a href="#gets和scanf" class="headerlink" title="gets和scanf"></a>gets和scanf</h3><ul><li>gets遇到换行符表示结束，而scanf遇到空格、制表符、换行则表示结束；</li></ul><h3 id="Unicode字符问题"><a href="#Unicode字符问题" class="headerlink" title="Unicode字符问题"></a>Unicode字符问题</h3><ul><li>char字符串可显示汉字，但字符不可以，字符连在一起用%c%c可以输出一个汉字；</li></ul><h3 id="结构体"><a href="#结构体" class="headerlink" title="结构体"></a>结构体</h3><ul><li>结构体引用方式：结构体数组名[下标].成员名；</li><li>结构体指针变量引用成员形式：(*结构体指针名).成员名、结构体指针名-&gt;成员名、结构体变量名.成员名；</li></ul><h3 id="结构体字节对齐机制"><a href="#结构体字节对齐机制" class="headerlink" title="结构体字节对齐机制"></a>结构体字节对齐机制</h3><ul><li>结构体变量大小是能够被其最宽基本类型成员的大小所整除；</li><li>结构体每个成员相对于结构体首地址的偏移量都是成员大小的整数倍，若有需要编译器会在成员之间加上填充字节；</li><li>结构体总大小为结构体最宽基本类型成员大小的整数倍，若有需要编译器会在最末一个成员之后加上填充字节；</li></ul><h3 id="共同体union"><a href="#共同体union" class="headerlink" title="共同体union"></a>共同体union</h3><ul><li>使几个不同类型的变量共占一段内存(相互覆盖)，长度=最长成员所占字节数，不能同时对所有成员初始化；</li></ul><h3 id="深拷贝与浅拷贝"><a href="#深拷贝与浅拷贝" class="headerlink" title="深拷贝与浅拷贝"></a>深拷贝与浅拷贝</h3><ul><li>深拷贝：根据指针指向的值，重新申请内存，再以此将指针指向内容复制过来，有相互独立的内存空间，一般复制构造函数和strcpy等函数都是深拷贝；</li><li>浅拷贝：把对象（结构）里的值完全复制给另一个对象（结构），对于地址也是照抄，类的默认复制构造函数是将类中非静态成员变量逐个复制，是浅拷贝；</li></ul><h3 id="文件分类"><a href="#文件分类" class="headerlink" title="文件分类"></a>文件分类</h3><h5 id="按逻辑"><a href="#按逻辑" class="headerlink" title="按逻辑"></a>按逻辑</h5><ul><li>记录文件：具有一定结构的记录组成（定长和不定长）；</li><li>流式文件：由一个个字符（字节）数据顺序组成；<h5 id="按存储介质"><a href="#按存储介质" class="headerlink" title="按存储介质"></a>按存储介质</h5></li><li>普通文件：存储介质文件（磁盘、磁带等）；</li><li>设备文件：非存储介质（键盘、显示器、打印机等）；<h6 id="按数据组织形式"><a href="#按数据组织形式" class="headerlink" title="按数据组织形式"></a>按数据组织形式</h6></li><li>文本文件：ASXII文件，每个字节存放一个字符的ASCII码；</li><li>二进制文件：数据按其在内存中的存储形式原样存放；</li></ul><h3 id="文件处理方法"><a href="#文件处理方法" class="headerlink" title="文件处理方法"></a>文件处理方法</h3><ul><li>缓冲文件系统：高级文件系统，系统自动为正在使用的文件开辟内存缓冲区和非缓冲文件系统；</li><li>低级文件系统：由用户在程序中为每个文件设定缓冲区；</li></ul><h3 id="fscanf和fprintf函数"><a href="#fscanf和fprintf函数" class="headerlink" title="fscanf和fprintf函数"></a>fscanf和fprintf函数</h3><ul><li>两者遇到空格或换行时结束；</li></ul><h3 id="文件型结构体"><a href="#文件型结构体" class="headerlink" title="文件型结构体"></a>文件型结构体</h3><pre><code>struct _iobuf {char *_ptr;//当前缓冲区内容指针int   _cnt;//缓冲区还有多少个字符char *_base;//缓冲区的起始地址int   _flag;//文件流的状态，是否错误或者结束int   _file;//文件描述符int   _charbuf;//双字节缓冲，缓冲2个字节int   _bufsiz;//缓冲区大小char *_tmpfname;//临时文件名};</code></pre><h3 id="fopen打开模式"><a href="#fopen打开模式" class="headerlink" title="fopen打开模式"></a>fopen打开模式</h3><ul><li>只读模式”r”打开文件，该文件必须存在，否则打开失败，r+,rb,rb+,rt,rt+模式打开文件，文件不存在也会失败；</li><li>只写模式”w”打开，文件存在则长度清0，不存在则建立文件，w+,wb,wb+,wt,wt+模式打开文件，文件不存在则建立文件；</li><li>a以附加的方式打开只写文件，若文件不存在，则建立文件，存在则在文件尾部添加数据，a+以附加的方式打开可读写文件，不存在则建立文件，存在则写入数据到文件尾，at二进制数据的追加，不存在则创建，只能写、at+读写打开一个文本文件，允许读或在文本末追加数据，ab二进制数据的追加，不存在则创建，只能写；</li></ul><h3 id="阻塞模式和非阻塞模式"><a href="#阻塞模式和非阻塞模式" class="headerlink" title="阻塞模式和非阻塞模式"></a>阻塞模式和非阻塞模式</h3><ul><li>非阻塞模式，会引起宕机，会一直执行；</li></ul><pre><code>system("start notepad");</code></pre><ul><li>阻塞模式，不会引起宕机，执行一步后才能执行下一步；</li></ul><pre><code>system("notepad");</code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 编程语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C/C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java知识点总结-3</title>
      <link href="/2019/10/02/java-zhi-shi-dian-zong-jie-3/"/>
      <url>/2019/10/02/java-zhi-shi-dian-zong-jie-3/</url>
      
        <content type="html"><![CDATA[<h2 id="抽象类"><a href="#抽象类" class="headerlink" title="抽象类"></a>抽象类</h2><ul><li>使用规则<ul><li>abstract定义抽象类；</li><li>abstract定义抽象方法，只有声明，不需要实现；</li><li>包含抽象方法的类是抽象类；</li><li>抽象类中可以包含普通方法，也可以没有抽象方法；</li><li>抽象类不能直接创建，可以定义引用变量；</li></ul></li></ul><h2 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h2><ul><li>定义：一种特殊的类，由全局常量和公共的抽象方法所组成；</li><li>类是一种具体实现体，而接口定义了某一批类所要遵守的规范，接口不关心这些类的内部数据，也不关心这些类中方法的实现细节，它只规定这些类中必须提供某些方法；</li></ul><p><img src="http://upload-images.jianshu.io/upload_images/9747350-43670d671624dbfc?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"> </p><ul><li>接口使用：一个类可以实现一个或多个接口，实现接口使用implements关键字。Java中一个类只能继承一个父类，可以通过多个接口做补充；</li></ul><p><img src="http://upload-images.jianshu.io/upload_images/9747350-984df175a489393a?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><h2 id="UML"><a href="#UML" class="headerlink" title="UML"></a>UML</h2><ul><li>定义：统一建模语言或标准建模语言，是一个支持模型化和软件系统开发的图形化语言，为软件开发的所有阶段提供模型化和可视化支持；</li></ul><h2 id="异常"><a href="#异常" class="headerlink" title="异常"></a>异常</h2><ul><li>处理运行时异常时，采用逻辑去合理规避同时辅助try-catch处理；</li><li>在多重catch块后面，可以加一个catch(Exception)来处理可能被遗漏的异常；</li><li>对于不确定的代码，也可以加上try-catc，处理潜在的异常；</li><li>尽量去处理异常，切忌只是简单的调用printStackTrace()去打印输出；</li><li>具体如何处理异常，要根据不用的业务需求和异常类型去决定；</li><li>尽量天剑finally语句块去释放占用的资源；</li></ul><h2 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h2><ul><li>String对象创建后不能被修改，是不可变的，所谓的修改其实是创建了新的对象，所指向的内存空间不同；</li><li>每次new一个字符串就是产生了一个新对象，即便两个字符串的内容相同，使用”==”比较时也为<code>false</code>，若只需比较内容是否相同，应使用<code>eauals()</code>方法；</li></ul><p><img src="http://upload-images.jianshu.io/upload_images/9747350-e286923822e8edd4?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="String类常用方法"></p><ul><li><code>==</code>和<code>equals()</code>的区别<ul><li><code>==</code>判断两个字符串在内存中首地址是否相同，即判断是否同一个字符串对象；</li><li><code>equals</code>：比较存储在两个字符串对象中的内容是否一致；</li></ul></li><li>StringBuffer是线程安全的，而StringBuilder则没有实现线程安全功能，所以性能更高；</li></ul><h2 id="包装类"><a href="#包装类" class="headerlink" title="包装类"></a>包装类</h2><ul><li>基本类型和包装类之间的对应关系：</li></ul><p><img src="http://upload-images.jianshu.io/upload_images/9747350-638245ec883cc52c?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><ul><li><p>包装类提供的两大类</p><ul><li>将本类型和其他基本类型进行转换的方法；</li><li>将字符串和本类型及包装类互相装换的方法；</li></ul></li><li><p>装箱：把基本类型转换成包装类，使其具有对象的性质，又可分为手动装箱和自动装箱；</p></li><li><p>拆箱：把包装类对象转换程基本类型的值，分为手动拆箱和自动拆箱；</p></li><li><p>基本类型转换为字符串的三种方法：</p><ul><li>使用包装类的<code>toString()</code>方法；</li><li>使用String类的<code>valueof()</code>方法；</li><li>用一个空字符串加上基本类型，得到的就是基本数据类型对应的字符串；</li></ul></li><li><p>将字符串转换为基本类型的两种方法：</p><ul><li>调用包装类的<code>parseXxx</code>静态方法；</li><li>调用包装类的<code>valueOf()</code>方法转换为基本类型的包装类，会自动拆箱；</li></ul></li></ul><h2 id="时间"><a href="#时间" class="headerlink" title="时间"></a>时间</h2><ul><li>调用<code>SimpleDateFormat</code>对象的<code>parse()</code>方法时可能会出现转换异常，即ParseException，因此需要进行异常处理；</li><li>使用Date类时需要导入<code>java.util</code>包，使用<code>SimpleDateFormat</code>时需要导入<code>java.text</code>包；</li><li>调用<code>Calendar</code>获取月份时，月份是从<code>0</code>开始的；</li></ul><p><img src="http://upload-images.jianshu.io/upload_images/9747350-7d6cc94dfde0f360?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><blockquote><p>###Math类</p></blockquote><ul><li><code>Math</code>位于<code>java.lang</code>包中，包含用于执行基本数学运算的方法，类中所有方法懂事静态方法，可以直接使用<code>类名.方法名()</code>；</li></ul><p><img src="http://upload-images.jianshu.io/upload_images/9747350-c5f27295fd8a698b?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><h2 id="集合框架"><a href="#集合框架" class="headerlink" title="集合框架"></a>集合框架</h2><ul><li>定义：一种工具类，就像是容器，储存任意数量的具有共同属性的对象；</li><li>作用<ul><li>在类的内部，对数据进行组织；</li><li>简单而快速的搜索大数量的条目；</li><li>有的集合接口，提供一系列排列有序的元素，且可以在序列中间快速插入或者删除有关元素； </li><li>有的集合接口，提供映射关系，可以通过关键字(key)去快速查找到对应的唯一对象，而这个关键字可以是任意类型；</li></ul></li><li>数组与集合区别<ul><li>数组长度固定，集合长度可变；</li><li>数组只能通过下标访问元素，类型固定，而有的集合可以通过任意类型查找所映射的具体对象；</li></ul></li></ul><p><img src="http://upload-images.jianshu.io/upload_images/9747350-aaa99fdeb8c71cc9?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><ul><li>Collection接口<ul><li>是List、Set、Queue接口的父接口；</li><li>定义了可用于操作List、Set、Queue的方法–增删改查；</li></ul></li><li>List接口及其实现类–ArrayList<ul><li>List是元素有序且可重复的集合，被称为序列；</li><li>List可以精确控制每个元素的插入位置，或删除某个位置元素；</li><li>ArrayList–数组序列，是List的一个重要实现类；</li><li>ArrayList底层由数组实现；</li></ul></li><li>Map接口<ul><li>Map提供了一种映射关系，其中的元素是以键值对<code>(key-value)</code>的形式存储的，能够实现根据key快速查找value；</li><li>Map中的键值对以Entry类型的对象实例形式存在；</li><li>键(key)不可以重复，value可以；</li><li>每个键最多只能映射到一个值；</li><li>Map接口提供了分别返回key值集合、value值集合以及Entry(键值对)集合的方法；</li><li>Map支持泛型，形如：Map&lt;K,V&gt;；</li></ul></li><li>HashMap类<ul><li>HashMap是Map的一个重要实现类，也是最常用的，基于哈希表实现；</li><li>HashMap中的Entry对象时无序排列的；</li><li>Key值和value值都可以为null，但是一个HashMap只能有一个key值为null的映射(key值不可重复)；</li></ul></li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 编程语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java知识点总结-2</title>
      <link href="/2019/10/02/java-zhi-shi-dian-zong-jie-2/"/>
      <url>/2019/10/02/java-zhi-shi-dian-zong-jie-2/</url>
      
        <content type="html"><![CDATA[<h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><h4 id="一维数组"><a href="#一维数组" class="headerlink" title="一维数组"></a>一维数组</h4><ul><li>声明<ul><li><code>数据类型[] 数组名；</code></li><li><code>数据类型 数组名[]；</code></li></ul></li><li>分配空间<ul><li><code>数组名 = new 数据类型 [数组长度]；</code></li></ul></li><li>可以在声明的同时分配空间，分配空间之后数组中才能放数据，数组元素都是通过下标来访问，声明数组的同时赋值时不能指定数组长度；</li><li>foreach：<code>for(元素类型 元素变量：遍历对象){ 执行的代码；}；</code></li></ul><h4 id="二维数组"><a href="#二维数组" class="headerlink" title="二维数组"></a>二维数组</h4><ul><li>声明并分配空间：<code>数据类型[][]  数组名 = new 数据类型 [行的个数][列的个数]；</code><br><img src="http://upload-images.jianshu.io/upload_images/9747350-e39f276df7b6fa68?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></li><li>在定义二维数组时可以只指定行的个数，然后再为每一行分别指定列的个数，若每行列数不同，则创建的是不规则的二维数组；</li></ul><h2 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h2><ul><li><p>定义语法：<code>访问修饰符 返回值类型 方法名(参数列表){  方法体；}；</code></p></li><li><p>分类：</p><ul><li>无参无返回值方法；</li><li>无参带返回值方法；</li><li>带参无返回值方法；</li><li>带参带返回值方法；<ul><li>调用方法：<code>对象名.方法名()</code></li><li>调用带参方法时，必须保证实参的数量，类型，顺序和形参一一对应；</li><li>调用方法时，实参不需要指定数据类型；</li><li>方法的参数既可以是基本数据类型，也可以是引用数据类型，当有多个参数时，多个参数间以逗号分割；</li><li>重载：在同一个类中，方法名相同，方法参数个数、顺序或类型不同称为方法的重载，与方法的修饰符或返回值无关系；</li></ul></li></ul></li></ul><h2 id="类与对象"><a href="#类与对象" class="headerlink" title="类与对象"></a>类与对象</h2><ul><li>类是模子，确定对象将拥有的特征(属性)和行为(方法)，特点：类是对象的类型，具有相同属性和方法的一组对象的集合；</li><li>定义类的步骤：<ul><li>定义类名；</li><li>编写类的属性；</li><li>编写类的方法；</li></ul></li><li>使用对象的步骤：<ul><li>创建对象：<code>类名 对象名 = new 类名()；</code></li><li>使用对象：<code>引用对象的属性：对象名.属性；</code></li></ul></li></ul><h2 id="成员变量与局部变量"><a href="#成员变量与局部变量" class="headerlink" title="成员变量与局部变量"></a>成员变量与局部变量</h2><ul><li>成员变量：在类中定义，用来描述对象将要有什么，既可被本类的方法使用，还能供其他类的方法使用；</li><li>局部变量：在类的方法中定义，在方法中临时保存数据，只能在当前方法中使用；</li><li>区别：<ul><li>局部变量作用域仅限于定义它的方法，成员变量的作用域在整个类内部都是可见的；</li><li>成员变量有初始值，但局部变量未赋予初始值；</li><li>不同方法中可以有同名局部变量，同一方法中，不允许有同名局部变量；</li><li>两者重名时，局部变量优先级更高；</li></ul></li></ul><h2 id="构造方法"><a href="#构造方法" class="headerlink" title="构造方法"></a>构造方法</h2><ul><li>使用new+构造方法，创建一个新对象；</li><li>构造方法是定义在Java类中的一个用来初始化对象的方法，构造方法与类同名且无返回值；</li><li>当无指定构造方法时，系统会自动添加无参的构造方法；</li><li>当有指定构造方法，无论是有参、无参的构造方法，都不会自动添加无参的构造方法；</li><li>构造方法的重载：方法名相同，但参数不同的多个方法，调用时会自动根据不同的参数选择相应方法；</li><li>构造方法不但可以给对象的属性赋值，还可以保证给对象的属性赋一个合理的值；</li></ul><h2 id="static"><a href="#static" class="headerlink" title="static"></a>static</h2><ul><li>static修饰的成员称为静态成员或类成员，属于整个类所有，而不是某个对象所有，即被类的所有对象所共享。静态成员可以使用类名直接访问，也可以使用对象名进行访问，static可以修饰变量、方法和代码块；</li><li>静态成员属于整个类，当系统第一次使用该类时，就会为其分配内存空间直到该类别卸载才会进行资源回收；</li><li>static修饰的方法称为静态方法或类方法，静态方法中可以直接调用同类中的静态成员，但不能直接调用非静态成员，如果想要在静态方法中调用非静态变量，可以通过创建类的对象，然后通过对象来访问非静态变量；</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloWorld</span><span class="token punctuation">{</span>    String name <span class="token operator">=</span> <span class="token string">"村雨"</span><span class="token punctuation">;</span>    <span class="token keyword">static</span> String hobby <span class="token operator">=</span> <span class="token string">"basketball"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"姓名"</span> <span class="token operator">+</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"爱好"</span> <span class="token operator">+</span> hobby<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="http://upload-images.jianshu.io/upload_images/9747350-dbc8da50a41f62dd?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><ul><li>普通成员方法中，可以直接访问同类的非静态变量和静态变量；</li></ul><p><img src="http://upload-images.jianshu.io/upload_images/9747350-6f990b75f477e757?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><ul><li>静态方法中不能直接调用非静态方法，需要通过对象来访问非静态方法；</li></ul><p><img src="http://upload-images.jianshu.io/upload_images/9747350-53423f3c52d8b389?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><ul><li>静态初始化块只在类加载时执行，且只执行一次，同时静态初始化块只能给静态变量复制，不能初始化普通的成员变量；</li></ul><h2 id="面向对象特点"><a href="#面向对象特点" class="headerlink" title="面向对象特点"></a>面向对象特点</h2><h4 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h4><ul><li>概念：将类的某些信息隐藏在类内部，不允许外部程序直接访问，而是通过该类提供的方法来实现对隐藏信息的操作和访问；</li><li>好处：只能通过规定的方法访问数据，隐藏类的实例细节，方便修改和实现；</li><li>实现步骤：<ul><li>修改属性可见性，设为private；</li><li>创建getter/setter方法用于属性读写；</li><li>在getter/setter方法中加入属性控制语句，对属性值的合法性进行判断；</li></ul></li></ul><h4 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h4><ul><li><p>Java中是单继承；</p></li><li><p>优点：</p><ul><li>子类拥有父类的所有属性和方法；</li><li>实现代码复用；</li></ul></li><li><p>重写：返回值类型，方法名，参数类型及个数都要与父类继承的方法相同，才叫方法的重写；</p></li><li><p>继承的初始化顺序</p><ul><li>初始化父类再初始化子类；</li><li>先执行初始化对象中属性，再执行构造方法中的初始化；</li></ul></li><li><p>final</p><ul><li>修饰类，则该类不允许被继承；</li><li>修饰方法，则该方法不允许被覆盖(重写)；</li><li>修饰属性：则该类属性不会进行隐式初始化(类的初始化属性必须有值)活在构造方法中赋值(但只能选其一)；</li><li>修饰变量，则该变量的值只能赋一次值，即变为常量；</li></ul></li><li><p>super</p><ul><li>子类构造过程中必须调用父类构造方法；</li><li>若子类构造方法中既没有显示调用父类构造方法，而父类有没有无参的构造方法，则编译出错；</li><li>若显式调用构造方法，必须在子类构造方法的第一行；</li><li>若子类构造方法中未显示调用父类的构造方法，则系统默认调用父类无参的构造方法；</li></ul></li><li><p>equals()方法：比较的是对象的引用是否指向同一块内存地址；</p></li></ul><h4 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h4><ul><li>引用多态<ul><li>父类引用可以指向本类对象；</li><li>父类引用可以指向子类对象；</li></ul></li><li>方法多态<ul><li>创建本类对象时，调用的方法为本类方法；</li><li>创建子类对象时，调用的方法为子类重写的方法或者继承的方法；</li></ul></li><li>引用类型转换<ul><li>向上类型转换(隐式/自动类型转换)，是小类型到大类型的转换，无风险；</li><li>向下类型转换(强制类型转换)，是大类型到小类型，存在风险；</li><li>instanceof运算符，用来解决引用对象的类型，避免类型转换的安全性问题；</li></ul></li></ul><h2 id="包"><a href="#包" class="headerlink" title="包"></a>包</h2><ul><li>作用：<ul><li>管理Java文件；</li><li>解决同名文件冲突；</li></ul></li><li>必须放在Java源程序的第一行，包名间可以使用<code>.</code>号隔开；</li><li>系统中的包<ul><li>java.(功能).(类)</li><li>java.lang.(类)  包含Java语言基础的类；</li><li>java.util.(类)  包含Java语言中各种工具类；</li><li>java.io.(类)  包含输入、输出相关功能的类；</li></ul></li></ul><h2 id="修饰符"><a href="#修饰符" class="headerlink" title="修饰符"></a>修饰符</h2><p><img src="http://upload-images.jianshu.io/upload_images/9747350-6950e2dd2ca27f1f?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><h2 id="内部类"><a href="#内部类" class="headerlink" title="内部类"></a>内部类</h2><ul><li>定义：定义在另一个类里面的类，与之对应，包含内部类的类被称为外部类；</li><li>作用<ul><li>提供更好的封装，可把内部类隐藏在外部类之内，不允许同一个包中的其他类访问该类；</li><li>内部类的方法可以直接访问外部类的所有数据，包括私有的数据；</li><li>内部类所实现的功能使用外部类同样可以实现，只是有时使用内部类更方便；</li></ul></li><li>分类<ul><li>成员内部类；</li><li>静态内部类；</li><li>方法内部类；</li><li>匿名内部类；</li></ul></li><li>调用方式</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo</span><span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Test test <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Demo demo <span class="token operator">=</span> test<span class="token punctuation">.</span><span class="token keyword">new</span> <span class="token class-name">Demo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>内部类 对象名 = 外部类对象.new 内部类();</code></pre><ul><li><p>内部类中方法可以直接访问外部类中的数据，而不受访问控制符的影响，但外部类是不能使用内部类的成员和方法；</p></li><li><p>若外部类和内部类具有相同的成员变量或方法，内部类默认访问自己的成员变量或方法，若要访问外部类的成员变量，可以使用this关键字；<br><img src="http://upload-images.jianshu.io/upload_images/9747350-42ecc9a1e6e191db?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p></li><li><p>静态内部类</p><ul><li>特点<ul><li>静态内部类不能直接访问外部的非静态成员，通过<code>new 外部类().成员</code>的方式访问；</li><li>若外部类的静态成员与内部类的成员名称相同，可通过“类名.静态成员”访问外部类的静态成员；若外部类的静态成员与内部类的成员名称不同，则可通过”成员名”直接调用外部类的静态成员；</li><li>创建静态内部类的对象时，不需要内部类的对象，可直接创建<code>内部类 对象名 = new 内部类();</code></li></ul></li></ul></li></ul><p><img src="http://upload-images.jianshu.io/upload_images/9747350-9bf85bc6ad25fa9a?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><ul><li>方法内部类：内部类定义在外部类的方法中，方法内部类只在该方法的内部可见，即只能在该方法中使用，由于方法内部类不能在外部类的方法以外的地方使用，因此方法内部类不能使用访问控制服和static修饰符；</li></ul><p><img src="http://upload-images.jianshu.io/upload_images/9747350-d41a0bb96f73f7e7?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 编程语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java知识点总结-1</title>
      <link href="/2019/10/02/java-zhi-shi-dian-zong-jie-1/"/>
      <url>/2019/10/02/java-zhi-shi-dian-zong-jie-1/</url>
      
        <content type="html"><![CDATA[<ul><li>JVM(Java Virtual Machine)：源文件-&gt;编译器-&gt;字节码文件-&gt;解释器-&gt;程序；</li><li>JDK:Java Development Kit，Java开发工具包；</li><li>JRE:Java Runtime Environment，Java运行时环境；</li><li>Java是一种强类型语言，即它所存储的数据都是有类型的，且必须在编译时就确定其类型；<h3 id="数据类型："><a href="#数据类型：" class="headerlink" title="数据类型："></a>数据类型：</h3><ul><li>基本数据类型;</li><li>数值型：<ul><li>整数类型：byte，short，int，long；</li><li>浮点型：float，double；</li></ul></li><li>字符型：char；</li><li>布尔型：boolean；</li></ul></li></ul><p><img src="http://upload-images.jianshu.io/upload_images/9747350-6af0245f95206ead?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><ul><li>引用数据类型：<ul><li>类；</li><li>接口；</li><li>数组；</li></ul></li></ul><p><img src="http://upload-images.jianshu.io/upload_images/9747350-f9f6f2216f98a90c?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><h3 id="变量使用规则："><a href="#变量使用规则：" class="headerlink" title="变量使用规则："></a>变量使用规则：</h3><ul><li>先声明再使用；</li><li>可以在声明的同时进行初始化；</li><li>变量中每次只能赋一个值，但可以修改多次；</li><li>变量名使用中文无语法错误，但不建议使用；</li></ul><h3 id="自动类型转换需满足的条件"><a href="#自动类型转换需满足的条件" class="headerlink" title="自动类型转换需满足的条件"></a>自动类型转换需满足的条件</h3><ul><li>目标类型能与源类型兼容；</li><li>目标类型大于源类型；</li></ul><h3 id="常量"><a href="#常量" class="headerlink" title="常量"></a>常量</h3><ul><li>设定后在程序运行过程中不允许改变；</li><li>语法：final 数据类型 变量名 = 值；</li></ul><h3 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h3><ul><li>单行注释：//</li><li>多行注释：/*     */</li><li>文档注释：/**   */</li></ul><h3 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h3><ul><li>算数运算符；</li><li>赋值运算符；</li><li>比较运算符；</li><li>逻辑运算符；</li><li>条件运算符：语法形式：布尔表达式？表达式1：表达式2；</li></ul><h3 id="运算符优先级"><a href="#运算符优先级" class="headerlink" title="运算符优先级"></a>运算符优先级</h3><p><img src="http://upload-images.jianshu.io/upload_images/9747350-9ae019ea388631e1?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><h3 id="if…else"><a href="#if…else" class="headerlink" title="if…else"></a>if…else</h3><ul><li>单重if</li></ul><p><img src="http://upload-images.jianshu.io/upload_images/9747350-63faddddd4116d84?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><ul><li>多重if</li></ul><p><img src="http://upload-images.jianshu.io/upload_images/9747350-a6857f15c433a075?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><ul><li>嵌套if</li></ul><p><img src="http://upload-images.jianshu.io/upload_images/9747350-a337d8b762278c0c?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><h3 id="条件之switch"><a href="#条件之switch" class="headerlink" title="条件之switch"></a>条件之switch</h3><ul><li>switch后小括号中表达式的值必须是整形或字符型；</li><li>case后的值可以是常量数值，也可以是常量表达式；</li><li>case匹配后，执行匹配快中程序代码，若未遇到break会继续执行下一个的case块的内容，直到遇到break或switch语句块结束；</li></ul><h3 id="循环"><a href="#循环" class="headerlink" title="循环"></a>循环</h3><ul><li>while：特点是先判断，后执行；</li><li>do…while：特点是先执行，后判断，保证循环至少被执行一次；</li><li>for：语法：for(循环变量初始化；循环条件；循环变量变化){<br> 循环条件；<br>}</li><li>do…while循环结束的条件是while后的条件成立；</li><li>break：作用是终止整个循环体的执行；</li><li>continue：跳过循环体中剩余的语句并进行下一次循环；</li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 编程语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java设计模式</title>
      <link href="/2019/10/02/java-she-ji-mo-shi/"/>
      <url>/2019/10/02/java-she-ji-mo-shi/</url>
      
        <content type="html"><![CDATA[<h2 id="设计模式基础"><a href="#设计模式基础" class="headerlink" title="设计模式基础"></a>设计模式基础</h2><ul><li><h4 id="设计模式主要基于的面向对象设计的原则："><a href="#设计模式主要基于的面向对象设计的原则：" class="headerlink" title="设计模式主要基于的面向对象设计的原则："></a>设计模式主要基于的面向对象设计的原则：</h4><ul><li>程序到一个接口不用实现</li><li>有利于对继承对象组合；</li></ul></li><li><h4 id="设计模式用途："><a href="#设计模式用途：" class="headerlink" title="设计模式用途："></a>设计模式用途：</h4><ul><li>开发人员的通用平台；</li><li>最佳实践；<ul><li><h4 id="类型："><a href="#类型：" class="headerlink" title="类型："></a>类型：</h4></li></ul></li><li>创造模式：提供了一种创建对象而隐藏创建逻辑的方法，而非直接使用<code>new</code>来实例化对象；</li><li>结构模式：涉及类和对象组成，继承概念用于组成接口并定义方法组合对象以获得新功能；</li><li>行为模式：侧重于对象之间的通信；</li><li>J2EE模式：设计表示层，由<code>Sun Java Center</code>标识；</li></ul></li></ul><h2 id="创造设计模式"><a href="#创造设计模式" class="headerlink" title="创造设计模式"></a>创造设计模式</h2><ul><li><h4 id="工厂模式"><a href="#工厂模式" class="headerlink" title="工厂模式"></a>工厂模式</h4><ul><li>无创建逻辑暴露给客户端创建对象，使用一个通用接口引用新创建的对象；<ul><li>实现步骤：<ul><li>创建一个接口；</li><li>创建实现相同接口的具体类；</li><li>创建工厂根据给定信息生成具体类的对象；</li><li>使用工厂通过传递类型等信息来获取具体类的对象；</li><li>验证结果；</li></ul></li></ul></li></ul></li></ul><ul><li><h4 id="抽象工厂模式"><a href="#抽象工厂模式" class="headerlink" title="抽象工厂模式"></a>抽象工厂模式</h4><ul><li>接口负责创建相关对象的工厂，而不明确指定他们的类，每个生成的工厂可按照工厂模式提供对象；</li></ul></li><li><h4 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h4><ul><li>设计一个类，负责创建一个对象，同时确保只创建一个对象，类提供一种方法来访问它的唯一对象，可直接访问而不需要实例化类对象；</li></ul></li><li><h4 id="原型模式"><a href="#原型模式" class="headerlink" title="原型模式"></a>原型模式</h4><ul><li>涉及实现一个原型接口，只创建当前对象的克隆；</li></ul></li><li><h4 id="Builder模式"><a href="#Builder模式" class="headerlink" title="Builder模式"></a><code>Builder</code>模式</h4><ul><li>构造器逐步构建最终对象，此构造器独立于其他对象；</li></ul></li></ul><h2 id="结构设计模式"><a href="#结构设计模式" class="headerlink" title="结构设计模式"></a>结构设计模式</h2><ul><li><h4 id="适配器-Adapter-模式"><a href="#适配器-Adapter-模式" class="headerlink" title="适配器(Adapter)模式"></a>适配器(<code>Adapter</code>)模式</h4><ul><li>组合两个相互独立不兼容接口之间的桥梁，涉及一个单独的类，负责连接独立或不兼容接口的功能；</li></ul></li><li><h4 id="桥接-Bridge-模式"><a href="#桥接-Bridge-模式" class="headerlink" title="桥接(````Bridge```)模式"></a>桥接(````Bridge```)模式</h4><ul><li>定义与实现分离，涉及一个充当桥接的接口，这样使得具体类与接口实现者类无关；</li></ul></li><li><h4 id="组合模式"><a href="#组合模式" class="headerlink" title="组合模式"></a>组合模式</h4><ul><li>以同样的方式处理一组对象作为单个对象，根据树结构组成对象，以表示部分以及整个层次结构；</li></ul></li><li><h4 id="过滤器-条件-模式"><a href="#过滤器-条件-模式" class="headerlink" title="过滤器(条件)模式"></a>过滤器(条件)模式</h4><ul><li>使开发人员可以使用不同条件过滤一组对象，并通过逻辑操作以解耦方式将其链接；</li></ul></li><li><h4 id="装饰者-Decorator-模式"><a href="#装饰者-Decorator-模式" class="headerlink" title="装饰者(Decorator)模式"></a>装饰者(<code>Decorator</code>)模式</h4><ul><li>允许用户向现有对象添加新功能而不改变其结构，创建一个修饰器类用于包装原始类并提供附加功能，保持类方法签名完整；</li></ul></li><li><h4 id="外观-Facade-模式"><a href="#外观-Facade-模式" class="headerlink" title="外观(Facade)模式"></a>外观(<code>Facade</code>)模式</h4><ul><li>隐藏系统复杂性，并为客户端提供一个可以访问系统的接口，提供客户端所需的简化方法和委托调用现有系统类的方法；</li></ul></li><li><h4 id="享元-Flyweight-模式"><a href="#享元-Flyweight-模式" class="headerlink" title="享元(Flyweight)模式"></a>享元(<code>Flyweight</code>)模式</h4><ul><li>主要用于减少创建的对象数量，减少内存占用并提高性能，此模式尝试通过存储已存在的类似对象以重用，并在找不到所匹配的对象时创建新对象；</li></ul></li><li><h4 id="业务代理模式"><a href="#业务代理模式" class="headerlink" title="业务代理模式"></a>业务代理模式</h4><ul><li>常用于解耦表示层和业务层，用于减少层代码中的业务层代码的通信或远程查找功能，业务层中实体如下：<ul><li>客户端：表示层代码可以是<code>JSP</code>，<code>servlet</code>或<code>UI java</code>代码；</li><li>业务代理：为客户端实体提供对业务服务方法的访问的单入口点类；</li><li>查找服务：负责获得相关业务的实施和提供业务的委托对象业务对性爱难过的访问；</li><li>业务服务：具体类实现这个业务服务以提供实际的业务实现逻辑；</li></ul></li></ul></li></ul><h2 id="行为设计模式"><a href="#行为设计模式" class="headerlink" title="行为设计模式"></a>行为设计模式</h2><ul><li><h4 id="责任链模式"><a href="#责任链模式" class="headerlink" title="责任链模式"></a>责任链模式</h4><ul><li>为请求创建一系列接收者对象，将发送方与接收方分离，每个接收器中都包含着对另一个接收器的引用，若有一个对象不能处理请求，则将相同对象传递给下一个接收者；</li></ul></li><li><h4 id="命令模式"><a href="#命令模式" class="headerlink" title="命令模式"></a>命令模式</h4><ul><li>数据驱动设计模式，请求作为命令包装在一个对象下，并传递给调用器对象，调用者对象查找可以处理此命令的适当对象，并将命令传递到执行命令的相应对象；</li></ul></li><li><h4 id="解释器模式"><a href="#解释器模式" class="headerlink" title="解释器模式"></a>解释器模式</h4><ul><li>提供了一种评估计算语法或表达式的方法，设计实现一个表达式接口，用于解释一个指定的上下文，常用于SQL解析，符号处理引擎等；</li></ul></li><li><h4 id="迭代器模式"><a href="#迭代器模式" class="headerlink" title="迭代器模式"></a>迭代器模式</h4><ul><li>用于以顺序方式访问集合对象的元素，且不需知道其底层表示；</li></ul></li><li><h4 id="调解者-Mediator-模式"><a href="#调解者-Mediator-模式" class="headerlink" title="调解者(Mediator)模式"></a>调解者(<code>Mediator</code>)模式</h4><ul><li>用于减少多个对象或类之间的通信复杂性，提供一个中介类，用于处理不同类之间的所有通信，并支持通过松散耦合来维护代码；</li></ul></li><li><h4 id="备忘录模式"><a href="#备忘录模式" class="headerlink" title="备忘录模式"></a>备忘录模式</h4><ul><li>用于恢复一个对象以前的状态；</li></ul></li><li><h4 id="观察者模式"><a href="#观察者模式" class="headerlink" title="观察者模式"></a>观察者模式</h4><ul><li>在对象之间存在一对多关系时使用；</li></ul></li><li><h4 id="状态模式"><a href="#状态模式" class="headerlink" title="状态模式"></a>状态模式</h4><ul><li>类根据其状态改变而变，在这个模式中，我们创建表示各种状态的对象，以及随对象状态变化而行为变化的上下文对象；     </li></ul></li><li><h4 id="策略模式"><a href="#策略模式" class="headerlink" title="策略模式"></a>策略模式</h4><ul><li>此模式中，可在运行时更改类行为或其算法，创建表示各种策略对象和其行为根据其策略对象而变化的上下文对象；</li></ul></li><li><h4 id="模版模式"><a href="#模版模式" class="headerlink" title="模版模式"></a>模版模式</h4><ul><li>抽象类中公开了定义的方法/模版来执行它的方法，其子类可以根据需要重写方法实现，但调用方式与抽象类定义的方式相同；</li></ul></li><li><h4 id="访问者模式"><a href="#访问者模式" class="headerlink" title="访问者模式"></a>访问者模式</h4><ul><li>使用访问者类来改变元素类的执行算法，通过此方式，元素执行算法可随访问者变化而变化，根据每个模式，元素对象必须接受访问者对象，以便访问者对象处理对元素对元素对象的操作；</li></ul></li><li><h4 id="空对象模式"><a href="#空对象模式" class="headerlink" title="空对象模式"></a>空对象模式</h4><ul><li>在这个模式中，空对象将替换<code>NULL</code>对象实例的检查，而非检查一个空值，<code>NULL</code>对象反映一个无关的关系，还可以用于在数据不可用时提供默认行为，空对象模式创建一个抽象类，指定要执行的各种操作，扩展此类的具体类和一个<code>NULL</code>对象类，不提供此类的任何实现，且无需检查空值；</li></ul></li><li><h4 id="MVC模式"><a href="#MVC模式" class="headerlink" title="MVC模式"></a>MVC模式</h4><ul><li>模型：表示携带数据对象或<code>JAVA POJO</code>，若其数据改变也可以具有逻辑来更新控制器；</li><li>视图：表示模型包含的数据的可视化层；</li><li>控制器：对模型和视图都起作用，控制数据流进入模型对象，并在数据更改时更新视图，保持视图与模型分开，也就是处于视图与模型的中间层；</li></ul></li><li><h4 id="组合实体模式"><a href="#组合实体模式" class="headerlink" title="组合实体模式"></a>组合实体模式</h4><ul><li>用于<code>EJB</code>持久化机制，表示对象图的<code>EJB</code>实体<code>bean</code>，组合实体更新时，内部依赖对象<code>bean</code>将自动更新为有EJB实体bean管理，<code>Bean</code>参与者为：<ul><li>组合实体：主要的实体<code>bean</code>，可以是粗粒度的或可以包含用于持久性目的的粗粒度对象；</li><li>粗粒实体：包含依赖对象，有自己的生命周期；</li><li>依赖对象：是一个对象，取决于其持久度生命周期粗粒对象；</li><li>策略：表示如何实现复组合实体；</li></ul></li></ul></li><li><h4 id="数据访问对象模式"><a href="#数据访问对象模式" class="headerlink" title="数据访问对象模式"></a>数据访问对象模式</h4><ul><li>用于将低级数据访问<code>API</code>或操作与高级业务服务分离，模式的参与者为：<ul><li>数据访问对象接口：定义要对模型对象执行的标准操作；</li><li>数据访问对象具体类：负责从数据源获取数据，数据源可以是数据库/<code>xml</code>或任何其他存储机制；</li><li>模型对象或值对象：简单的<code>POJO</code>，包含用于存储使用<code>DAO</code>类检索的<code>get/set</code>方法；</li></ul></li></ul></li><li><h4 id="前端控制器模式"><a href="#前端控制器模式" class="headerlink" title="前端控制器模式"></a>前端控制器模式</h4><ul><li>用于提供集中式请求处理机制，以便所有请求由单个处理程序处理，可以执行请求的身份验证、授权、记录或跟踪，然后将请求传递到相应处理程序，包含的实体为：<ul><li>前端控制器：用于处理应用程序(基于Web或桌面)的各种请求的单个处理程序；</li><li>分发器：前端控制器可以使用将请求分派到相应的特定处理器的分派器对象；</li><li>视图：进行请求的对象；</li></ul></li></ul></li><li><h4 id="拦截过滤器模式"><a href="#拦截过滤器模式" class="headerlink" title="拦截过滤器模式"></a>拦截过滤器模式</h4><ul><li>过滤器：请求处理程序执行前或后执行某些任务的过滤器；</li><li>过滤器链：携带多个过滤器，并帮助在目标上以定义的顺序执行；</li><li>目标：请求处理程序；</li><li>过滤器管理器：管理过滤器和过滤器链；</li><li>客户端：向目标对象发送请求的对象；</li></ul></li><li><h4 id="服务定位模式"><a href="#服务定位模式" class="headerlink" title="服务定位模式"></a>服务定位模式</h4><ul><li>服务：将处理请求的实际服务，将在<code>JNDI</code>服务器中查找此类服务的引用；</li><li>上下文/初始上下文：<code>JNDI</code>上下文携带对用于查找目的的服务的引用；</li><li>服务定位器：通过<code>JNDI</code>查找缓存服务获得服务的单一联系点；</li><li>缓存：用于存储服务的引用以重用他们的缓存；</li><li>客户端：通过<code>ServiceLocator</code>调用服务的对象；</li></ul></li><li><h4 id="传输对象模式"><a href="#传输对象模式" class="headerlink" title="传输对象模式"></a>传输对象模式</h4><ul><li>业务对象：业务服务使用数据填充传输对象；</li><li>传输对象：具有仅设置/获取属性的方法的简单<code>POJO</code>；</li><li>客户端：请求或发送传输对象到业务对象；</li></ul></li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 编程语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java中的四大变量解析</title>
      <link href="/2019/10/02/java-zhong-de-si-da-bian-liang-jie-xi/"/>
      <url>/2019/10/02/java-zhong-de-si-da-bian-liang-jie-xi/</url>
      
        <content type="html"><![CDATA[<h2 id="导读"><a href="#导读" class="headerlink" title="导读"></a>导读</h2><p>学习Java的过程中，一开始很容易被这些各种变量绕晕，这篇博客主要介绍了这几种变量之间的关系和区别。</p><h2 id="例程"><a href="#例程" class="headerlink" title="例程"></a>例程</h2><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>cunyu<span class="token punctuation">.</span>demo<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//成员变量、实例变量</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//成员变量、实例变量</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> ID<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//成员变量、实例变量</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String school <span class="token operator">=</span> <span class="token string">"卡塞尔学院"</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//成员变量、静态变量(类变量)</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> String level <span class="token operator">=</span> <span class="token string">"SSS"</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//成员变量、静态变量(类变量)</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> age<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> ID<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setAge</span><span class="token punctuation">(</span><span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setId</span><span class="token punctuation">(</span><span class="token keyword">int</span> ID<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>ID <span class="token operator">=</span> ID<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">study</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            String subject1 <span class="token operator">=</span> <span class="token string">"屠龙"</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//局部变量</span>            String subject2 <span class="token operator">=</span> <span class="token string">"炼金术"</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//局部变量</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"学习科目： "</span> <span class="token operator">+</span> subject1 <span class="token operator">+</span> <span class="token string">"、"</span> <span class="token operator">+</span> subject2<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Demo demo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Demo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        demo<span class="token punctuation">.</span><span class="token function">setAge</span><span class="token punctuation">(</span><span class="token number">23</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        demo<span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span><span class="token number">14000001</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        demo<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"楚子航"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"ID: "</span> <span class="token operator">+</span> demo<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"Age: "</span> <span class="token operator">+</span> demo<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"Name: "</span> <span class="token operator">+</span> demo<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"主修科目： "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        demo<span class="token punctuation">.</span><span class="token function">study</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"学院："</span> <span class="token operator">+</span> Demo<span class="token punctuation">.</span>school<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"等级："</span> <span class="token operator">+</span> Demo<span class="token punctuation">.</span>level<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="各变量联系与区别"><a href="#各变量联系与区别" class="headerlink" title="各变量联系与区别"></a>各变量联系与区别</h2><ul><li><p>成员变量：作用范围是整个类，相当于C中的全局变量，定义在方法体和语句块之外，一般定义在类的声明之下；成员变量包括实例变量和静态变量(类变量)；</p></li><li><p>实例变量：独立于与方法之外的变量，无static修饰，声明在一个类中，但在方法、构造方法和语句块之外，数值型变量默认值为0，布尔型默认值为false，引用类型默认值为null；</p></li><li><p>静态变量(类变量)：独立于方法之外的变量，用static修饰，默认值与实例变量相似，一个类中只有一份，属于对象共有，存储在静态存储区，经常被声明为常量，调用一般是类名.静态变量名，也可以用对象名.静态变量名调用；</p></li><li><p>局部变量：类的方法中的变量，访问修饰符不能用于局部变量，声明在方法、构造方法或语句块中，在栈上分配，无默认值，必须经初始化；</p></li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 编程语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>常用IDE代码开头模板</title>
      <link href="/2019/10/02/chang-yong-ide-dai-ma-kai-tou-mo-ban/"/>
      <url>/2019/10/02/chang-yong-ide-dai-ma-kai-tou-mo-ban/</url>
      
        <content type="html"><![CDATA[<h1 id="Pycharm"><a href="#Pycharm" class="headerlink" title="Pycharm"></a>Pycharm</h1><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/env python</span><span class="token comment" spellcheck="true"># -*- coding: utf-8 -*-</span><span class="token comment" spellcheck="true"># @version : 1.0</span><span class="token comment" spellcheck="true"># @Time    : ${DATE} ${TIME}</span><span class="token comment" spellcheck="true"># @Author  : cunyu</span><span class="token comment" spellcheck="true"># @Email   : cunyu1024@foxmail.com</span><span class="token comment" spellcheck="true"># @Site    : https://cunyu1943.github.io</span><span class="token comment" spellcheck="true"># @File    : ${NAME}.py</span><span class="token comment" spellcheck="true"># @Software: ${PRODUCT_NAME}</span><span class="token comment" spellcheck="true"># @Desc    :</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="IntelliJ-IDEA"><a href="#IntelliJ-IDEA" class="headerlink" title="IntelliJ IDEA"></a>IntelliJ IDEA</h1><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * Created with IntelliJ IDEA. * Version : 1.0 * Author  : cunyu * Email   : cunyu1024@foxmail.com * Website : https://cunyu1943.github.io  * Date    : ${DATE} ${TIME} * Project : ${PROJECT_NAME} * Package : ${PACKAGE_NAME} * Class   : ${CLASS_NAME} * Desc    :  */</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="Visual-Studio"><a href="#Visual-Studio" class="headerlink" title="Visual Studio"></a>Visual Studio</h1><pre class="line-numbers language-c++"><code class="language-c++">/************************************************************************  * 项目名称 :  $rootnamespace$    * 类 名 称 :  $safeitemrootname$  * 版 本 号 :  1.0         * 作    者 :  cunyu * 邮    箱 :  cunyu1024@foxmail.com * 网    站 :  https://cunyu1943.github.io * 创建时间 :  $time$ * 项目描述 :      ************************************************************************/  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="Vim"><a href="#Vim" class="headerlink" title="Vim"></a>Vim</h1><pre><code>set autoindent                  " 按下回车后，下一行缩进格式与上一行保持一直set tabstop=4                   " 设置Tab键显示的空格数set spell spelllang=en_us       "英语单词拼写检查set number                      " 设置行号set nocompatible                " 设置是否与Vi兼容syntax on                       " 语法高亮set showmode                    " 显示当前属于命令模式还是插入模式set encoding=utf-8              " 设置utf-8编码set t_Co=256                    " 启用256色filetype indent on              " 文件类型检查set noerrorbells                "出错时不要发出响声警告set mouse=a                     " 支持鼠标</code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 计算机知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Pycharm </tag>
            
            <tag> IntelliJ IDEA </tag>
            
            <tag> Visual Studio </tag>
            
            <tag> Vim </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>XMind使用入门教程</title>
      <link href="/2019/10/02/xmind-shi-yong-ru-men-jiao-cheng/"/>
      <url>/2019/10/02/xmind-shi-yong-ru-men-jiao-cheng/</url>
      
        <content type="html"><![CDATA[<h1 id="什么是思维导图"><a href="#什么是思维导图" class="headerlink" title="什么是思维导图"></a>什么是思维导图</h1><p>借用百度百科的介绍，思维导图又称脑图、心智导图。是一种将思维形象化的方法，它利用图文并重的方法，将各级主题之间的关系用相互隶属与相关的层级图表现出来，将主题关键词与图像、颜色等建立记忆连接，从而使人们能够充分利用左右脑的机能。总结来说，思维导图就是以层次感的方式展示我们想法的图像式思考辅助工具。</p><h1 id="思维导图的优点"><a href="#思维导图的优点" class="headerlink" title="思维导图的优点"></a>思维导图的优点</h1><p><img src="https://upload-images.jianshu.io/upload_images/9747350-13d35573dd8cdd72.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/620" alt=""></p><h1 id="XMind"><a href="#XMind" class="headerlink" title="XMind"></a>XMind</h1><p>XMind专业版是需要付费的，但是基础版的也可以使用，只是较之专业版的有的功能受限，但满足日常使用需求已经足以。<a href="https://www.xmind.cn/download/win/" target="_blank" rel="noopener">下载地址</a>；</p><p><img src="https://upload-images.jianshu.io/upload_images/9747350-50df2f974ae870db.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/620" alt=""></p><h1 id="XMind快捷键"><a href="#XMind快捷键" class="headerlink" title="XMind快捷键"></a>XMind快捷键</h1><p><img src="https://upload-images.jianshu.io/upload_images/9747350-8ea91ba973cea05c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/620" alt=""></p><h1 id="使用技巧"><a href="#使用技巧" class="headerlink" title="使用技巧"></a>使用技巧</h1><ul><li><p>修改节点中的内容；<br><img src="https://upload-images.jianshu.io/upload_images/9747350-3dc9270f213d08db.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/620" alt=""></p></li><li><p>创建同级节点和子节点；<br><img src="https://upload-images.jianshu.io/upload_images/9747350-70765e0ac61bd614.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/620" alt=""></p></li><li><p>添加优先等级图标；<br><img src="https://upload-images.jianshu.io/upload_images/9747350-30dde6317ffa6417.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/620" alt=""></p></li><li><p>更改思维导图样式；<br><img src="https://upload-images.jianshu.io/upload_images/9747350-4094f2b476273c87.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/620" alt=""></p></li></ul><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>XMind是一款十分有助于效率提高的工具，也很容易上手操作，绝对是学习生活中的一大利器。如果你对自己的学习工作效率不是十分满意，那么XMind绝对值得一试哦！！！<br>以下附上几张XMind官方给出的模版：</p><p><img src="https://upload-images.jianshu.io/upload_images/9747350-85a527c0aa1c3995.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/620" alt=""></p><p><img src="https://upload-images.jianshu.io/upload_images/9747350-3973bf4ef2004041.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/620" alt=""></p><p><img src="https://upload-images.jianshu.io/upload_images/9747350-5f8caf160bec24f6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/620" alt=""></p><p><img src="https://upload-images.jianshu.io/upload_images/9747350-2313556507b99455.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/620" alt=""></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> tools </category>
          
      </categories>
      
      
        <tags>
            
            <tag> XMind </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mysql-8.0.13压缩版安装之Windows10篇</title>
      <link href="/2019/10/02/mysql-8-0-13-ya-suo-ban-an-zhuang-zhi-windows10-pian/"/>
      <url>/2019/10/02/mysql-8-0-13-ya-suo-ban-an-zhuang-zhi-windows10-pian/</url>
      
        <content type="html"><![CDATA[<h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><ul><li>系统环境：Windows 10 1803版本；</li><li>压缩包：MySQL-8.0.13 Windows zip包<a href="https://cdn.mysql.com//Downloads/MySQL-8.0/mysql-8.0.13-winx64.zip" target="_blank" rel="noopener">下载</a>；</li></ul><h2 id="安装过程"><a href="#安装过程" class="headerlink" title="安装过程"></a>安装过程</h2><h4 id="1-加载安装包到你的安装目录"><a href="#1-加载安装包到你的安装目录" class="headerlink" title="1. 加载安装包到你的安装目录"></a>1. 加载安装包到你的安装目录</h4><p>将下载的MySQL压缩包解压并移到你所要安装的路径，下面以我的安装路径<code>D:\Program Files\mysql-8.0.13-winx64</code>为例；</p><h4 id="2-配置文件"><a href="#2-配置文件" class="headerlink" title="2.  配置文件"></a>2.  配置文件</h4><p>在上述目录下新建<code>my.ini</code>文件，然后在文件中加入以下配置：在上述目录下新建<code>my.ini</code>文件，然后在文件中加入以下配置：</p><pre class="line-numbers language-shell"><code class="language-shell">[mysqld]# 设置3306端口port=3306# 设置mysql的安装目录basedir=D:\Program Files\mysql-8.0.13-winx64# 设置mysql数据库的数据的存放目录datadir=D:\Program Files\mysql-8.0.13-winx64\data# 允许最大连接数max_connections=200# 允许连接失败的次数max_connect_errors=10# 服务端使用的字符集默认为utf8character-set-server=utf8#使用–skip-external-locking MySQL选项以避免外部锁定。该选项默认开启external-locking = FALSE# 创建新表时将使用的默认存储引擎default-storage-engine=INNODB # 默认使用“mysql_native_password”插件认证default_authentication_plugin=mysql_native_password[mysqld_safe]log-error=D:\Program Files\mysql-8.0.13-winx64\mysql_oldboy.errpid-file=D:\Program Files\mysql-8.0.13-winx64\mysqld.pid# 定义mysql应该支持的sql语法，数据校验sql_mode=NO_ENGINE_SUBSTITUTION,STRICT_TRANS_TABLES[mysql]# 设置mysql客户端默认字符集default-character-set=utf8[client]# 设置mysql客户端连接服务端时默认使用的端口port=3306# 设置mysql客户端默认字符集default-character-set=utf8<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-配置环境变量"><a href="#3-配置环境变量" class="headerlink" title="3. 配置环境变量"></a>3. 配置环境变量</h4><ul><li><p>打开控制面板-&gt;系统与安全-&gt;系统，进入高级系统设置，如下图所示；<br><img src="http://upload-images.jianshu.io/upload_images/9747350-e5eb79a0ed36843b?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p></li><li><p>然后进行环境变量的设置，如下图；</p></li></ul><p><img src="http://upload-images.jianshu.io/upload_images/9747350-7e1751a1f568266b?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"><br><img src="http://upload-images.jianshu.io/upload_images/9747350-c1cc60337028b17d?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"><br><img src="http://upload-images.jianshu.io/upload_images/9747350-7225cdc7ee9ef783?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><h4 id="4-初始化"><a href="#4-初始化" class="headerlink" title="4. 初始化"></a>4. 初始化</h4><p>控制台进入MySQL解压后的路径，然后以管理员身份执行如下命令；</p><pre class="line-numbers language-shell"><code class="language-shell">mysqld --initialize --console<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>注意</strong>：执行成功后会打印出初始的root用户密码，一定要记住！！！方便后边修改密码；<br><img src="http://upload-images.jianshu.io/upload_images/9747350-033f2e6de448ef2c?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><h4 id="5-安装数据库服务"><a href="#5-安装数据库服务" class="headerlink" title="5. 安装数据库服务"></a>5. 安装数据库服务</h4><p>接上一步初始化数据库后，继续执行如下命令；</p><pre class="line-numbers language-shell"><code class="language-shell">mysqld --install<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>因为博主已经安装过了，所以会提示服务已存在，若是第一次安装，则不会提示已安装；<br><img src="http://upload-images.jianshu.io/upload_images/9747350-6bfbcb57c014d944?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><h4 id="6-启动与关闭MySQL数据库服务"><a href="#6-启动与关闭MySQL数据库服务" class="headerlink" title="6. 启动与关闭MySQL数据库服务"></a>6. 启动与关闭MySQL数据库服务</h4><pre class="line-numbers language-shell"><code class="language-shell"># 开启net start mysql# 关闭net stop mysql<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="7-修改初始root用户密码"><a href="#7-修改初始root用户密码" class="headerlink" title="7. 修改初始root用户密码"></a>7. 修改初始root用户密码</h4><p>先用刚才记住的初始root用户密码登陆，然后进行密码更改，命令如下；</p><pre class="line-numbers language-shell"><code class="language-shell"># 登陆mysql -u root -p # 然后提示你输入密码，输入上边初始化时默认给的初始化密码，进行登陆# 密码修改alter user 'root'@'localhost' identified by '新密码';# 修改密码<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="http://upload-images.jianshu.io/upload_images/9747350-b3fbdeddb8aa4329?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><h5 id="8-创建普通用户并设置密码"><a href="#8-创建普通用户并设置密码" class="headerlink" title="8. 创建普通用户并设置密码"></a>8. 创建普通用户并设置密码</h5><p>登入root用户后，创建新的用户并指定密码密码如下；</p><pre class="line-numbers language-shell"><code class="language-shell">CREATE USER 'userName'@'localhost' IDENTIFIED BY 'password';<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后退出root用户登陆，尝试用你所创建的新用户进行登陆，登陆成功的提示如下；<br><img src="http://upload-images.jianshu.io/upload_images/9747350-eca60838194ccc4e?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>好了，通过上面的流程，是不是知道了如何在Windows 10系统下安装最新的压缩包版MySQL-8.0.13呢，而且文中也对如何修改root用户的默认密码以及如何创建新用户给出了解决方案，是不是简单，那就亲自动手试试吧；</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> tools </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
            <tag> Windows </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>不同情况下修改MySql的root用户密码对应的方法</title>
      <link href="/2019/10/02/bu-tong-qing-kuang-xia-xiu-gai-mysql-de-root-yong-hu-mi-ma-dui-ying-de-fang-fa/"/>
      <url>/2019/10/02/bu-tong-qing-kuang-xia-xiu-gai-mysql-de-root-yong-hu-mi-ma-dui-ying-de-fang-fa/</url>
      
        <content type="html"><![CDATA[<h2 id="在我们使用MySQL时，常常会因为不同的原因需要对root用户密码进行修改，这篇博客主要介绍了以下三种情况下修改root用户密码的方式。"><a href="#在我们使用MySQL时，常常会因为不同的原因需要对root用户密码进行修改，这篇博客主要介绍了以下三种情况下修改root用户密码的方式。" class="headerlink" title="在我们使用MySQL时，常常会因为不同的原因需要对root用户密码进行修改，这篇博客主要介绍了以下三种情况下修改root用户密码的方式。"></a>在我们使用MySQL时，常常会因为不同的原因需要对root用户密码进行修改，这篇博客主要介绍了以下三种情况下修改root用户密码的方式。</h2><h3 id="未设置root密码之前："><a href="#未设置root密码之前：" class="headerlink" title="未设置root密码之前："></a>未设置root密码之前：</h3><ul><li>SET PASSWORD命令的方式：<pre><code>mysql -u rootmysql&gt;SET PASSWORD FOR 'root'@'localhost' = PASSWORD('你要设置的密码');</code></pre></li><li>mysqladmin命令的方式：<pre><code>mysqladmin -u root password "你要设置的密码"</code></pre></li><li>UPDATE的方式直接编辑user表：<pre><code>mysql -u rootmysql&gt; USE mysql;mysql&gt; UPDATE user SET Password = PASSWORD('你要设置的密码') WHERE user = 'root';mysql&gt; FLUSH PRIVILEGES;</code></pre></li></ul><h3 id="设置过root之后："><a href="#设置过root之后：" class="headerlink" title="设置过root之后："></a>设置过root之后：</h3><ul><li>mysqladmin的方式：<pre><code>mysqladmin -u root password oldpass "你要设置的新密码"</code></pre></li></ul><h3 id="设置过root密码，但是忘记了："><a href="#设置过root密码，但是忘记了：" class="headerlink" title="设置过root密码，但是忘记了："></a>设置过root密码，但是忘记了：</h3><pre><code>mysqld_safe --skip-grant-tables&amp;mysql -u root mysqlmysql&gt; UPDATE user SET password = PASSWORD("你要设置的新密码") WHERE user = 'root' ;mysql&gt; FLUSH PRIVILEGES;</code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 计算机知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Socket在Server和Client间通信的工作原理</title>
      <link href="/2019/09/30/socket-zai-server-he-client-jian-tong-xin-de-gong-zuo-yuan-li/"/>
      <url>/2019/09/30/socket-zai-server-he-client-jian-tong-xin-de-gong-zuo-yuan-li/</url>
      
        <content type="html"><![CDATA[<h4 id="Socket之间的连接过程主要可以概括为以下三步："><a href="#Socket之间的连接过程主要可以概括为以下三步：" class="headerlink" title="Socket之间的连接过程主要可以概括为以下三步："></a>Socket之间的连接过程主要可以概括为以下三步：</h4><ol><li><p><strong>服务器建立监听</strong>：客户端初始化Socket动态库后创建套接字，然后指定客户端Socket的地址，循环绑定Socket直至成功，然后开始建立监听，此时客户端处于等待状态，实时监控网络状态；</p></li><li><p><strong>客户端提出请求</strong>：客户端的Socket向服务器端提出连接请求，此时客户端描述出它所要连接的Socket，指出要连接的Socket的相关属性，然后向服务器端Socket提出请求；</p></li><li><p><strong>连接确认并建立</strong>：当服务器端套接字监听到来自客户端的连接请求之后，立即响应请求并建立一个新进程，然后将服务器端的套接字的描述反馈给客户端，由客户端确认之后连接就建立成功，然后客户端和服务器两端之间可以相互通信，传输数据，此时服务器端的套接字继续等待监听来自其他客户端的请求；</p></li></ol><p><img src="http://upload-images.jianshu.io/upload_images/9747350-928b4a5b6d4526d4?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="server和client之间的基本工作原理流程图"></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 计算机知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Socket </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C语言中的内存管理函数</title>
      <link href="/2019/09/30/c-yu-yan-zhong-de-nei-cun-guan-li-han-shu/"/>
      <url>/2019/09/30/c-yu-yan-zhong-de-nei-cun-guan-li-han-shu/</url>
      
        <content type="html"><![CDATA[<h3 id="malloc函数"><a href="#malloc函数" class="headerlink" title="malloc函数"></a>malloc函数</h3><ul><li>原型：extern void* malloc(unsigned int size)；</li><li>功能：动态分配内存；</li><li>注意：size仅仅为申请内存字节大小，与申请内存块中存储的数据类型无关，故编程时需要通过以下方式给出：”长度 * sizeof(数据类型)”；</li></ul><ul><li>示例：</li></ul><pre class="line-numbers language-c"><code class="language-c"><span class="token comment" spellcheck="true">//动态分配内存，输入5个数据，并把低于60的值打印出来</span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> <span class="token operator">*</span>ptr <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">5</span> <span class="token operator">*</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//分配内存</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token function">scanf_s</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>ptr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//输入数据</span>        <span class="token punctuation">}</span>    <span class="token keyword">int</span> min <span class="token operator">=</span> <span class="token number">60</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>min <span class="token operator">></span> <span class="token operator">*</span><span class="token punctuation">(</span>ptr <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%5d"</span><span class="token punctuation">,</span> <span class="token operator">*</span><span class="token punctuation">(</span>ptr <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//打印出低于60的值</span>    <span class="token punctuation">}</span>    <span class="token function">free</span><span class="token punctuation">(</span>ptr<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="free函数"><a href="#free函数" class="headerlink" title="free函数"></a>free函数</h3><ul><li>原型：void free(void * ptr)；</li><li>功能：搭配malloc()函数，释放malloc函数申请的动态内存；</li><li>注意：对于free(ptr)，若ptr为NULL，则可进行多次释放，若ptr是非空指针，则free对ptr只能进行一次操作，否则程序将崩溃；</li><li>示例：见malloc函数；</li><li>结果：见malloc函数；</li></ul><h3 id="realloc函数"><a href="#realloc函数" class="headerlink" title="realloc函数"></a>realloc函数</h3><ul><li><p>原型： void* realloc(void * ptr,unsigned int size)；</p></li><li><p>功能：先判断当前指针是否有足够的连续空间，若足够，扩大ptr指向的地址并返回，若不够，怎按size指定的大小分配空间，将原数据copy到新分配的内存中，然后释放原ptr所指向区域；</p></li><li><p>注意：内存使用完毕后，应使用free()函数释放，但原来的指针是自动释放，不需要使用free；</p></li><li><p>示例：</p></li></ul><pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>   <span class="token keyword">char</span> <span class="token operator">*</span>str<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* 一开始的内存分配 */</span>    str <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">15</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">strcpy</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span> <span class="token string">"Hello World!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"String = %s\n"</span><span class="token punctuation">,</span> str<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* 重新分配内存 */</span>    str <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">realloc</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">strcat</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span> <span class="token string">", C"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"String = %s\n"</span><span class="token punctuation">,</span> str<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">free</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="calloc函数"><a href="#calloc函数" class="headerlink" title="calloc函数"></a>calloc函数</h3><ul><li>原型：void* calloc（unsigned int num，unsigned int size）；</li><li>功能：为已经分配的内存重新分配空间并复制内容；</li><li>注意：num：对象个数，size：对象占据的内存字节数，相较于malloc函数，calloc函数会自动将内存初始化为0；</li></ul><ul><li>示例：</li></ul><pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> num<span class="token punctuation">;</span>    <span class="token keyword">int</span> i<span class="token punctuation">;</span>    <span class="token keyword">int</span> <span class="token operator">*</span>ptr<span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"元素个数为："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>    ptr <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">calloc</span><span class="token punctuation">(</span>num<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"输入 %d 个数字：\n"</span><span class="token punctuation">,</span> num<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> num<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>ptr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"输入的数字为："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> num<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d "</span><span class="token punctuation">,</span> ptr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 编程语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C/C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>程序员常用编辑器推荐</title>
      <link href="/2019/09/30/cheng-xu-yuan-chang-yong-bian-ji-qi-tui-jian/"/>
      <url>/2019/09/30/cheng-xu-yuan-chang-yong-bian-ji-qi-tui-jian/</url>
      
        <content type="html"><![CDATA[<p>对于一个程序员而言，一款称手的代码编辑器是十分重要的。一款好的代码编辑器能够大大提高开发效率，节省开发时间。而且现在许多的代码编辑器功能十分强大，不仅仅只是编写代码、查看源文件，还可以查看txt文档，也支持Markdown格式的写作等等。下面就简要的介绍几款的代码编辑器，</p><h3 id="Vim"><a href="#Vim" class="headerlink" title="Vim"></a>Vim</h3><ul><li>官网下载地址：<a href="https://www.vim.org/" target="_blank" rel="noopener">https://www.vim.org/</a></li><li>Github下载地址：<a href="https://github.com/vim/vim/releases" target="_blank" rel="noopener">https://github.com/vim/vim/releases</a></li><li>使用教程：<a href="https://www.runoob.com/linux/linux-vim.html" target="_blank" rel="noopener">https://www.runoob.com/linux/linux-vim.html</a></li></ul><h3 id="EditPlus"><a href="#EditPlus" class="headerlink" title="EditPlus"></a>EditPlus</h3><ul><li>官网下载地址：<a href="https://www.editplus.com/" target="_blank" rel="noopener">https://www.editplus.com/</a></li><li>中文破解版：<a href="http://www.pc6.com/softview/SoftView_36775.html" target="_blank" rel="noopener">http://www.pc6.com/softview/SoftView_36775.html</a></li></ul><h3 id="UltraEdit"><a href="#UltraEdit" class="headerlink" title="UltraEdit"></a>UltraEdit</h3><ul><li>官网下载地址：<a href="https://www.ultraedit.com/" target="_blank" rel="noopener">https://www.ultraedit.com/</a></li><li>中文官网下载地址：<a href="http://www.ultraedit.cn/" target="_blank" rel="noopener">http://www.ultraedit.cn/</a></li></ul><h3 id="Sublime-Text"><a href="#Sublime-Text" class="headerlink" title="Sublime Text"></a>Sublime Text</h3><ul><li>官网下载地址：<a href="http://www.sublimetext.com/3" target="_blank" rel="noopener">http://www.sublimetext.com/3</a></li><li>中文版下载地址：<a href="http://sublimetextcn.com/" target="_blank" rel="noopener">http://sublimetextcn.com/</a></li><li>优点：功能强大、性能优良、界面美观、多平台兼容；</li><li>缺点：收费，不过收费也不是很贵，有条件的还是建议买个正版，省事又方便；</li></ul><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy85NzQ3MzUwLTY5MTdlYzk2MDgzMjI4YTMucG5n?x-oss-process=image/format,png" alt="图片来自百度"></p><h3 id="Notepad"><a href="#Notepad" class="headerlink" title="Notepad++"></a>Notepad++</h3><ul><li>官网下载地址：<a href="https://notepad-plus-plus.org/" target="_blank" rel="noopener">https://notepad-plus-plus.org/</a></li><li>优点：国人(台湾人侯金吾)开发，有完整的中文接口，并支持多国语言，免费开源，轻便；</li><li>缺点：目前只支持Windows平台；</li></ul><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy85NzQ3MzUwLWY4N2I5NDEyZGVjMTRhYjkucG5n?x-oss-process=image/format,png" alt="图片来自百度"></p><h3 id="Visual-Studio-Code"><a href="#Visual-Studio-Code" class="headerlink" title="Visual Studio Code"></a>Visual Studio Code</h3><ul><li>官网下载地址：<a href="https://code.visualstudio.com/" target="_blank" rel="noopener">https://code.visualstudio.com/</a></li><li>优点：作为宇宙最强IDE Visual Studio开发者微软旗下的一款产品，它的强大毋庸置疑，就不再赘述。而且最重要的一点，这款编辑器是完全开源免费的，也支持多平台；</li><li>缺点：相对来说，安装体积较大，比不上sublime、notepad等轻便；<br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy85NzQ3MzUwLWY3MDFjOWNkOTgyY2JiYmYucG5n?x-oss-process=image/format,png" alt=""></li></ul><h3 id="Atom"><a href="#Atom" class="headerlink" title="Atom"></a>Atom</h3><ul><li>官网下载地址：<a href="https://atom.io/" target="_blank" rel="noopener">https://atom.io/</a></li><li>优点：用户界面简洁直观，简单易用，上手很快，由全球最大同性交友平台github推出，完全免费开源，支持多平台，PS：还有各种意想不到的酷炫功能，自己去探索吧；</li><li>缺点：由于集成了许多功能，安装的时候相对臃肿，轻便性有待提高；</li></ul><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy85NzQ3MzUwLTkzN2ZhYmRmZDk4NWRhZDAucG5n?x-oss-process=image/format,png" alt="图片来自百度"></p><p>好了，以上就推荐了几款作为开发者最常用的几个代码编辑器。正所谓萝卜白菜，各有所爱，所以笔者也不能说哪一款是最好的。如果你更倾向于轻便，那Sublime Text和Notepad++或许是更好的选择。但如果你想要易上手之类的，Atom和VS Code也许会更适合你。当然了，Sublime Text和Notepad++也可以通过安装各种插件来使功能更加强大，这就需要你去折腾了。以上就是我的看法了，希望你看了这篇博客后能够选到最适合你的代码编辑器。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> tools </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vim </tag>
            
            <tag> Visual Studio Code </tag>
            
            <tag> Sublime Text </tag>
            
            <tag> Notepad++ </tag>
            
            <tag> Atom </tag>
            
            <tag> UltraEdit </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Markdown写作入门</title>
      <link href="/2019/09/30/markdown-xie-zuo-ru-men/"/>
      <url>/2019/09/30/markdown-xie-zuo-ru-men/</url>
      
        <content type="html"><![CDATA[<h3 id="什么是Markdown格式"><a href="#什么是Markdown格式" class="headerlink" title="什么是Markdown格式"></a>什么是Markdown格式</h3><p>Markdown格式是一种可用普通文本编辑器编写的标记语言，使用者能够通过简单的标记语法，对自己所写文本内容进行简单的格式排版；</p><h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h3><ul><li>语法简洁易学，且功能比纯文本强大；</li><li>格式转换方便，兼容性强，可读性极好；</li></ul><h3 id="写作格式"><a href="#写作格式" class="headerlink" title="写作格式"></a>写作格式</h3><h4 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h4><p>每多加一级则添加一个 # 号；<br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy85NzQ3MzUwLTI0OGM5ODA2ZmIyNGU4OTAucG5n" alt=""></p><h4 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h4><ul><li><p>有序列表<br>数字加上一个英文句点，空格后输入内容；<br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy85NzQ3MzUwLTFkMzRjNWU5ODcwMDU2YjEucG5n" alt=""></p></li><li><p>无序列表<br>-、+、*为无序列表标识；<br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy85NzQ3MzUwLWIzNmIxYWRjMzcxMTNmZWQucG5n" alt=""></p></li></ul><h4 id="加粗"><a href="#加粗" class="headerlink" title="加粗"></a>加粗</h4><p>两个连续 * 或者 _ 包含内容；<br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy85NzQ3MzUwLTJiMDFmYTdjODFmMWM1YjMucG5n" alt=""></p><h4 id="斜体"><a href="#斜体" class="headerlink" title="斜体"></a>斜体</h4><p>一个 * 或者 _ 包含内容；<br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy85NzQ3MzUwLTE5ZGI0ZjcwYTIwNGIyMTUucG5n" alt=""></p><h4 id="删除线"><a href="#删除线" class="headerlink" title="删除线"></a>删除线</h4><p>两个 ~~ 包含；<br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy85NzQ3MzUwLTE3M2M4NGM5NjZjMTAzMzYucG5n" alt=""></p><h4 id="标记文本"><a href="#标记文本" class="headerlink" title="标记文本"></a>标记文本</h4><p>两个<code>==</code>包含，格式如下；<br><code>==demo==</code></p><h4 id="上下标"><a href="#上下标" class="headerlink" title="上下标"></a>上下标</h4><ul><li>上标<br><code>^</code>包含，格式如下；<br><code>demo^demo^</code></li><li>下标<br><code>~</code>包含，格式如下；<br><code>demo~demo~</code></li></ul><h4 id="分割线"><a href="#分割线" class="headerlink" title="分割线"></a>分割线</h4><p>三个及以上的 *、_、- 用于建立分割线；<br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy85NzQ3MzUwLTcxM2M4ZDg3OWI0ODM5N2YucG5n" alt=""><br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy85NzQ3MzUwLWExYmY2MjRjYmQxOTU4YmIucG5n" alt=""><br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy85NzQ3MzUwLWU1N2U0YTI4ZmIxZjY1MWYucG5n" alt=""></p><h4 id="代码块"><a href="#代码块" class="headerlink" title="代码块"></a>代码块</h4><p>三个连续 ` 包含代码内容；<br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy85NzQ3MzUwLWQ4YTY4MjUzMzQ5MWNlMmQucG5n" alt=""></p><h4 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h4><p>单个 &gt; 标记区块引用；<br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy85NzQ3MzUwLTZmMWYxYTBjNzM3ZTliOTMucG5n" alt=""></p><h4 id="链接和图片"><a href="#链接和图片" class="headerlink" title="链接和图片"></a>链接和图片</h4><ul><li><code>[显示的文本](链接地址)；</code><br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy85NzQ3MzUwLTFkNzM3YzUwMTAzNmQzYTIucG5n" alt=""></li><li><code>[外链图片转存失败(img-XrVu45Zv-1563331849244)(图片链接地址)]；</code><br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy85NzQ3MzUwLWEzZWZjM2M2M2YxNTVkYzYucG5n" alt=""></li></ul><h4 id="上下角标"><a href="#上下角标" class="headerlink" title="上下角标"></a>上下角标</h4><h5 id="上角标"><a href="#上角标" class="headerlink" title="上角标"></a>上角标</h5><pre class="line-numbers language-text"><code class="language-text">1. <sup>内容</sup>2. ^<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h5 id="下角标"><a href="#下角标" class="headerlink" title="下角标"></a>下角标</h5><pre class="line-numbers language-text"><code class="language-text">1. <sub>内容</sub>2. _<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="数学公式"><a href="#数学公式" class="headerlink" title="数学公式"></a>数学公式</h4><ul><li><p>起始和结尾标志<br>数学公式以<code>$</code>开头和结尾，若公式要独占一行，则以<code>$$</code>开头和结尾；</p></li><li><p>符号上下标<br>上标：<code>^</code>，如$a^2$；<br>下标：<code>_</code>，如$a_2$；</p></li><li><p>分组<br>使用<code>{}</code>将具有相同等级的内容扩入其中，成组处理</p></li><li><p>括号</p><ul><li>小括号：<code>()</code>；</li><li>中括号：<code>[]</code>；</li><li>尖括号：<code>\langle，\rangle</code>；</li><li>大括号：使用<code>\left</code>或<code>\right</code>让符号大小与邻近的公式相适应，如<code>(\frac{x}{y})和\left(\frac{x}{y}\right)</code>的区别<br>$$(\frac{x}{y})$$<br>$$\left(\frac{x}{y}\right)$$</li></ul></li><li><p>求和、极限和积分</p><ul><li>求和：<code>\sum</code>；</li><li>极限：<code>\lim</code>；</li><li>积分：<code>\int</code>；</li></ul></li><li><p>分式与根式</p><ul><li>分式：<code>\frac{分子}{分母}</code>；</li><li>根式：<code>\sqrt{根次}{底数}</code>；</li></ul></li></ul><h3 id="编辑器推荐"><a href="#编辑器推荐" class="headerlink" title="编辑器推荐"></a>编辑器推荐</h3><ul><li><p>Typora<br>一款所见即所得的Markdown编辑器，支持跨平台，下载地址：<a href="https://www.typora.io/" target="_blank" rel="noopener">https://www.typora.io/</a>;</p></li><li><p>GitNote<br>一款基于git的支持Markdown格式的笔记应用，虽然界面比较简陋，但是支持直接链接到自己的github同步，还解决了Typora中上传到网上的图床问题，下载地址：<a href="https://www.gitnoteapp.com/；" target="_blank" rel="noopener">https://www.gitnoteapp.com/；</a></p></li><li><p>VScode<br>微软出品的VScode可谓功能齐全，当然也是可以用来写作Markdown格式的，关于介绍及下载见我的另一篇文章<a href="https://www.jianshu.com/p/94f312103f9d" target="_blank" rel="noopener">开发者编辑器推荐</a>;</p></li><li><p>Cmd Markdown<br>这是由作业部落出品的一款Markdown写作软件，既有网页版，也有离线版，最大的特点在于联网时可以实时保存到云，不用担心因为各种原因导致的数据丢失问题，具体见<a href="https://www.zybuluo.com/mdeditor" target="_blank" rel="noopener">Cmd Markdown介绍</a>，<a href="https://www.zybuluo.com/mdeditor" target="_blank" rel="noopener">下载地址</a>;<br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy85NzQ3MzUwLTc2NDExZGQ3ZDM5ODQ5OGEucG5n" alt=""></p></li></ul><h3 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h3><p>以上就是Markdown写作格式中最常用的语法，对于日常使用已经完全足够，至于更加高级的技巧，也可以在评论区贴出，大家一起交流学习！！！</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> tools </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Markdown </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>通过Xshell远程连接Ubuntu</title>
      <link href="/2019/09/30/tong-guo-xshell-lian-jie-ubuntu/"/>
      <url>/2019/09/30/tong-guo-xshell-lian-jie-ubuntu/</url>
      
        <content type="html"><![CDATA[<p>一般情况下，安装好的Ubuntu系统中默认是只安装了<code>openssh-client</code>，此时只能通过此系统连接访问其他系统，但不具有让其他系统访问的权限。在终端查看ssh进程，输入<code>ps -e|grep ssh</code>，如果有安装<code>openssh-client</code>只会出现<code>ssh -agent</code>，不会出现<code>sshd</code>(因为博主已经安装<code>openssh-server</code>，所以会出现<code>sshd</code>)。</p><p><img src="https://img-blog.csdn.net/20180801141631186?watermark/2/text/5p2R6ZuoMTk0Mw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/35" alt=""><br>此时要想开放本机SSH服务以便其他系统登陆访问，就必须安装<code>openssh-server</code>，安装过程如下：</p><ul><li>在终端中输入<code>sudo apt-get install openssh-server</code>，然后输入自己的<code>root</code>密码就可以了(因为博主已经安装过，所以提示的是升级)；</li></ul><p><img src="https://img-blog.csdn.net/20180801142429103?watermark/2/text/5p2R6ZuoMTk0Mw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/35" alt=""></p><ul><li>然后启动<code>ssh-server</code>服务即可，开启方式，当然这两种开启方式都是需要切换到<code>root</code>用户或者提供密码权限的；</li></ul><ol><li><p><code>service ssh start</code></p></li><li><p><code>/etc/init.d/ssh start</code></p></li></ol><p><img src="https://img-blog.csdn.net/20180801143049189?watermark/2/text/5p2R6ZuoMTk0Mw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/35" alt=""></p><ul><li>验证是否开启成功；</li></ul><p><img src="https://img-blog.csdn.net/20180801143318643?watermark/2/text/5p2R6ZuoMTk0Mw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/35" alt=""></p><ul><li>若再次查看<code>ssh</code>进程时，同时出现<code>sshd</code>、<code>ssh -agent</code>进程，则说明<code>openssh -service</code>已经安装成功；</li></ul><p><img src="https://img-blog.csdn.net/20180801143739776?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dpdGh1Yl8zOTY1NTAyOQ==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/35" alt=""></p><ul><li>此时便可通过XShell访问Ubuntu了，依次填入主机IP、用户名已经用户密码便可成功连接到Ubuntu；</li></ul><p><img src="https://img-blog.csdn.net/20180801144354326?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dpdGh1Yl8zOTY1NTAyOQ==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/35" alt=""></p><p><img src="https://img-blog.csdn.net/2018080114453685?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dpdGh1Yl8zOTY1NTAyOQ==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt=""></p><p><img src="https://img-blog.csdn.net/20180801143846201?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dpdGh1Yl8zOTY1NTAyOQ==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/35" alt=""></p><p><img src="https://img-blog.csdn.net/20180801144107643?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dpdGh1Yl8zOTY1NTAyOQ==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/35" alt=""></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> tools </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Ubuntu </tag>
            
            <tag> Xshell </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git使用学习笔记</title>
      <link href="/2019/09/30/git-shi-yong-xue-xi-bi-ji/"/>
      <url>/2019/09/30/git-shi-yong-xue-xi-bi-ji/</url>
      
        <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><ul><li><p>定义<br>  Git，最先进的分布式版本控制系统之一，最初是由Linux之父Linus为了更好管理开源Linux系统而开发的一个软件；</p></li><li><p>下载：<a href="https://git-scm.com/downloads" target="_blank" rel="noopener">https://git-scm.com/downloads</a></p></li><li><p>安装</p><ul><li>Linux：<code>sudo apt-get install git</code></li><li>Windows、macOS通过官网下载安装包后进行安装即可；</li></ul></li><li><p>设置</p><p>  安装完成后，需要进行以下设置：</p><pre><code>$ git config --global user.name "user name"$ git config --global user.email "example@email.com"# 可选，让Git命令行显示颜色$ git config --global color.ui true</code></pre></li></ul><hr><h1 id="版本库创建及管理"><a href="#版本库创建及管理" class="headerlink" title="版本库创建及管理"></a>版本库创建及管理</h1><ul><li>如何创建版本库</li></ul><ol><li>先创建一个空文件夹，Windows下不再介绍，Linux以及macOS下可通过<code>$ mkdir gitlearn</code>命令创建；</li><li>通过<code>$ git init</code>将刚才创建的目录变为可管理的仓库;</li></ol><p><img src="https://i.loli.net/2019/09/20/PjMfbN1OR3mK7r5.png" alt=""></p><ul><li>如何将文件添加到版本库</li></ul><ol><li>在刚才创建的空文件夹中，添加你自己的文件，以readme.md为例；</li><li>用<code>git add</code>命令将文件添加到仓库；</li></ol><pre><code>$ git add readme.md</code></pre><ol start="3"><li>用<code>git commit</code>将文件提交到仓库；</li></ol><pre><code>$ git commit -m "this is a readme.md file."</code></pre><ul><li>如何查看仓库修改的内容</li></ul><ol><li><p>用<code>git status</code>查看仓库当前状态；</p></li><li><p>用<code>git diff filename</code>查看文件具体修改的内容；</p></li></ol><pre><code>$ git diff readme.txt</code></pre><ol start="3"><li><code>git log</code>查看最近到最远的提交日志</li></ol><pre><code>$ git log --pretty=oneline</code></pre><ol start="4"><li>回退之前的版本，先用<code>git log</code>查看提交历史，以确定commit_id，回退后，当想要重返未来版本时，用<code>git reflog</code>查看命令历史，从而确定重返版本commit_id，<code>HEAD</code>指向当前版本，为了在版本的历史之间穿梭，使用命令<code>git resrt --hard commit_id</code></li></ol><pre><code>$ git reset --hard HEAD^</code></pre><ol start="5"><li>直接丢弃工作区的某文件修改内容时，使用命令<code>git checkout -- filename</code></li></ol><pre><code>$ git checkout -- readme.md</code></pre><ol start="6"><li>删除文件，先在工作区将文件删除后，然后使用命令<code>git rm</code>将版本库中文件删除，然后通过<code>git commit</code>提交</li></ol><pre><code>$ git rm readme.md$ git commit -m "delete readme.md"</code></pre><hr><h1 id="远程仓库"><a href="#远程仓库" class="headerlink" title="远程仓库"></a>远程仓库</h1><ul><li><p>为了将本地Git和远程Github相连接，可以进行如下操作：</p><ul><li><p>确定<code>.ssh</code>目录下是否存在文件<code>id_rsa</code>和<code>id_rsa.pub</code>，有则复制<code>id_rsa.pub</code>中内容明将其添加到Github中的SSH Key，建立两者联系，可以在本地管理，</p></li><li><p>不存在则通过如下命令生成；</p><pre><code>$ ssh-keygen -t rsa -C "example@email.com"</code></pre></li></ul></li><li><p>如何添加远程仓库</p><ul><li><p>在本地通过如下命令建立本地仓库与远程仓库进行管理，然后就可以将本地仓库内容推送到Github仓库；</p><pre><code>$ git remote add origin git@github.com:cunyu1943/gitlearn.git</code></pre></li><li><p>从远程仓库克隆岛本地：</p><pre><code>$ git clone https://github.com/cunyu1943/the_journey_to_nlp.git</code></pre></li></ul></li><li><p>将本地仓库内容推送到远程仓库；</p></li></ul><pre><code># 第一次推送$ git push -u origin master# 之后的推送$ git push origin master</code></pre><hr><h1 id="分支管理"><a href="#分支管理" class="headerlink" title="分支管理"></a>分支管理</h1><ul><li>创建并切换分支</li></ul><pre><code>$ git switch -c dev# 等价命令$ git checkout -b dev# 等价命令$ git branch dev$ git checkout dev</code></pre><ul><li>查看当前分支，前边标有$*$代表当前分支，切换回$master$分支；</li></ul><pre><code>$ git branch$ git checkout/switch master</code></pre><ul><li>将$dev$分支合并到$master$分支；</li></ul><pre><code>$ git merge dev</code></pre><ul><li>删除分支；</li></ul><pre><code>$ git branch -d dev</code></pre><ul><li>强制删除未合并分支；</li></ul><pre><code>$ git branch -D dev</code></pre><ul><li>查看分支合并图</li></ul><pre><code>$ git log --graph</code></pre><hr><h1 id="多人协作"><a href="#多人协作" class="headerlink" title="多人协作"></a>多人协作</h1><ul><li><p>查看远程库信息：<code>git remote -v</code>；</p></li><li><p>本地新建分支若不推送到远程，则对其他人不可见；</p></li><li><p>本地推送到远程库，<code>git push origin branch-name</code>，若推送失败，则用<code>git pull</code>抓取远程新提交；</p></li></ul><pre><code>$ git push origin master# 若推送失败，则先执行如下命令$ git pull</code></pre><ul><li>本地创建和远程分支对应分支，<code>git checkout -b branch-name origin/branch-name</code></li></ul><pre><code>$ git checkout -b dev origin/dev</code></pre><ul><li>建立本地分支和远程分支的关联，<code>git branch --set-upstream branch-name origin/branch-name</code></li></ul><pre><code>$ git branch --set-upstream dev origin/dev</code></pre><ul><li>从远程抓取分支则使用<code>git pull</code>，若有冲突，则先解决处理后再处理；</li></ul><hr><h1 id="标签管理"><a href="#标签管理" class="headerlink" title="标签管理"></a>标签管理</h1><ul><li><p>先切换到需要打标签的分支<code>git switch branch-name</code>；</p></li><li><p>打标签并查看；</p></li></ul><pre><code># 打一个名为"v1.0"的标签$ git tag v1.0# 查看所有标签$ git tag</code></pre><ul><li>查看标签信息，<code>git show &lt;tagname&gt;</code>；</li></ul><pre><code>$ git show v1.0</code></pre><ul><li>创建带有说明的标签，用<code>-a</code>打标签名，<code>-m</code>指定说明文字；</li></ul><pre><code>$ git tag -a v1.0 -m "version 1.0 released" 132gsfh</code></pre><ul><li>删除标签，本地使用<code>git tag -d &lt;tagname&gt;</code>，远程则使用<code>git push origin :refs/tags/&lt;tagname&gt;</code></li></ul><pre><code># 删除本地标签$ git tag -d v30.0# 删除远程标签$ git push origin :refs/tags/v30.0</code></pre><ul><li>将标签推送到远程<code>git push origin &lt;tagname&gt;</code></li></ul><pre><code># 推送某一标签$ git push origin v1.0# 推送所有标签$ git push origin --tags</code></pre><hr><h1 id="建立Github和Gitee共同远程连接"><a href="#建立Github和Gitee共同远程连接" class="headerlink" title="建立Github和Gitee共同远程连接"></a>建立Github和Gitee共同远程连接</h1><ul><li>删除某一关联的远程库，<code>git remote rm &lt;basename&gt;</code></li></ul><pre><code>$ git remote rm origin</code></pre><ul><li>关联Gitee远程库，<code>git remote add &lt;basename&gt; git@gitee.com:&lt;username&gt;/&lt;basename&gt;.git</code></li></ul><pre><code>$ git remote add gitee git@gitee.com:cunyu1943/notes.git</code></pre><ul><li>关联Github远程库，<code>git remote add &lt;basename&gt; git@github.com:&lt;username&gt;/&lt;basename&gt;.git</code></li></ul><pre><code>$ git remote add github git@github.com:cunyu1943/notes.git</code></pre><p>-推送到Gitee和Github</p><pre><code># 推送到Gitee$ git push gitee master# 推送到Github$ git push github master</code></pre><hr><h1 id="其他小技巧"><a href="#其他小技巧" class="headerlink" title="其他小技巧"></a>其他小技巧</h1><ul><li><p>忽略特殊文件</p><p>  此时需要编写<code>.gitignore</code>文件，文件要放到版本库中，且可以对<code>.gitignore</code>进行版本管理；</p></li><li><p>配置命令别名</p></li></ul><pre><code># 举例$ git config --global alias st status$ git config --global alias checkout co$ git config --global alias commit cm</code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> tools </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Github使用中遇到的问题集锦</title>
      <link href="/2019/09/30/github-shi-yong-zhong-yu-dao-de-wen-ti-ji-jin/"/>
      <url>/2019/09/30/github-shi-yong-zhong-yu-dao-de-wen-ti-ji-jin/</url>
      
        <content type="html"><![CDATA[<h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1><p>对于我们国内用户，有时候浏览器在进入github网站时，会出现无法加载或加载很慢的问题，针对这一问题，很是头疼，为解决这一问题，在网上搜索到的解决方法如下；</p><h1 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h1><ul><li>修改hosts文件，在hosts文件中加入以下内容：</li></ul><pre><code># GitHub Start# 针对无法加载或加载慢的问题192.30.253.112 github.com192.30.253.119 gist.github.com151.101.100.133 assets-cdn.github.com151.101.100.133 raw.githubusercontent.com151.101.100.133 gist.githubusercontent.com151.101.100.133 cloud.githubusercontent.com151.101.100.133 camo.githubusercontent.com151.101.100.133 avatars0.githubusercontent.com151.101.100.133 avatars1.githubusercontent.com151.101.100.133 avatars2.githubusercontent.com151.101.100.133 avatars3.githubusercontent.com151.101.100.133 avatars4.githubusercontent.com151.101.100.133 avatars5.githubusercontent.com151.101.100.133 avatars6.githubusercontent.com151.101.100.133 avatars7.githubusercontent.com151.101.100.133 avatars8.githubusercontent.com# 下载慢问题219.76.4.4 github-cloud.s3.amazonaws.com# GitHub End</code></pre><ul><li><p>hosts文件所在目录</p><ul><li>Windows：<code>C:\Windows\System32\drivers\etc\hosts</code></li><li>Linux：<code>\etc\hosts</code></li></ul></li><li><p>修改后生效方法</p><ul><li>关机重启</li><li>断网重连</li><li>Window：Win+R，输入cmd回车，然后在cmd窗口中输入：<code>ipconfig /flushdns</code></li><li>Linux：Ctrl+Alt+T打开终端，输入<code>sudo rcnscd restart</code></li></ul></li></ul><hr><h1 id="问题-1"><a href="#问题-1" class="headerlink" title="问题"></a>问题</h1><p>使用git同时同步github以及gitee；</p><h1 id="解决方案-1"><a href="#解决方案-1" class="headerlink" title="解决方案"></a>解决方案</h1><p>修改版本库<code>.git/config</code>文件，在文件中加入github和gitee中对应版本库的url，如下例，将我github和gitee中PTA版本库url同时加入，然后在使用git就可以同时同步两端；</p><pre><code>[core]    repositoryformatversion = 0    filemode = false    bare = false    logallrefupdates = true    symlinks = false    ignorecase = true[remote "origin"]    url = https://gitee.com/cunyu1943/PTA.git    url = https://github.com/cunyu1943/PTA.git    fetch = +refs/heads/*:refs/remotes/origin/*[branch "master"]    remote = origin    merge = refs/heads/master</code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> tools </category>
          
      </categories>
      
      
        <tags>
            
            <tag> github </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
