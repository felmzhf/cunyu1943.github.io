<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Socket在Server和Client间通信的工作原理</title>
      <link href="/2019/09/30/socket-zai-server-he-client-jian-tong-xin-de-gong-zuo-yuan-li/"/>
      <url>/2019/09/30/socket-zai-server-he-client-jian-tong-xin-de-gong-zuo-yuan-li/</url>
      
        <content type="html"><![CDATA[<h4 id="Socket之间的连接过程主要可以概括为以下三步："><a href="#Socket之间的连接过程主要可以概括为以下三步：" class="headerlink" title="Socket之间的连接过程主要可以概括为以下三步："></a>Socket之间的连接过程主要可以概括为以下三步：</h4><ol><li><p><strong>服务器建立监听</strong>：客户端初始化Socket动态库后创建套接字，然后指定客户端Socket的地址，循环绑定Socket直至成功，然后开始建立监听，此时客户端处于等待状态，实时监控网络状态；</p></li><li><p><strong>客户端提出请求</strong>：客户端的Socket向服务器端提出连接请求，此时客户端描述出它所要连接的Socket，指出要连接的Socket的相关属性，然后向服务器端Socket提出请求；</p></li><li><p><strong>连接确认并建立</strong>：当服务器端套接字监听到来自客户端的连接请求之后，立即响应请求并建立一个新进程，然后将服务器端的套接字的描述反馈给客户端，由客户端确认之后连接就建立成功，然后客户端和服务器两端之间可以相互通信，传输数据，此时服务器端的套接字继续等待监听来自其他客户端的请求；</p></li></ol><p><img src="http://upload-images.jianshu.io/upload_images/9747350-928b4a5b6d4526d4?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="server和client之间的基本工作原理流程图"></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 计算机知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Socket </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C语言中的内存管理函数</title>
      <link href="/2019/09/30/c-yu-yan-zhong-de-nei-cun-guan-li-han-shu/"/>
      <url>/2019/09/30/c-yu-yan-zhong-de-nei-cun-guan-li-han-shu/</url>
      
        <content type="html"><![CDATA[<h3 id="malloc函数"><a href="#malloc函数" class="headerlink" title="malloc函数"></a>malloc函数</h3><ul><li>原型：extern void* malloc(unsigned int size)；</li><li>功能：动态分配内存；</li><li>注意：size仅仅为申请内存字节大小，与申请内存块中存储的数据类型无关，故编程时需要通过以下方式给出：”长度 * sizeof(数据类型)”；</li></ul><ul><li>示例：</li></ul><pre class="line-numbers language-c"><code class="language-c"><span class="token comment" spellcheck="true">//动态分配内存，输入5个数据，并把低于60的值打印出来</span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h&gt;</span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> <span class="token operator">*</span>ptr <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">5</span> <span class="token operator">*</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//分配内存</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token function">scanf_s</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>ptr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//输入数据</span>        <span class="token punctuation">}</span>    <span class="token keyword">int</span> min <span class="token operator">=</span> <span class="token number">60</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>min <span class="token operator">&gt;</span> <span class="token operator">*</span><span class="token punctuation">(</span>ptr <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%5d"</span><span class="token punctuation">,</span> <span class="token operator">*</span><span class="token punctuation">(</span>ptr <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//打印出低于60的值</span>    <span class="token punctuation">}</span>    <span class="token function">free</span><span class="token punctuation">(</span>ptr<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="free函数"><a href="#free函数" class="headerlink" title="free函数"></a>free函数</h3><ul><li>原型：void free(void * ptr)；</li><li>功能：搭配malloc()函数，释放malloc函数申请的动态内存；</li><li>注意：对于free(ptr)，若ptr为NULL，则可进行多次释放，若ptr是非空指针，则free对ptr只能进行一次操作，否则程序将崩溃；</li><li>示例：见malloc函数；</li><li>结果：见malloc函数；</li></ul><h3 id="realloc函数"><a href="#realloc函数" class="headerlink" title="realloc函数"></a>realloc函数</h3><ul><li><p>原型： void* realloc(void * ptr,unsigned int size)；</p></li><li><p>功能：先判断当前指针是否有足够的连续空间，若足够，扩大ptr指向的地址并返回，若不够，怎按size指定的大小分配空间，将原数据copy到新分配的内存中，然后释放原ptr所指向区域；</p></li><li><p>注意：内存使用完毕后，应使用free()函数释放，但原来的指针是自动释放，不需要使用free；</p></li><li><p>示例：</p></li></ul><pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h&gt;</span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>   <span class="token keyword">char</span> <span class="token operator">*</span>str<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* 一开始的内存分配 */</span>    str <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">15</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">strcpy</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span> <span class="token string">"Hello World!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"String = %s\n"</span><span class="token punctuation">,</span> str<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* 重新分配内存 */</span>    str <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">realloc</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">strcat</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span> <span class="token string">", C"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"String = %s\n"</span><span class="token punctuation">,</span> str<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">free</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="calloc函数"><a href="#calloc函数" class="headerlink" title="calloc函数"></a>calloc函数</h3><ul><li>原型：void* calloc（unsigned int num，unsigned int size）；</li><li>功能：为已经分配的内存重新分配空间并复制内容；</li><li>注意：num：对象个数，size：对象占据的内存字节数，相较于malloc函数，calloc函数会自动将内存初始化为0；</li></ul><ul><li>示例：</li></ul><pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h&gt;</span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> num<span class="token punctuation">;</span>    <span class="token keyword">int</span> i<span class="token punctuation">;</span>    <span class="token keyword">int</span> <span class="token operator">*</span>ptr<span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"元素个数为："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>    ptr <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">calloc</span><span class="token punctuation">(</span>num<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"输入 %d 个数字：\n"</span><span class="token punctuation">,</span> num<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> num<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>ptr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"输入的数字为："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> num<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d "</span><span class="token punctuation">,</span> ptr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 编程语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C/C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>程序员常用编辑器推荐</title>
      <link href="/2019/09/30/cheng-xu-yuan-chang-yong-bian-ji-qi-tui-jian/"/>
      <url>/2019/09/30/cheng-xu-yuan-chang-yong-bian-ji-qi-tui-jian/</url>
      
        <content type="html"><![CDATA[<p>对于一个程序员而言，一款称手的代码编辑器是十分重要的。一款好的代码编辑器能够大大提高开发效率，节省开发时间。而且现在许多的代码编辑器功能十分强大，不仅仅只是编写代码、查看源文件，还可以查看txt文档，也支持Markdown格式的写作等等。下面就简要的介绍几款的代码编辑器，</p><h3 id="Vim"><a href="#Vim" class="headerlink" title="Vim"></a>Vim</h3><ul><li>官网下载地址：<a href="https://www.vim.org/" target="_blank" rel="noopener">https://www.vim.org/</a></li><li>Github下载地址：<a href="https://github.com/vim/vim/releases" target="_blank" rel="noopener">https://github.com/vim/vim/releases</a></li><li>使用教程：<a href="https://www.runoob.com/linux/linux-vim.html" target="_blank" rel="noopener">https://www.runoob.com/linux/linux-vim.html</a></li></ul><h3 id="EditPlus"><a href="#EditPlus" class="headerlink" title="EditPlus"></a>EditPlus</h3><ul><li>官网下载地址：<a href="https://www.editplus.com/" target="_blank" rel="noopener">https://www.editplus.com/</a></li><li>中文破解版：<a href="http://www.pc6.com/softview/SoftView_36775.html" target="_blank" rel="noopener">http://www.pc6.com/softview/SoftView_36775.html</a></li></ul><h3 id="UltraEdit"><a href="#UltraEdit" class="headerlink" title="UltraEdit"></a>UltraEdit</h3><ul><li>官网下载地址：<a href="https://www.ultraedit.com/" target="_blank" rel="noopener">https://www.ultraedit.com/</a></li><li>中文官网下载地址：<a href="http://www.ultraedit.cn/" target="_blank" rel="noopener">http://www.ultraedit.cn/</a></li></ul><h3 id="Sublime-Text"><a href="#Sublime-Text" class="headerlink" title="Sublime Text"></a>Sublime Text</h3><ul><li>官网下载地址：<a href="http://www.sublimetext.com/3" target="_blank" rel="noopener">http://www.sublimetext.com/3</a></li><li>中文版下载地址：<a href="http://sublimetextcn.com/" target="_blank" rel="noopener">http://sublimetextcn.com/</a></li><li>优点：功能强大、性能优良、界面美观、多平台兼容；</li><li>缺点：收费，不过收费也不是很贵，有条件的还是建议买个正版，省事又方便；</li></ul><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy85NzQ3MzUwLTY5MTdlYzk2MDgzMjI4YTMucG5n?x-oss-process=image/format,png" alt="图片来自百度"></p><h3 id="Notepad"><a href="#Notepad" class="headerlink" title="Notepad++"></a>Notepad++</h3><ul><li>官网下载地址：<a href="https://notepad-plus-plus.org/" target="_blank" rel="noopener">https://notepad-plus-plus.org/</a></li><li>优点：国人(台湾人侯金吾)开发，有完整的中文接口，并支持多国语言，免费开源，轻便；</li><li>缺点：目前只支持Windows平台；</li></ul><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy85NzQ3MzUwLWY4N2I5NDEyZGVjMTRhYjkucG5n?x-oss-process=image/format,png" alt="图片来自百度"></p><h3 id="Visual-Studio-Code"><a href="#Visual-Studio-Code" class="headerlink" title="Visual Studio Code"></a>Visual Studio Code</h3><ul><li>官网下载地址：<a href="https://code.visualstudio.com/" target="_blank" rel="noopener">https://code.visualstudio.com/</a></li><li>优点：作为宇宙最强IDE Visual Studio开发者微软旗下的一款产品，它的强大毋庸置疑，就不再赘述。而且最重要的一点，这款编辑器是完全开源免费的，也支持多平台；</li><li>缺点：相对来说，安装体积较大，比不上sublime、notepad等轻便；<br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy85NzQ3MzUwLWY3MDFjOWNkOTgyY2JiYmYucG5n?x-oss-process=image/format,png" alt=""></li></ul><h3 id="Atom"><a href="#Atom" class="headerlink" title="Atom"></a>Atom</h3><ul><li>官网下载地址：<a href="https://atom.io/" target="_blank" rel="noopener">https://atom.io/</a></li><li>优点：用户界面简洁直观，简单易用，上手很快，由全球最大同性交友平台github推出，完全免费开源，支持多平台，PS：还有各种意想不到的酷炫功能，自己去探索吧；</li><li>缺点：由于集成了许多功能，安装的时候相对臃肿，轻便性有待提高；</li></ul><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy85NzQ3MzUwLTkzN2ZhYmRmZDk4NWRhZDAucG5n?x-oss-process=image/format,png" alt="图片来自百度"></p><p>好了，以上就推荐了几款作为开发者最常用的几个代码编辑器。正所谓萝卜白菜，各有所爱，所以笔者也不能说哪一款是最好的。如果你更倾向于轻便，那Sublime Text和Notepad++或许是更好的选择。但如果你想要易上手之类的，Atom和VS Code也许会更适合你。当然了，Sublime Text和Notepad++也可以通过安装各种插件来使功能更加强大，这就需要你去折腾了。以上就是我的看法了，希望你看了这篇博客后能够选到最适合你的代码编辑器。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> tools </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Visual Studio Code </tag>
            
            <tag> Sublime Text </tag>
            
            <tag> Notepad++ </tag>
            
            <tag> Atom </tag>
            
            <tag> Vim </tag>
            
            <tag> UltraEdit </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Markdown写作入门</title>
      <link href="/2019/09/30/markdown-xie-zuo-ru-men/"/>
      <url>/2019/09/30/markdown-xie-zuo-ru-men/</url>
      
        <content type="html"><![CDATA[<h3 id="什么是Markdown格式"><a href="#什么是Markdown格式" class="headerlink" title="什么是Markdown格式"></a>什么是Markdown格式</h3><p>Markdown格式是一种可用普通文本编辑器编写的标记语言，使用者能够通过简单的标记语法，对自己所写文本内容进行简单的格式排版；</p><h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h3><ul><li>语法简洁易学，且功能比纯文本强大；</li><li>格式转换方便，兼容性强，可读性极好；</li></ul><h3 id="写作格式"><a href="#写作格式" class="headerlink" title="写作格式"></a>写作格式</h3><h4 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h4><p>每多加一级则添加一个 # 号；<br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy85NzQ3MzUwLTI0OGM5ODA2ZmIyNGU4OTAucG5n" alt=""></p><h4 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h4><ul><li><p>有序列表<br>数字加上一个英文句点，空格后输入内容；<br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy85NzQ3MzUwLTFkMzRjNWU5ODcwMDU2YjEucG5n" alt=""></p></li><li><p>无序列表<br>-、+、*为无序列表标识；<br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy85NzQ3MzUwLWIzNmIxYWRjMzcxMTNmZWQucG5n" alt=""></p></li></ul><h4 id="加粗"><a href="#加粗" class="headerlink" title="加粗"></a>加粗</h4><p>两个连续 * 或者 _ 包含内容；<br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy85NzQ3MzUwLTJiMDFmYTdjODFmMWM1YjMucG5n" alt=""></p><h4 id="斜体"><a href="#斜体" class="headerlink" title="斜体"></a>斜体</h4><p>一个 * 或者 _ 包含内容；<br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy85NzQ3MzUwLTE5ZGI0ZjcwYTIwNGIyMTUucG5n" alt=""></p><h4 id="删除线"><a href="#删除线" class="headerlink" title="删除线"></a>删除线</h4><p>两个 ~~ 包含；<br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy85NzQ3MzUwLTE3M2M4NGM5NjZjMTAzMzYucG5n" alt=""></p><h4 id="标记文本"><a href="#标记文本" class="headerlink" title="标记文本"></a>标记文本</h4><p>两个<code>==</code>包含，格式如下；<br><code>==demo==</code></p><h4 id="上下标"><a href="#上下标" class="headerlink" title="上下标"></a>上下标</h4><ul><li>上标<br><code>^</code>包含，格式如下；<br><code>demo^demo^</code></li><li>下标<br><code>~</code>包含，格式如下；<br><code>demo~demo~</code></li></ul><h4 id="分割线"><a href="#分割线" class="headerlink" title="分割线"></a>分割线</h4><p>三个及以上的 *、_、- 用于建立分割线；<br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy85NzQ3MzUwLTcxM2M4ZDg3OWI0ODM5N2YucG5n" alt=""><br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy85NzQ3MzUwLWExYmY2MjRjYmQxOTU4YmIucG5n" alt=""><br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy85NzQ3MzUwLWU1N2U0YTI4ZmIxZjY1MWYucG5n" alt=""></p><h4 id="代码块"><a href="#代码块" class="headerlink" title="代码块"></a>代码块</h4><p>三个连续 ` 包含代码内容；<br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy85NzQ3MzUwLWQ4YTY4MjUzMzQ5MWNlMmQucG5n" alt=""></p><h4 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h4><p>单个 &gt; 标记区块引用；<br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy85NzQ3MzUwLTZmMWYxYTBjNzM3ZTliOTMucG5n" alt=""></p><h4 id="链接和图片"><a href="#链接和图片" class="headerlink" title="链接和图片"></a>链接和图片</h4><ul><li><code>[显示的文本](链接地址)；</code><br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy85NzQ3MzUwLTFkNzM3YzUwMTAzNmQzYTIucG5n" alt=""></li><li><code>[外链图片转存失败(img-XrVu45Zv-1563331849244)(图片链接地址)]；</code><br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy85NzQ3MzUwLWEzZWZjM2M2M2YxNTVkYzYucG5n" alt=""></li></ul><h4 id="上下角标"><a href="#上下角标" class="headerlink" title="上下角标"></a>上下角标</h4><h5 id="上角标"><a href="#上角标" class="headerlink" title="上角标"></a>上角标</h5><pre class="line-numbers language-text"><code class="language-text">1. <sup>内容</sup>2. ^<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h5 id="下角标"><a href="#下角标" class="headerlink" title="下角标"></a>下角标</h5><pre class="line-numbers language-text"><code class="language-text">1. <sub>内容</sub>2. _<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="数学公式"><a href="#数学公式" class="headerlink" title="数学公式"></a>数学公式</h4><ul><li><p>起始和结尾标志<br>数学公式以<code>$</code>开头和结尾，若公式要独占一行，则以<code>$$</code>开头和结尾；</p></li><li><p>符号上下标<br>上标：<code>^</code>，如$a^2$；<br>下标：<code>_</code>，如$a_2$；</p></li><li><p>分组<br>使用<code>{}</code>将具有相同等级的内容扩入其中，成组处理</p></li><li><p>括号</p><ul><li>小括号：<code>()</code>；</li><li>中括号：<code>[]</code>；</li><li>尖括号：<code>\langle，\rangle</code>；</li><li>大括号：使用<code>\left</code>或<code>\right</code>让符号大小与邻近的公式相适应，如<code>(\frac{x}{y})和\left(\frac{x}{y}\right)</code>的区别<br>$$(\frac{x}{y})$$<br>$$\left(\frac{x}{y}\right)$$</li></ul></li><li><p>求和、极限和积分</p><ul><li>求和：<code>\sum</code>；</li><li>极限：<code>\lim</code>；</li><li>积分：<code>\int</code>；</li></ul></li><li><p>分式与根式</p><ul><li>分式：<code>\frac{分子}{分母}</code>；</li><li>根式：<code>\sqrt{根次}{底数}</code>；</li></ul></li></ul><h3 id="编辑器推荐"><a href="#编辑器推荐" class="headerlink" title="编辑器推荐"></a>编辑器推荐</h3><ul><li><p>Typora<br>一款所见即所得的Markdown编辑器，支持跨平台，下载地址：<a href="https://www.typora.io/" target="_blank" rel="noopener">https://www.typora.io/</a>;</p></li><li><p>GitNote<br>一款基于git的支持Markdown格式的笔记应用，虽然界面比较简陋，但是支持直接链接到自己的github同步，还解决了Typora中上传到网上的图床问题，下载地址：<a href="https://www.gitnoteapp.com/；" target="_blank" rel="noopener">https://www.gitnoteapp.com/；</a></p></li><li><p>VScode<br>微软出品的VScode可谓功能齐全，当然也是可以用来写作Markdown格式的，关于介绍及下载见我的另一篇文章<a href="https://www.jianshu.com/p/94f312103f9d" target="_blank" rel="noopener">开发者编辑器推荐</a>;</p></li><li><p>Cmd Markdown<br>这是由作业部落出品的一款Markdown写作软件，既有网页版，也有离线版，最大的特点在于联网时可以实时保存到云，不用担心因为各种原因导致的数据丢失问题，具体见<a href="https://www.zybuluo.com/mdeditor" target="_blank" rel="noopener">Cmd Markdown介绍</a>，<a href="https://www.zybuluo.com/mdeditor" target="_blank" rel="noopener">下载地址</a>;<br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy85NzQ3MzUwLTc2NDExZGQ3ZDM5ODQ5OGEucG5n" alt=""></p></li></ul><h3 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h3><p>以上就是Markdown写作格式中最常用的语法，对于日常使用已经完全足够，至于更加高级的技巧，也可以在评论区贴出，大家一起交流学习！！！</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> tools </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Markdown </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>通过Xshell远程连接Ubuntu</title>
      <link href="/2019/09/30/tong-guo-xshell-lian-jie-ubuntu/"/>
      <url>/2019/09/30/tong-guo-xshell-lian-jie-ubuntu/</url>
      
        <content type="html"><![CDATA[<p>一般情况下，安装好的Ubuntu系统中默认是只安装了<code>openssh-client</code>，此时只能通过此系统连接访问其他系统，但不具有让其他系统访问的权限。在终端查看ssh进程，输入<code>ps -e|grep ssh</code>，如果有安装<code>openssh-client</code>只会出现<code>ssh -agent</code>，不会出现<code>sshd</code>(因为博主已经安装<code>openssh-server</code>，所以会出现<code>sshd</code>)。</p><p><img src="https://img-blog.csdn.net/20180801141631186?watermark/2/text/5p2R6ZuoMTk0Mw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/35" alt=""><br>此时要想开放本机SSH服务以便其他系统登陆访问，就必须安装<code>openssh-server</code>，安装过程如下：</p><ul><li>在终端中输入<code>sudo apt-get install openssh-server</code>，然后输入自己的<code>root</code>密码就可以了(因为博主已经安装过，所以提示的是升级)；</li></ul><p><img src="https://img-blog.csdn.net/20180801142429103?watermark/2/text/5p2R6ZuoMTk0Mw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/35" alt=""></p><ul><li>然后启动<code>ssh-server</code>服务即可，开启方式，当然这两种开启方式都是需要切换到<code>root</code>用户或者提供密码权限的；</li></ul><ol><li><p><code>service ssh start</code></p></li><li><p><code>/etc/init.d/ssh start</code></p></li></ol><p><img src="https://img-blog.csdn.net/20180801143049189?watermark/2/text/5p2R6ZuoMTk0Mw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/35" alt=""></p><ul><li>验证是否开启成功；</li></ul><p><img src="https://img-blog.csdn.net/20180801143318643?watermark/2/text/5p2R6ZuoMTk0Mw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/35" alt=""></p><ul><li>若再次查看<code>ssh</code>进程时，同时出现<code>sshd</code>、<code>ssh -agent</code>进程，则说明<code>openssh -service</code>已经安装成功；</li></ul><p><img src="https://img-blog.csdn.net/20180801143739776?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dpdGh1Yl8zOTY1NTAyOQ==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/35" alt=""></p><ul><li>此时便可通过XShell访问Ubuntu了，依次填入主机IP、用户名已经用户密码便可成功连接到Ubuntu；</li></ul><p><img src="https://img-blog.csdn.net/20180801144354326?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dpdGh1Yl8zOTY1NTAyOQ==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/35" alt=""></p><p><img src="https://img-blog.csdn.net/2018080114453685?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dpdGh1Yl8zOTY1NTAyOQ==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt=""></p><p><img src="https://img-blog.csdn.net/20180801143846201?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dpdGh1Yl8zOTY1NTAyOQ==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/35" alt=""></p><p><img src="https://img-blog.csdn.net/20180801144107643?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dpdGh1Yl8zOTY1NTAyOQ==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/35" alt=""></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> tools </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Xshell </tag>
            
            <tag> Ubuntu </tag>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git使用学习笔记</title>
      <link href="/2019/09/30/git-shi-yong-xue-xi-bi-ji/"/>
      <url>/2019/09/30/git-shi-yong-xue-xi-bi-ji/</url>
      
        <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><ul><li><p>定义<br>  Git，最先进的分布式版本控制系统之一，最初是由Linux之父Linus为了更好管理开源Linux系统而开发的一个软件；</p></li><li><p>下载：<a href="https://git-scm.com/downloads" target="_blank" rel="noopener">https://git-scm.com/downloads</a></p></li><li><p>安装</p><ul><li>Linux：<code>sudo apt-get install git</code></li><li>Windows、macOS通过官网下载安装包后进行安装即可；</li></ul></li><li><p>设置</p><p>  安装完成后，需要进行以下设置：</p><pre><code>$ git config --global user.name "user name"$ git config --global user.email "example@email.com"# 可选，让Git命令行显示颜色$ git config --global color.ui true</code></pre></li></ul><hr><h1 id="版本库创建及管理"><a href="#版本库创建及管理" class="headerlink" title="版本库创建及管理"></a>版本库创建及管理</h1><ul><li>如何创建版本库</li></ul><ol><li>先创建一个空文件夹，Windows下不再介绍，Linux以及macOS下可通过<code>$ mkdir gitlearn</code>命令创建；</li><li>通过<code>$ git init</code>将刚才创建的目录变为可管理的仓库;</li></ol><p><img src="https://i.loli.net/2019/09/20/PjMfbN1OR3mK7r5.png" alt=""></p><ul><li>如何将文件添加到版本库</li></ul><ol><li>在刚才创建的空文件夹中，添加你自己的文件，以readme.md为例；</li><li>用<code>git add</code>命令将文件添加到仓库；</li></ol><pre><code>$ git add readme.md</code></pre><ol start="3"><li>用<code>git commit</code>将文件提交到仓库；</li></ol><pre><code>$ git commit -m "this is a readme.md file."</code></pre><ul><li>如何查看仓库修改的内容</li></ul><ol><li><p>用<code>git status</code>查看仓库当前状态；</p></li><li><p>用<code>git diff filename</code>查看文件具体修改的内容；</p></li></ol><pre><code>$ git diff readme.txt</code></pre><ol start="3"><li><code>git log</code>查看最近到最远的提交日志</li></ol><pre><code>$ git log --pretty=oneline</code></pre><ol start="4"><li>回退之前的版本，先用<code>git log</code>查看提交历史，以确定commit_id，回退后，当想要重返未来版本时，用<code>git reflog</code>查看命令历史，从而确定重返版本commit_id，<code>HEAD</code>指向当前版本，为了在版本的历史之间穿梭，使用命令<code>git resrt --hard commit_id</code></li></ol><pre><code>$ git reset --hard HEAD^</code></pre><ol start="5"><li>直接丢弃工作区的某文件修改内容时，使用命令<code>git checkout -- filename</code></li></ol><pre><code>$ git checkout -- readme.md</code></pre><ol start="6"><li>删除文件，先在工作区将文件删除后，然后使用命令<code>git rm</code>将版本库中文件删除，然后通过<code>git commit</code>提交</li></ol><pre><code>$ git rm readme.md$ git commit -m "delete readme.md"</code></pre><hr><h1 id="远程仓库"><a href="#远程仓库" class="headerlink" title="远程仓库"></a>远程仓库</h1><ul><li><p>为了将本地Git和远程Github相连接，可以进行如下操作：</p><ul><li><p>确定<code>.ssh</code>目录下是否存在文件<code>id_rsa</code>和<code>id_rsa.pub</code>，有则复制<code>id_rsa.pub</code>中内容明将其添加到Github中的SSH Key，建立两者联系，可以在本地管理，</p></li><li><p>不存在则通过如下命令生成；</p><pre><code>$ ssh-keygen -t rsa -C "example@email.com"</code></pre></li></ul></li><li><p>如何添加远程仓库</p><ul><li><p>在本地通过如下命令建立本地仓库与远程仓库进行管理，然后就可以将本地仓库内容推送到Github仓库；</p><pre><code>$ git remote add origin git@github.com:cunyu1943/gitlearn.git</code></pre></li><li><p>从远程仓库克隆岛本地：</p><pre><code>$ git clone https://github.com/cunyu1943/the_journey_to_nlp.git</code></pre></li></ul></li><li><p>将本地仓库内容推送到远程仓库；</p></li></ul><pre><code># 第一次推送$ git push -u origin master# 之后的推送$ git push origin master</code></pre><hr><h1 id="分支管理"><a href="#分支管理" class="headerlink" title="分支管理"></a>分支管理</h1><ul><li>创建并切换分支</li></ul><pre><code>$ git switch -c dev# 等价命令$ git checkout -b dev# 等价命令$ git branch dev$ git checkout dev</code></pre><ul><li>查看当前分支，前边标有$*$代表当前分支，切换回$master$分支；</li></ul><pre><code>$ git branch$ git checkout/switch master</code></pre><ul><li>将$dev$分支合并到$master$分支；</li></ul><pre><code>$ git merge dev</code></pre><ul><li>删除分支；</li></ul><pre><code>$ git branch -d dev</code></pre><ul><li>强制删除未合并分支；</li></ul><pre><code>$ git branch -D dev</code></pre><ul><li>查看分支合并图</li></ul><pre><code>$ git log --graph</code></pre><hr><h1 id="多人协作"><a href="#多人协作" class="headerlink" title="多人协作"></a>多人协作</h1><ul><li><p>查看远程库信息：<code>git remote -v</code>；</p></li><li><p>本地新建分支若不推送到远程，则对其他人不可见；</p></li><li><p>本地推送到远程库，<code>git push origin branch-name</code>，若推送失败，则用<code>git pull</code>抓取远程新提交；</p></li></ul><pre><code>$ git push origin master# 若推送失败，则先执行如下命令$ git pull</code></pre><ul><li>本地创建和远程分支对应分支，<code>git checkout -b branch-name origin/branch-name</code></li></ul><pre><code>$ git checkout -b dev origin/dev</code></pre><ul><li>建立本地分支和远程分支的关联，<code>git branch --set-upstream branch-name origin/branch-name</code></li></ul><pre><code>$ git branch --set-upstream dev origin/dev</code></pre><ul><li>从远程抓取分支则使用<code>git pull</code>，若有冲突，则先解决处理后再处理；</li></ul><hr><h1 id="标签管理"><a href="#标签管理" class="headerlink" title="标签管理"></a>标签管理</h1><ul><li><p>先切换到需要打标签的分支<code>git switch branch-name</code>；</p></li><li><p>打标签并查看；</p></li></ul><pre><code># 打一个名为"v1.0"的标签$ git tag v1.0# 查看所有标签$ git tag</code></pre><ul><li>查看标签信息，<code>git show &lt;tagname&gt;</code>；</li></ul><pre><code>$ git show v1.0</code></pre><ul><li>创建带有说明的标签，用<code>-a</code>打标签名，<code>-m</code>指定说明文字；</li></ul><pre><code>$ git tag -a v1.0 -m "version 1.0 released" 132gsfh</code></pre><ul><li>删除标签，本地使用<code>git tag -d &lt;tagname&gt;</code>，远程则使用<code>git push origin :refs/tags/&lt;tagname&gt;</code></li></ul><pre><code># 删除本地标签$ git tag -d v30.0# 删除远程标签$ git push origin :refs/tags/v30.0</code></pre><ul><li>将标签推送到远程<code>git push origin &lt;tagname&gt;</code></li></ul><pre><code># 推送某一标签$ git push origin v1.0# 推送所有标签$ git push origin --tags</code></pre><hr><h1 id="建立Github和Gitee共同远程连接"><a href="#建立Github和Gitee共同远程连接" class="headerlink" title="建立Github和Gitee共同远程连接"></a>建立Github和Gitee共同远程连接</h1><ul><li>删除某一关联的远程库，<code>git remote rm &lt;basename&gt;</code></li></ul><pre><code>$ git remote rm origin</code></pre><ul><li>关联Gitee远程库，<code>git remote add &lt;basename&gt; git@gitee.com:&lt;username&gt;/&lt;basename&gt;.git</code></li></ul><pre><code>$ git remote add gitee git@gitee.com:cunyu1943/notes.git</code></pre><ul><li>关联Github远程库，<code>git remote add &lt;basename&gt; git@github.com:&lt;username&gt;/&lt;basename&gt;.git</code></li></ul><pre><code>$ git remote add github git@github.com:cunyu1943/notes.git</code></pre><p>-推送到Gitee和Github</p><pre><code># 推送到Gitee$ git push gitee master# 推送到Github$ git push github master</code></pre><hr><h1 id="其他小技巧"><a href="#其他小技巧" class="headerlink" title="其他小技巧"></a>其他小技巧</h1><ul><li><p>忽略特殊文件</p><p>  此时需要编写<code>.gitignore</code>文件，文件要放到版本库中，且可以对<code>.gitignore</code>进行版本管理；</p></li><li><p>配置命令别名</p></li></ul><pre><code># 举例$ git config --global alias st status$ git config --global alias checkout co$ git config --global alias commit cm</code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> tools </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Github使用中遇到的问题集锦</title>
      <link href="/2019/09/30/github-shi-yong-zhong-yu-dao-de-wen-ti-ji-jin/"/>
      <url>/2019/09/30/github-shi-yong-zhong-yu-dao-de-wen-ti-ji-jin/</url>
      
        <content type="html"><![CDATA[<h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1><p>对于我们国内用户，有时候浏览器在进入github网站时，会出现无法加载或加载很慢的问题，针对这一问题，很是头疼，为解决这一问题，在网上搜索到的解决方法如下；</p><h1 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h1><ul><li>修改hosts文件，在hosts文件中加入以下内容：</li></ul><pre><code># GitHub Start# 针对无法加载或加载慢的问题192.30.253.112 github.com192.30.253.119 gist.github.com151.101.100.133 assets-cdn.github.com151.101.100.133 raw.githubusercontent.com151.101.100.133 gist.githubusercontent.com151.101.100.133 cloud.githubusercontent.com151.101.100.133 camo.githubusercontent.com151.101.100.133 avatars0.githubusercontent.com151.101.100.133 avatars1.githubusercontent.com151.101.100.133 avatars2.githubusercontent.com151.101.100.133 avatars3.githubusercontent.com151.101.100.133 avatars4.githubusercontent.com151.101.100.133 avatars5.githubusercontent.com151.101.100.133 avatars6.githubusercontent.com151.101.100.133 avatars7.githubusercontent.com151.101.100.133 avatars8.githubusercontent.com# 下载慢问题219.76.4.4 github-cloud.s3.amazonaws.com# GitHub End</code></pre><ul><li><p>hosts文件所在目录</p><ul><li>Windows：<code>C:\Windows\System32\drivers\etc\hosts</code></li><li>Linux：<code>\etc\hosts</code></li></ul></li><li><p>修改后生效方法</p><ul><li>关机重启</li><li>断网重连</li><li>Window：Win+R，输入cmd回车，然后在cmd窗口中输入：<code>ipconfig /flushdns</code></li><li>Linux：Ctrl+Alt+T打开终端，输入<code>sudo rcnscd restart</code></li></ul></li></ul><hr><h1 id="问题-1"><a href="#问题-1" class="headerlink" title="问题"></a>问题</h1><p>使用git同时同步github以及gitee；</p><h1 id="解决方案-1"><a href="#解决方案-1" class="headerlink" title="解决方案"></a>解决方案</h1><p>修改版本库<code>.git/config</code>文件，在文件中加入github和gitee中对应版本库的url，如下例，将我github和gitee中PTA版本库url同时加入，然后在使用git就可以同时同步两端；</p><pre><code>[core]    repositoryformatversion = 0    filemode = false    bare = false    logallrefupdates = true    symlinks = false    ignorecase = true[remote "origin"]    url = https://gitee.com/cunyu1943/PTA.git    url = https://github.com/cunyu1943/PTA.git    fetch = +refs/heads/*:refs/remotes/origin/*[branch "master"]    remote = origin    merge = refs/heads/master</code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> tools </category>
          
      </categories>
      
      
        <tags>
            
            <tag> github </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
