<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Word Embedding</title>
      <link href="/2019/10/02/word-embedding/"/>
      <url>/2019/10/02/word-embedding/</url>
      
        <content type="html"><![CDATA[<h2 id="如何表示词义"><a href="#如何表示词义" class="headerlink" title="如何表示词义"></a>如何表示词义</h2><ul><li><p>流程     </p><p>  文本文件-&gt;分词后的序列-&gt;词表示的向量（词嵌入）-&gt;解决具体任务的算法；    </p></li></ul><h2 id="用离散符号表示词"><a href="#用离散符号表示词" class="headerlink" title="用离散符号表示词"></a>用离散符号表示词</h2><p>传统NLP中，我们将词表示为一个个的离散符号，如：sun、hotel、fruit……，我们可以用$one-hot$方式将词代表为向量形式，如： </p><p>$$sun=[0,1,0,0,0,0,0,0,0,0]$$   </p><p>$$hotel=[0,0,0,0,1,0,0,0,0,0]$$</p><p>此时存在问题：   </p><ol><li>向量之间无相似性，各个词用$one-hot$方式表示时，不同词之间都是正交的，不含有近似单词的信息；   </li><li>向量维度过高，利用$one-hot$方式表示词向量时，向量维度等于词表中的词数，当词数量过多时，这个方法所带来的维度过高问题就会凸显出来；    </li></ol><h2 id="分布式语义"><a href="#分布式语义" class="headerlink" title="分布式语义"></a>分布式语义</h2><ul><li><p>分布表示的思路     </p><p>语料-&gt;对共现词计数-&gt;将计数后的数据转换为向量 -&gt;通过一系列降维方法，将高维转换为低维    </p></li><li><p>LSA（潜在语义分析）    </p></li><li><p>Word Embedding（词嵌入）     </p><p>通过给每个单词学习一个密集向量，类似于出现在相似上下文中的单词向量，这样的词向量就叫做word embedding或者word representations；       </p></li><li><p>模型结构图</p></li></ul><p><img src="https://upload-images.jianshu.io/upload_images/9747350-6f07af4254f245ad.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="word embedding">   </p><ul><li><p>算法基本思想     </p><p>输入层通过将大规模语料中的每个单词表示为一个密集向量，其中每个单词都是通过向量来表示，对文本进行遍历，每个位置都有一个中心词$c$和语境词表示$o$，通过利用$c$和$o$词向量之间的相似度，从而在给定$c$，计算出$o$的概率（或给定$o$，计算出$c$的概率），还需要通过调节词向量来最大化概率；</p></li><li><p>具体例子  </p></li></ul><p><img src="https://upload-images.jianshu.io/upload_images/9747350-424600edc596df0c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="具体例子">   </p><p>  在给定第$t$个位置中心词$banking$的情况下，当窗口大小设为$2$时，通过给定$p(w_t)$来计算左右窗口大小为$2$的词的条件概率；       </p><ul><li><p>相似度</p><p>对于每个位置$t=1,2,……,T$，当预测固定窗口大小为$m$的上文问关联词时，给出中心词为$w_t$，则<strong>相似度</strong>为：      </p></li></ul><p>$$L(\theta)=\prod ^T_{t=1} \prod <em>{-m&lt;=j&lt;=m,j\not=0} P(w</em>{t+j}|w_t;\theta)，其中\theta是所有需要优化的变量$$</p><ul><li>目标函数（损失/代价函数）</li></ul><p>$$J(\theta)=-\frac{1}{T}logL(\theta)=-\frac{1}{T}\sum^T_{t=1}\sum_{-m&lt;=j&lt;=m,j\not=0}logP(w_{t+j}|w_t;\theta)$$</p><p>即目标函数为负的相似度函数对数的平均值，通过最小化目标函数，从而将预测的准确率最大化；</p><ul><li><p>预测函数</p><p>  如何最小化目标函数呢？我们可以通过对预测函数的的处理来解决这一问题。对于预测函数$P(w_{t+j}|w_j,\theta)$，可以通过用词$w$的两个向量来解决。我们假设$V_w$是中心词，$U_w$是语境词。则对于中心词$c$和语境词$o$而言，存在如下关系：</p></li></ul><p>$$P(o|c)=\frac{exp(u^T_ov_c)}{\sum_{w\in V}exp(u^T_wv_c)}$$</p><p>  其中，分子中$o$和$v$的点积$u^T_o v_C$越大，则最后得到的概率$P(o|v)$越大。而分母则通过指数函数计算之后，从而实现了对整个词表的标准化；</p><ul><li>实例</li></ul><p><img src="https://upload-images.jianshu.io/upload_images/9747350-b20c320799417b96.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>其中$P(u_{problems}|v_{into})$为$P(problems|into;u_{problems},v_{into},\theta)$的简写形式；</p><p><img src="https://upload-images.jianshu.io/upload_images/9747350-f3da1fed7320a9c2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><ul><li>$Softmax$回归</li></ul><p>$$softmax(x)<em>i = \frac{exp(x_i)}{\sum^n</em>{j=1}exp(x_j)}=p_i$$</p><p>$softmax$又称为多项逻辑回归（$multinomial logistic regression$），多用于<strong>分类</strong>过程，它通过将多个神经元的输出，映射到$(0,1)$区间。它通过将任意值$x_i$映射到一个概率分布$p_i$上，”$max$”是因为它会将输入中最大的值的概率进一步放大，而”$soft$”则是因为对于输入中极小的值，它也人然后分配一些概率，而不是直接丢弃。因此，$softmax$函数常常用在深度学习中；</p><h2 id="word2vec中将文本进行向量表示的方法"><a href="#word2vec中将文本进行向量表示的方法" class="headerlink" title="word2vec中将文本进行向量表示的方法"></a>word2vec中将文本进行向量表示的方法</h2><ul><li>$CBOW（Continuous Bag of Words）$</li></ul><p><img src="https://upload-images.jianshu.io/upload_images/9747350-5dd0b167b54b5528.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="CBOW模型结构图"></p><p>  给定上下文中的词，然后预测中心词。从而利用中心词的预测结果情况，利用梯度下降方法不断调整上下文词的向量。训练完成后，每个词都作为中心词遍历了一遍，将上下文中的词向量进行调整，从而获取整个文本中所有词的向量；</p><ul><li>$SG（Skip-Gram）$</li></ul><p><img src="https://upload-images.jianshu.io/upload_images/9747350-d0bcc6122c16e84f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="SG模型结构图"></p><p>  给定中心词，然后预测上下文中的词。从而利用上下文中的词的预测结果情况，利用梯度下降法不断调整中心词的词向量，最后文本遍历完一遍之后，就得到了所有词的词向量；</p><ul><li><p>$CBOW$和$SG$的比较</p><p>两者均为三层神经网络（输入层、投影层和输出层）。$SG$中，每个词作为中心词时，是一对多的情况，多个上下文中的词对一个中心词进行“训练”，然后得出较准确地中心词的向量结果，这样最终的效果更好。$CBOW$中，是多对一的情况，多个上下文中的词从一个中心词处进行“学习”，这样效率更高，速度快，但是最终效果却不如$SG$。此外，在$SG$中，每个词都会受上下文词的影响，每个词作为中心词时，需要进行$K$次训练（$K$为窗口大小），所以经过多次调整将使得词向量相对更准确。$CBOW$预测词数和整个文本中词数几乎相等，每次预测才会进行一次反向传播。</p></li></ul><h2 id="模型优化的方法"><a href="#模型优化的方法" class="headerlink" title="模型优化的方法"></a>模型优化的方法</h2><ul><li>分层$Softmax$</li></ul><p><img src="https://upload-images.jianshu.io/upload_images/9747350-2290cc6e612aca53.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="用于分层softmax的二叉树示例"></p><p>  用于计算$softmax$的方法，用二叉树（根据类标频数构造的霍夫曼树）来表示词汇表中的所有单词。如上图，其中，白色节点表示词汇表中的所有单词，而黑色节点则表示隐节点。其中$V$个单词存储于二叉树的叶子节点单元，而对于每个叶子节点，都有一条唯一的路径可以从根节点达到该叶子节点，这条路径用于计算该叶子节点所代表的单词的概率。在这个模型中，不存在单词的输出向量，而是$V-1$个隐节点中都有一个输出向量$v ^`_{n(w,j)}$，单词作为输出词的概率被定义为：</p><p>$$p(w=w_O)=\prod ^{L(w)-1}<em>{j=1}\sigma([[n(w,j+1)=ch(n(w,j))]].{v^`</em>{n(w,j)}}^Th)$$</p><p>其中，$ch(n)$是节点$n$的左侧子节点，$v^`<em>{n(w,j)}$是隐节点$n(w,j)$的向量表示（即“输出向量”）。而$h$则是隐藏层的输出值（SG模型中，$h=v</em>{wi}$；CBOW模型中，$h=\frac{1}{C}\sum_{c=1}^C v_{w_c}$），$[[x]]$则为一个特殊函数，其定义如下：</p><p>$$[[x]]=\begin{cases}1\   \ ,if\ x\ is\ true\-1\ ,\ others\end{cases}$$</p><ul><li><p>负采样技术</p><p>为解决数量过于庞大的输出向量的更新问题，于是在更新时不更新所有向量，而只更新他们的一个样本。正样本应该出现在我们的样本中，此外也需要加入几个单词作为负样本。而在采样的过程中，我们需要任意指定一个总体的概率分布，这个分布就叫做噪声分布，标记为$P_n(w)$。在$word2vec$中，作者用一个定义好的后多项分布的负采样形式取代简化的训练目标，从而产生高质量的嵌入：</p></li></ul><p>$$E=-log\sigma({v^<code>_{w_O}}^Th)-\sum_{w_j\in W_{neg}}log\sigma(-{v^</code>_{w_j}}^Th)$$</p><p>其中，$w_O$是正样本（即输出单词），$v^`<em>{w_O}$是词向量。而$h$则是隐藏层的输出值（SG模型中，$h=v</em>{wi}$；CBOW模型中，$h=\frac{1}{C}\sum_{c=1}^C v_{w_c}$）。$W_{neg}={w_j|j=1,…,K}$是从$P_n(w)$中采样得到的单词集合，即负样本。</p><h2 id="Glove"><a href="#Glove" class="headerlink" title="$Glove$"></a>$Glove$</h2><ul><li><p>定义</p><p>基于计数和直接预测的方法；</p></li><li><p>目标函数</p></li></ul><p>$$J(\theta)=\frac{1}{2}\sum^W_{i,j=1}f(P_{ij})(u^T_iv_j-logP_{ij})^2$$</p><p>$$X_{final}=U+V$$</p><p>其中，$P_{ij}$是单词$j$出现在单词$i$上下文中的概率，而$f(P_{ij})$则是为了去除噪声而设定的函数。</p><h2 id="如何评价-Embedding"><a href="#如何评价-Embedding" class="headerlink" title="如何评价$Embedding$"></a>如何评价$Embedding$</h2><ul><li><p>内在方式：对特定/中间子任务的评估；</p></li><li><p>外在方式：应用到具体任务中；</p></li></ul><h2 id="fastText-分类"><a href="#fastText-分类" class="headerlink" title="$fastText$分类"></a>$fastText$分类</h2><p>   在文本分类任务中，$fastText$作为一种浅层网络，能取得媲美于深度网络的精度，但是训练时间却比深度网络快许多数量级。一般情况下，用$fastText$进行文本分类的同时也会产生词的$embedding$；</p><ul><li><p>字符级的$n-gram$</p><p>$word2vec$中以词作为原子，为每个词生成一个向量，而忽略词内部形态特征。面对这一问题，$fastText$采用字符级的$n-gram$来表示一个单词。通过这样处理则有两个优点；</p><ol><li>对于低频词，生成的词向量效果更好，其$n-gram$可以与其他词共享；</li><li>对于训练词库外的词，仍然可以构建其词向量，可通过叠加其字符级$n-gram$从而生成向量；</li></ol></li><li><p>模型架构</p></li></ul><p><img src="https://upload-images.jianshu.io/upload_images/9747350-af68bc2de59f4ec8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="fastText模型架构图"></p><p>类似于$word2vec$中的$CBOW$模型，只有输入层、隐藏层、输出层三层。其中，输入为多个单词表示成的向量，输出是一个特定的$target$，隐藏层是对多个词向量的叠加平均。不同的是，$CBOW$的输入是目标词上下文中的词，而$fastText$的输入则是多个单词及其$n-gram$特征。这些特征用于表示单个文档，$CBOW$中输入词的是经过$one-hot$编码过的，输出为目标词；而$fastText$中输入特征则是经$embedding$过的特征，输出是各个文档对应的类标，且采用分层$softmax$优化措施，大大加快了训练速度；</p><ul><li><p>核心思想</p><p>将整篇文档的词及$n-gram$向量叠加平均，从而得到文档向量，然后利用文档向量做多层$softmax$多分类，主要涉及到$n-gram$特征的引入以及分层$Softmax$分类技术；</p></li><li><p>$fastText$样例</p><ul><li><p>主要步骤</p><ol><li>添加输入层（即$embedding$层）；</li><li>添加隐藏层（即投影层）；</li><li>添加输出层（即$softmax$层）；</li><li>指定损失函数、优化器类型、评价指标、编译模型；</li></ol></li></ul></li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> NLP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> NLP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python知识点总结篇(五)</title>
      <link href="/2019/10/02/python-zhi-shi-dian-zong-jie-pian-wu/"/>
      <url>/2019/10/02/python-zhi-shi-dian-zong-jie-pian-wu/</url>
      
        <content type="html"><![CDATA[<h1 id="软件目录结构规范"><a href="#软件目录结构规范" class="headerlink" title="软件目录结构规范"></a>软件目录结构规范</h1><ul><li>目标：<ul><li>提高可读性；</li><li>提高可维护性；</li></ul></li><li>常见结构</li></ul><pre class="line-numbers language-shell"><code class="language-shell">Demo/|-- bin/    #存放项目的一些可执行文件|   |-- demo #可执行程序，启动demo调main.py||-- demo/ #存放项目所有源码，源码中所有模块、包都在此处|   |-- tests/   #存放单元测试代码|   |   |-- __init__.py|   |   |-- test_main.py|   ||   |-- __init__.py  #空文件，有这个文件就是包，没有就是目录|   |-- main.py  #程序主入口||-- docs/  #用于存放一些文档|   |-- conf.py|   |-- abc.rst||--conf/   #配置文件目录||-- setup.py  #安装、部署、打包的脚本|-- requirements.txt   #依赖关系，需要依赖的文件，用于存放软件依赖的外部Python包列表|-- README #项目说明文件<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>README</code>包含内容：<ul><li>项目简介</li><li>功能特性</li><li>环境依赖</li><li>部署步骤</li><li>目录结构描述</li><li>版本内容更新</li><li>常见问题说明</li></ul></li></ul><h1 id="模块及包导入"><a href="#模块及包导入" class="headerlink" title="模块及包导入"></a>模块及包导入</h1><ul><li><code>import</code>本质是路径搜索和搜索路径，导入模块就是把<code>Python</code>文件解释一遍 ，导入包的本质是执行该包下的<code>__init__.py</code>文件；</li></ul><h1 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a>面向对象</h1><ul><li>编程范式：实现一个任务有不同方式，对这些不同编程方式的特点进行归纳总结出的编程方式类别称为编程范式，最重要的是面向对象编程和面向过程编程；</li><li><code>Class</code>类：对一类具有相同属性的对象的抽象集合；</li><li>特性：<ul><li>封装：将实现功能的细节不对外公开；</li><li>继承：代码的重用，分为单继承和多继承；</li><li>多态：允许将父对象设置为一个或多个子对象相等的技术，是为了保证类在继承和派生的时候使用族谱中任一类的某一属性时的正确调用，即就是一种接口，多种实现；</li></ul></li><li>析构函数：<code>def __del__(self):</code>实例释放、销毁时自动执行的函数，常用于一些扫尾工作，例如关闭数据库连接，打开的临时文件等；</li><li>私有属性与方法：在定义的时候在属性或方法名前加上两道下划线<code>__</code>；</li><li>经典类与新式类的继承顺序：<code>Python3.x</code>中经典类和新式类都是广度优先继承，<code>Python2.x</code>中经典类是深度优先，新式类时广度有限继承，新式类:<code>class Demo(object)</code>；</li><li>静态方法：名义上归类管理，实际与类无关，无法访问类或实例中的属性；</li><li>类方法：只能访问类变量，不能访问实例变量；</li><li>属性方法：把一个方法变成一个静态属性，隐藏实现细节； </li><li>反射：通过字符串映射，<code>hasattr(obj, attr_name)</code>：判断一个对象里是否有对应字符串的方法映射，<code>getattr(obj, attr_name)</code>：根据字符串去获取对象中对应方法的内存地址，<code>setattr(obj, 'str', func2)</code>：给对象添加新的属性，<code>delattr(obj，attr_name)</code>：删除对象的属性；</li></ul><h1 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h1><ul><li>格式：</li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">try</span><span class="token punctuation">:</span>    code<span class="token keyword">except</span> except1<span class="token punctuation">:</span>    code<span class="token keyword">except</span> except2<span class="token punctuation">:</span>    code<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token keyword">except</span> Exception<span class="token punctuation">:</span>    code <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>抓错误的时候一定从小的开始抓起，先抓子集，再抓总集，一般不建议一 开始直接抓错误总集；</li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 编程语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python知识点总结篇(四)</title>
      <link href="/2019/10/02/python-zhi-shi-dian-zong-jie-pian-si/"/>
      <url>/2019/10/02/python-zhi-shi-dian-zong-jie-pian-si/</url>
      
        <content type="html"><![CDATA[<h1 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h1><ul><li>特性<ul><li>必须有明确的结束条件；</li><li>每进入深一层递归，问题规模比上层应有所减少；<ul><li>递归效率不高，层次更多会导致栈溢出；</li></ul></li></ul></li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">calc</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span>    <span class="token keyword">if</span> n <span class="token operator">//</span> <span class="token number">2</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> calc<span class="token punctuation">(</span>n <span class="token operator">//</span> <span class="token number">2</span><span class="token punctuation">)</span>calc<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="http://upload-images.jianshu.io/upload_images/9747350-ee3d43b922345c14?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><h1 id="函数式编程"><a href="#函数式编程" class="headerlink" title="函数式编程"></a>函数式编程</h1><ul><li>计算机：在计算机层面，CPU执行的是加减乘除以及各种判断和跳转指令代码，因而汇编是最贴近计算机的语言，越接近计算机底层的语言执行效率越高；</li><li>计算：指数学意义上的计算，越抽象的计算，离计算机硬件越远，效率越低；</li><li>定义：一种抽象程度极高的编程范式，纯粹的函数式编程语言编写的函数没有变量，故对于一个函数，只要输入确定，输出就确定，函数式编程是一种讨论如何编程的方法论，主要思想是把运算过程尽量集成一系列嵌套的函数调用；</li></ul><h1 id="高阶函数"><a href="#高阶函数" class="headerlink" title="高阶函数"></a>高阶函数</h1><ul><li>定义：把其他函数作为参数的函数叫做高阶函数；</li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">add</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> func<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> func<span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">*</span> func<span class="token punctuation">(</span>y<span class="token punctuation">)</span>result <span class="token operator">=</span> add<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> abs<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><img src="http://upload-images.jianshu.io/upload_images/9747350-953e005cfb6c35df?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><h1 id="修饰器"><a href="#修饰器" class="headerlink" title="修饰器"></a>修饰器</h1><ul><li>原则：<ul><li>不能修改被装修函数的源代码；</li><li>不能修改被装饰函数的调用方式；</li></ul></li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># --*--coding:utf-8--*--</span><span class="token comment" spellcheck="true">#! /usr/bin/python3</span>user<span class="token punctuation">,</span> passwd <span class="token operator">=</span> <span class="token string">'k'</span><span class="token punctuation">,</span> <span class="token string">'12345'</span><span class="token keyword">def</span> <span class="token function">auth</span><span class="token punctuation">(</span>func<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">wrapper</span><span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>        username <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token string">'username:'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span>        password <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token string">'passwd:'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> user <span class="token operator">==</span> username <span class="token operator">and</span> passwd <span class="token operator">==</span> password<span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'passed'</span><span class="token punctuation">)</span>            func<span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            exit<span class="token punctuation">(</span><span class="token string">'Invalid username or password.'</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> wrapper<span class="token keyword">def</span> <span class="token function">index</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'welcomt to index page'</span><span class="token punctuation">)</span>@auth<span class="token keyword">def</span> <span class="token function">home</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'welcome to home page'</span><span class="token punctuation">)</span>@auth<span class="token keyword">def</span> <span class="token function">bbs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'welcomt to bbs page'</span><span class="token punctuation">)</span>index<span class="token punctuation">(</span><span class="token punctuation">)</span>home<span class="token punctuation">(</span><span class="token punctuation">)</span>bbs<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="http://upload-images.jianshu.io/upload_images/9747350-733e1b5035d48f76?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><h1 id="迭代器与生成器"><a href="#迭代器与生成器" class="headerlink" title="迭代器与生成器"></a>迭代器与生成器</h1><ul><li>生成器：<code>generator</code>，列表元素按某种算法推算而出，一边循环一边计算的机制，称为生成器，只有在调用时才产生相应数据；</li><li>直接作用域<code>for</code>循环的对象称为可迭代对象，<code>Iterable</code>，使用<code>isinstance()</code>判断一个对象是否为<code>Iterable</code>对象，可用于<code>for</code>循环的数据类型有 以下两类：<ul><li>集合数据类型：<code>list</code>、<code>tuple</code>、<code>dict</code>、<code>set</code>、<code>str</code>等</li><li><code>generator</code>，包括生成器和带<code>yield</code>的可迭代对象；</li></ul></li><li>迭代器： 可以别<code>next()</code>函数调用并不断返回下一个值的对象称为迭代器，他们表示一个惰性计算的序列，<code>Iterator</code>；</li><li>生成对象都是迭代器对象，<code>list</code>、<code>dict</code>、<code>str</code>虽然是可迭代对象，但却不是迭代器，使用<code>iter()</code>函数可将他们从迭代对象转换为迭代器；</li></ul><h1 id="json和pickle数据序列化"><a href="#json和pickle数据序列化" class="headerlink" title="json和pickle数据序列化"></a>json和pickle数据序列化</h1><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># json序列化与反序列化</span><span class="token keyword">import</span> jsoninfo <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token string">'name'</span><span class="token punctuation">:</span><span class="token string">'k'</span><span class="token punctuation">,</span>    <span class="token string">'age'</span><span class="token punctuation">:</span><span class="token number">22</span>    <span class="token string">'sex'</span><span class="token punctuation">:</span><span class="token string">'男'</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true"># 序列化</span>f <span class="token operator">=</span> open<span class="token punctuation">(</span><span class="token string">'test.txt'</span><span class="token punctuation">,</span> <span class="token string">'w'</span><span class="token punctuation">)</span>f<span class="token punctuation">.</span>write<span class="token punctuation">(</span>json<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span>info<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 反序列化</span>f <span class="token operator">=</span> open<span class="token punctuation">(</span><span class="token string">'test.txt'</span><span class="token punctuation">,</span> <span class="token string">'r'</span><span class="token punctuation">)</span>data <span class="token operator">=</span> json<span class="token punctuation">.</span>loads<span class="token punctuation">(</span>f<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>data<span class="token punctuation">[</span><span class="token string">'sex'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>f<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># pickle序列化与反序列化</span><span class="token keyword">import</span> pickleinfo <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token string">'name'</span><span class="token punctuation">:</span><span class="token string">'k'</span><span class="token punctuation">,</span>    <span class="token string">'age'</span><span class="token punctuation">:</span><span class="token number">22</span>    <span class="token string">'sex'</span><span class="token punctuation">:</span><span class="token string">'男'</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true"># 序列化</span>f <span class="token operator">=</span> open<span class="token punctuation">(</span><span class="token string">'test.txt'</span><span class="token punctuation">,</span> <span class="token string">'wb'</span><span class="token punctuation">)</span>f<span class="token punctuation">.</span>write<span class="token punctuation">(</span>pickle<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span>info<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#与下一句作用相同   </span>pickle<span class="token punctuation">.</span>dump<span class="token punctuation">(</span>info<span class="token punctuation">,</span> f<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 反序列化</span>f <span class="token operator">=</span> open<span class="token punctuation">(</span><span class="token string">'test.txt'</span><span class="token punctuation">,</span> <span class="token string">'rb'</span><span class="token punctuation">)</span>data <span class="token operator">=</span> pickle<span class="token punctuation">.</span>loads<span class="token punctuation">(</span>f<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>data<span class="token punctuation">[</span><span class="token string">'sex'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>f<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 编程语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python知识点总结篇(三)</title>
      <link href="/2019/10/02/python-zhi-shi-dian-zong-jie-pian-san/"/>
      <url>/2019/10/02/python-zhi-shi-dian-zong-jie-pian-san/</url>
      
        <content type="html"><![CDATA[<h1 id="文件操作"><a href="#文件操作" class="headerlink" title="文件操作"></a>文件操作</h1><ul><li>对文件操作流程<ul><li>打开文件，得到文件句柄并赋值给一个变量；</li><li>通过句柄对文件进行操作；</li><li>关闭文件；</li></ul></li><li><code>with</code>:自动关闭文件；</li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">with</span> open<span class="token punctuation">(</span><span class="token string">'log'</span><span class="token punctuation">,</span> <span class="token string">'r'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>文件操作之<code>open()</code></li></ul><p><img src="http://upload-images.jianshu.io/upload_images/9747350-e12ee6c817a31b29?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><h1 id="模式匹配与正则表达式"><a href="#模式匹配与正则表达式" class="headerlink" title="模式匹配与正则表达式"></a>模式匹配与正则表达式</h1><ul><li>正则表达式:简称regex，是文本模式的描述方法；</li><li>正则表达式匹配步骤：<ul><li>导入正则表达式模块<code>re</code>；</li><li>用<code>re.compile()</code>函数创建一个<code>Regex</code>对象（记得使用原始字符串）；</li><li>向<code>Regex</code>对象的<code>search()</code>方法传入想要查找的字符串，返回一个<code>Match</code>对象；</li><li>调用<code>Match</code>对象的<code>group()</code>方法，返回实际匹配文本的字符串；</li></ul></li><li>管道：<code>|</code>，用于匹配多个表达式中的一个，匹配多个分组；</li><li>问号：<code>?</code>，实现可选匹配；</li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">import</span> re<span class="token operator">>></span><span class="token operator">></span> batRegex <span class="token operator">=</span> re<span class="token punctuation">.</span>compile<span class="token punctuation">(</span>r<span class="token string">'Bat(wo)?man'</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> mo1 <span class="token operator">=</span> batRegex<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">'The Adventures of Batman.'</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">print</span><span class="token punctuation">(</span>mo1<span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>Batman<span class="token operator">>></span><span class="token operator">></span> mo2 <span class="token operator">=</span> batRegex<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">'The Adventures of Batwoman.'</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">print</span><span class="token punctuation">(</span>mo2<span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>Batwoman<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>星号：<code>*</code>，匹配零次或多次，即星号之前的分组，可以在文本中出现任意次；</li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">import</span> re<span class="token operator">>></span><span class="token operator">></span> batRegex <span class="token operator">=</span> re<span class="token punctuation">.</span>compile<span class="token punctuation">(</span>r<span class="token string">'Bat(wo)*man'</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> mo1 <span class="token operator">=</span> batRegex<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">'The Adventures of Batwowoman'</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">print</span><span class="token punctuation">(</span>mo1<span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>Batwowoman<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>加号：<code>+</code>，匹配一次或多次，加号前面的分组必须”至少出现一次”；</li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">import</span> re<span class="token operator">>></span><span class="token operator">></span> batRegex <span class="token operator">=</span> re<span class="token punctuation">.</span>compile<span class="token punctuation">(</span>r<span class="token string">'Bat(wo)+man'</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> mo1 <span class="token operator">=</span> batRegex<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">'The Adventures of Batwowoman'</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">print</span><span class="token punctuation">(</span>mo1<span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>Batwowoman<span class="token operator">>></span><span class="token operator">></span> mo2 <span class="token operator">=</span> batRegex<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">'The Adventures of Batman'</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">print</span><span class="token punctuation">(</span>mo2 <span class="token operator">==</span> None<span class="token punctuation">)</span><span class="token boolean">True</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>花括号：<code>{ }</code>，匹配特定次数；</li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">import</span> re<span class="token operator">>></span><span class="token operator">></span> batRegex <span class="token operator">=</span> re<span class="token punctuation">.</span>compile<span class="token punctuation">(</span>r<span class="token string">'ha{3}'</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> mo1 <span class="token operator">=</span> batRegex<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">'hahaha'</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">print</span><span class="token punctuation">(</span>mo1<span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>hahaha<span class="token operator">>></span><span class="token operator">></span> mo2 <span class="token operator">=</span> batRegex<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">'haha'</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">print</span><span class="token punctuation">(</span>mo2 <span class="token operator">==</span> None<span class="token punctuation">)</span><span class="token boolean">True</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>findall()</code>方法返回结果：<ul><li>若调用在一个没有分组的正则表达式上，则返回一个匹配字符串的列表，如<code>['123-324-5832', '324-589-0983']</code>；</li><li>若调用在一个有分组的正则表达式上，则返回一个字符串的元组的列表(每个分组对应一个字符串)，如<code>[('123', '453', '4324'), ('343', '654', '3245)]</code>；</li></ul></li><li><code>^xxx</code>：表示字符串必须以<code>xxx</code>开始；</li><li><code>xxx$</code>：表示字符串必须以<code>xxx</code>结尾；</li><li>绝对路径：从根文件夹开始；</li><li>相对路径：相对于程序的当前工作目录；</li><li>读写文件的步骤：<ul><li>调用<code>open()</code>函数，返回一个<code>File</code>对象；</li><li>调用<code>File</code>对象的<code>read()</code>或<code>write()</code>方法；</li><li>调用<code>File</code>对象的<code>close()</code>方法，关闭该文件；</li></ul></li><li>永久删除文件和文件夹：<ul><li><code>os.unlink(path)</code>删除<code>path</code>处的文件；</li><li><code>os.rmdir(path)</code>将删除<code>path</code>处的文件夹，但文件夹必须为空；</li><li><code>shutil.rmtree(path)</code>删除<code>path</code>处的文件夹，包含的所有文件和文件夹都会被删除；</li></ul></li></ul><h1 id="调试"><a href="#调试" class="headerlink" title="调试"></a>调试</h1><ul><li>反向跟踪：Python遇到错误，就会产生错误信息，这些信息包含了出错信息、导致该错误的代码行号，以及导致该错误的函数调用的序列(调用栈)；</li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 编程语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python知识点总结篇(二)</title>
      <link href="/2019/10/02/python-zhi-shi-dian-zong-jie-pian-er/"/>
      <url>/2019/10/02/python-zhi-shi-dian-zong-jie-pian-er/</url>
      
        <content type="html"><![CDATA[<h1 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h1><ul><li>列表：一个值，包含多个字构成的序列，用<code>[  ]</code>括起来，<code>[]</code>是一个空列表，不包含任何值，类似于空字符串，负数下标表示从后边开始，<code>-1</code>表示列表最后一个下标，它是一种可变的数据类型，值可以添加、删除或改变；</li><li><code>+</code>用于连接两个列表并得到一个新列表；<code>*</code>用于一个列表和一个整数，实现列表的复制；<code>del</code>将删除列表中下标处的值；<code>in</code>、<code>not in</code>用于确定一个值是否在列表中；</li><li>多重赋值技巧：变量数目和列表长度必须严格相等，eg；</li></ul><pre class="line-numbers language-python"><code class="language-python">cat <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'fat'</span><span class="token punctuation">,</span> <span class="token string">'black'</span><span class="token punctuation">,</span> <span class="token string">'loud'</span><span class="token punctuation">]</span>size<span class="token punctuation">,</span> color<span class="token punctuation">,</span> disposition <span class="token operator">=</span> cat<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li><code>sort()</code>方法对列表中排序时需注意的3件事：<ul><li><code>sort()</code>方法当场对列表排序；</li><li>不能对既有数字又有字符串值的列表排序；</li><li>对字符串排序时，使用”ASCII 字符顺序”；</li></ul></li><li><code>sort()</code>和<code>sorted()</code>方法的比较：<code>sort(key = None， reverse = False)</code>就地改变列表，<code>sorted(iterable， key = None， reverse = False)</code>返回新的列表，对所有可迭代对象均有效；</li></ul><pre class="line-numbers language-python"><code class="language-python">supplies <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'pens'</span><span class="token punctuation">,</span> <span class="token string">'staplers'</span><span class="token punctuation">,</span> <span class="token string">'flame-throwers'</span><span class="token punctuation">,</span> <span class="token string">'binders'</span><span class="token punctuation">]</span>supplies<span class="token punctuation">.</span>sort<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>supplies<span class="token punctuation">)</span>supplies <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'pens'</span><span class="token punctuation">,</span> <span class="token string">'staplers'</span><span class="token punctuation">,</span> <span class="token string">'flame-throwers'</span><span class="token punctuation">,</span> <span class="token string">'binders'</span><span class="token punctuation">]</span>sortedSupplies <span class="token operator">=</span> sorted<span class="token punctuation">(</span>supplies<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>supplies<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>sortedSupplies<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="http://upload-images.jianshu.io/upload_images/9747350-4bc133ea743e4570?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><ul><li><code>\</code>：续行字符；</li><li>元组：使用<code>( )</code>，和字符串一样是不可变的，值不能被修改、添加或删除；</li><li>序列与元组的转换：<code>list()</code>将元组转换为序列，<code>tuple()</code>将序列转换为元组；</li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#序列转元组</span>pets <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'K'</span><span class="token punctuation">,</span> <span class="token string">'M'</span><span class="token punctuation">,</span> <span class="token string">'N'</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>tuple<span class="token punctuation">(</span>pets<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#元组转序列</span>pets <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">'K'</span><span class="token punctuation">,</span> <span class="token string">'M'</span><span class="token punctuation">,</span> <span class="token string">'N'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>list<span class="token punctuation">(</span>pets<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="http://upload-images.jianshu.io/upload_images/9747350-f9bfd1df251c6e3f?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><ul><li>列表的引用：列表赋给一个变量时，不直接保存到变量，而是将列表的“引用”赋给了该变量，所以当改变变量的值时，原列表的值也要随着改变；</li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> spam <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token operator">>></span><span class="token operator">></span> chees <span class="token operator">=</span> spam<span class="token operator">>></span><span class="token operator">></span> cheese<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'Hello'</span><span class="token operator">>></span><span class="token operator">></span> spam<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">'Hello'</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token operator">>></span><span class="token operator">></span> cheese<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">'Hello'</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>copy()</code>和<code>deepcopy()</code>：处理列表或序列时，若不希望改动影响原来的列表或字典，则使用<code>copy()</code>函数，若是要复制的列表中包含了列表，则使用<code>deepcopy()</code>代替；</li></ul><h1 id="字典和结构化数据"><a href="#字典和结构化数据" class="headerlink" title="字典和结构化数据"></a>字典和结构化数据</h1><ul><li>字典：<code>{key:value}</code>；</li><li>字典与列表：列表是有序的，而字典是无序的，因此字典不可像列表一样切片；</li><li><code>keys()</code>、<code>values()</code>、<code>items()</code>：分别对应于字典的键、值和键-值对；</li><li><code>get(要取得其值的键， 键不存在时返回的备用值)</code>：</li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> picnicItems <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'apples'</span><span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token string">'cpus'</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">}</span><span class="token operator">>></span><span class="token operator">></span> <span class="token string">'I am bringing '</span> <span class="token operator">+</span> str<span class="token punctuation">(</span>picnicItems<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'cups'</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">' cups.'</span>I am bringing <span class="token number">2</span> cups<span class="token punctuation">.</span><span class="token operator">>></span><span class="token operator">></span> <span class="token string">'I an bringing '</span> <span class="token operator">+</span> str<span class="token punctuation">(</span>picnicItems<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'eggs'</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">' cups.'</span>I am bringing <span class="token number">0</span> eggs<span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>setdefault(要检查的键， 检查的键不存在时设置的值)</code>：第一次调用之后即存在，再次调用不会改变第一次赋给的键值；</li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> spam <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'name'</span><span class="token punctuation">:</span><span class="token string">'Pooka'</span><span class="token punctuation">,</span> <span class="token string">'age'</span><span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">}</span><span class="token operator">>></span><span class="token operator">></span> spam<span class="token punctuation">.</span>setdefault<span class="token punctuation">(</span><span class="token string">'color'</span><span class="token punctuation">,</span> <span class="token string">'black'</span><span class="token punctuation">)</span><span class="token string">'black'</span><span class="token operator">>></span><span class="token operator">></span> spam<span class="token punctuation">{</span><span class="token string">'color'</span><span class="token punctuation">:</span><span class="token string">'black'</span><span class="token punctuation">,</span> <span class="token string">'age'</span><span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token string">'name'</span><span class="token punctuation">:</span><span class="token string">'Pooka'</span><span class="token punctuation">}</span><span class="token operator">>></span><span class="token operator">></span> spam<span class="token punctuation">.</span>setdefault<span class="token punctuation">(</span><span class="token string">'color'</span><span class="token punctuation">,</span> <span class="token string">'white'</span><span class="token punctuation">)</span><span class="token string">'black'</span><span class="token operator">>></span><span class="token operator">></span> spam<span class="token punctuation">{</span><span class="token string">'color'</span><span class="token punctuation">:</span><span class="token string">'black'</span><span class="token punctuation">,</span> <span class="token string">'age'</span><span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token string">'name'</span><span class="token punctuation">:</span><span class="token string">'Pooka'</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>集合：无序、不重复的数据组合，主要作用为：</p><ul><li>去重， 把一个列表变成集合，就自动去重了；</li><li>关系测试，测试两组数据之前的交集、差集、并集等关系；</li></ul></li><li><p>格式输出：<code>pprint()</code>和<code>pformat()</code>；</p></li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> pprintinfo <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'name'</span><span class="token punctuation">:</span><span class="token string">'K'</span><span class="token punctuation">,</span> <span class="token string">'age'</span><span class="token punctuation">:</span> <span class="token number">23</span><span class="token punctuation">}</span>pprint<span class="token punctuation">.</span>pprint<span class="token punctuation">(</span>info<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#下列这句和上句结果相同</span><span class="token comment" spellcheck="true">#print(pprint.pformat(info))</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="http://upload-images.jianshu.io/upload_images/9747350-c50ab9f1cac8399b?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><ul><li>嵌套的字典和列表</li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#嵌套的字典和列表</span>allGuests <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'Alice'</span><span class="token punctuation">:</span><span class="token punctuation">{</span><span class="token string">'apple'</span><span class="token punctuation">:</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token string">'pretzels'</span><span class="token punctuation">:</span><span class="token number">19</span><span class="token punctuation">}</span><span class="token punctuation">,</span>             <span class="token string">'Bob'</span><span class="token punctuation">:</span><span class="token punctuation">{</span><span class="token string">'apple'</span><span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">'sandwiches'</span><span class="token punctuation">:</span><span class="token number">4</span><span class="token punctuation">}</span><span class="token punctuation">,</span>             <span class="token string">'Carol'</span><span class="token punctuation">:</span><span class="token punctuation">{</span><span class="token string">'cups'</span><span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token string">'apple pies'</span><span class="token punctuation">:</span><span class="token number">4</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">def</span> <span class="token function">totalBrought</span><span class="token punctuation">(</span>guests<span class="token punctuation">,</span> item<span class="token punctuation">)</span><span class="token punctuation">:</span>    numberBrought <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> k<span class="token punctuation">,</span> v <span class="token keyword">in</span> guests<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        numberBrought <span class="token operator">+=</span> v<span class="token punctuation">.</span>get<span class="token punctuation">(</span>item<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> numberBrought<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Apple = '</span> <span class="token operator">+</span> str<span class="token punctuation">(</span>totalBrought<span class="token punctuation">(</span>allGuests<span class="token punctuation">,</span> <span class="token string">'apple'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="http://upload-images.jianshu.io/upload_images/9747350-37507471f55de34c?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><h1 id="字符串操作"><a href="#字符串操作" class="headerlink" title="字符串操作"></a>字符串操作</h1><ul><li>字符串既可以用单引号，也可以用双引号开始和结束；</li><li>转义字符：<code>\</code>；</li><li>原始字符串：在字符串开始的引号前加上<code>r</code>，原始字符串完全忽略所有的转义字符，打印出字符串中所有的倒斜杠；</li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">print</span><span class="token punctuation">(</span>r<span class="token string">'That is Carol\'s cat.'</span><span class="token punctuation">)</span>That <span class="token keyword">is</span> Carol\'s cat<span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>多行字符串：多行字符串的起止是3个单引号或3个双引号，三重引号之间的所有引号、制表符或换行，都被认为是字符串的一部分，此时缩进规则不适用；</li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token triple-quoted-string string">'''Dear Alice,Eve's cat has been arrested for catnapping, cat burglary, and extortion.Sincerely,Bob'''</span><span class="token punctuation">)</span>Dear Alice<span class="token punctuation">,</span>Eve's cat has been arrested <span class="token keyword">for</span> catnapping<span class="token punctuation">,</span> cat burglary<span class="token punctuation">,</span> <span class="token operator">and</span> extortion<span class="token punctuation">.</span>Sincerely<span class="token punctuation">,</span>Bob<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>文本对齐：左对齐<code>ljust()</code>，右对齐<code>rjust()</code>，居中<code>center()</code>；</p></li><li><p>向计算机剪贴板发送或接受文本，需要用到<code>pyperclip</code>模块中的<code>copy()</code>和<code>paste()</code>函数；</p></li><li><p>字符串的格式化</p></li></ul><p><img src="http://upload-images.jianshu.io/upload_images/9747350-e4b9f712556f0d13?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 编程语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python知识点总结篇(一)</title>
      <link href="/2019/10/02/python-zhi-shi-dian-zong-jie-pian-yi/"/>
      <url>/2019/10/02/python-zhi-shi-dian-zong-jie-pian-yi/</url>
      
        <content type="html"><![CDATA[<h1 id="Python基础"><a href="#Python基础" class="headerlink" title="Python基础"></a>Python基础</h1><h3 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h3><ul><li><p>变量类型：</p><ul><li>1、数字型<ul><li>整形：<code>int</code>；</li><li>浮点型：<code>float</code>；</li><li>布尔型：<code>bool</code>，<code>True</code>和<code>False</code>；</li><li>复数型：<code>complex</code>；</li></ul></li><li>2、非数字型<ul><li>字符串；</li><li>列表；</li><li>元祖；</li><li>字典；</li></ul></li></ul></li><li><p>不可变类型：内存中数据不允许被修改；</p><ul><li>数字类型<code>int、bool、float、complex，long(2, x)</code>；</li><li>字符串<code>str</code>；</li><li>元祖<code>tuple</code>；</li></ul></li><li><p>可变类型：内存中数据可修改；</p><ul><li>列表<code>list</code>；</li><li>字典<code>dict</code>；</li></ul></li><li><p>变量命名规则：</p><ul><li>只能是一个词；</li><li>只能包含字母、数字和下划线；</li><li>不能以数字开头；<h3 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h3></li></ul></li><li><p><code>**</code>：代表指数，eg：<code>2 ** 3 = 8</code>;</p></li><li><p><code>/</code>：代表除法，eg：<code>22 / 8 = 2.75</code>；</p></li><li><p><code>//</code>：代表整除/商数取整，eg：<code>22 / 8 = 2</code>；</p></li><li><p><code>*</code>：用于两个整形或浮点型值时，表示乘法，但用于字符串值和一个整形值时，它则变成了’字符串复制’操作符；</p></li><li><p>交互式环境窗口与文件编辑器窗口区别：</p><ul><li>交互式环境窗口总是有<code>&gt;&gt;&gt;</code>提示符；</li><li>文件编辑器窗口没有<code>&gt;&gt;&gt;</code>提示符；</li></ul></li><li><p>注释：</p><ul><li>单行注释：<code>#这是单行注释；</code></li><li>多行注释：用三个单引号<code>'''</code>或者三个双引号 <code>"""</code>将注释括起来;</li></ul></li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token triple-quoted-string string">'''这是多行注释；'''</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token triple-quoted-string string">"""这是多行注释;"""</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>虽然数字的字符串值被认为与整形值和浮点型值完全不同，但整形值可以与浮点值相等，eg：</li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span><span class="token number">42</span> <span class="token operator">==</span> <span class="token number">42.0</span><span class="token boolean">True</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li><p><code>#!</code>：常用于Unix系统脚本中的第一行开头使用，用于知名执行这个脚本文件的解释程序；</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#! /usr/bin/python3</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>运算符优先级</p></li></ul><p><img src="http://upload-images.jianshu.io/upload_images/9747350-b78a0a465d201b03?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><ul><li>Python保留字</li></ul><p><img src="http://upload-images.jianshu.io/upload_images/9747350-5536bb66a39b6a0c?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><ul><li>数据类型转换</li></ul><p><img src="http://upload-images.jianshu.io/upload_images/9747350-3686452f98e02486?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><ul><li>正负无穷</li></ul><pre class="line-numbers language-python"><code class="language-python">float<span class="token punctuation">(</span><span class="token string">'inf'</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#正无穷</span>float<span class="token punctuation">(</span><span class="token string">'-inf'</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#负无穷</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>利用<code>inf</code>乘以<code>0</code>得到一个<code>not-a-number(NaN)</code>，<code>NaN</code>与<code>inf</code>的区别：<code>inf</code>数的<code>significant</code>部分为<code>0</code>，而<code>NaN</code>数的<code>significant</code>部分部位<code>0</code>；</li></ul><h1 id="控制流"><a href="#控制流" class="headerlink" title="控制流"></a>控制流</h1><ul><li><p>布尔值：<code>Boolean</code>，只有<code>True</code>和<code>False</code>；</p></li><li><p>与<code>and</code>、或<code>or</code>、非<code>not</code>；</p></li><li><p>控制流的元素：</p><ul><li>条件；</li><li>代码块，代码块3条规则：<ul><li>缩进增加时，代码块开始；</li><li>代码块可以包含其他代码块；</li><li>缩进减少为零，或减少为外面包围代码块的缩进，代码块就结束；</li></ul></li></ul></li><li><p>导入模块代码所包含的部分：</p><ul><li>import关键字；</li><li>模块名；</li><li>可选的更多模块名称，之间用逗号隔开；</li></ul></li></ul><h1 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h1><ul><li>None值，表示没有值，是NoneType数据类型的唯一值，print()的返回值即为None，</li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> spam <span class="token operator">=</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'hello'</span><span class="token punctuation">)</span>hello<span class="token operator">>></span><span class="token operator">></span> None <span class="token operator">==</span> spam<span class="token boolean">True</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>函数三大优点</p><ul><li>代码重用；</li><li>保持一致性；</li><li>可扩展性；</li></ul></li><li><p>过程：过程就是简单特殊无返回值的函数；</p></li><li><p>函数返回值：</p><ul><li>返回值数 = 0：返回<code>None</code>；</li><li>返回值数 = 1：返回<code>object</code>；</li><li>返回值数 &gt; 1：返回<code>tuple</code>；</li></ul></li><li><p>默认参数</p><ul><li>特点：调用时，默认参数非必须传递；</li><li>参数组： </li></ul></li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#传递多个参数，返回的参数组是一个元组</span><span class="token keyword">def</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> test<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 参数组返回的是字典</span><span class="token keyword">def</span> <span class="token function">test2</span><span class="token punctuation">(</span><span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>kwargs<span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> test2<span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">'k'</span><span class="token punctuation">,</span> age <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">,</span> sex <span class="token operator">=</span> <span class="token string">'M'</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token string">'name'</span><span class="token punctuation">:</span><span class="token string">'k'</span><span class="token punctuation">,</span> <span class="token string">'age'</span><span class="token punctuation">:</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token string">'sex'</span><span class="token punctuation">:</span><span class="token string">'M'</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>调用函数时，实质上传递的是实参保存数据的引用，而不是实参保存的数据；</p></li><li><p>位置参数和关键字：标准调用与形参位置一一对应；关键字调用无序固定；关键字参数必须在位置参数后边；</p></li><li><p>函数传递的参数</p><ul><li>若是不可变类型：只要针对参数使用了赋值语句，函数内部会修改局部变量的引用，但不会对外部变量的引用造成影响；</li><li>若是可变类型：在函数内部使用方法修改参数内容时，同时也会对外部的数据造成影响，随着函数内部参数内容改变而改变；</li><li>当参数是列表时，使用<code>+=</code>不是进行相加再赋值的操作，本质上是调用列表的<code>extend</code>方法；</li></ul></li><li><p>缺省参数注意点</p><ul><li>缺省参数的定义位置在参数列表末尾；</li><li>若由多个缺省参数，需要指定参数名；</li></ul></li><li><p>多值参数</p><ul><li>参数前有一个<code>*</code>可接收元祖，常命名为<code>*args</code>；</li><li>参数前有两个<code>*</code>可接受字典，常命名为<code>**kwargs</code>；</li></ul></li><li><p>元祖与字典的拆包</p><ul><li>要将一个元祖变量直接传递给<code>args</code>，则在元祖变量前增加一个<code>*</code>；</li><li>要将一个字典变量直接传递给<code>kwargs</code>，则在字典变量前增加两个<code>**</code>；</li></ul></li><li><p>局部和全局作用域</p><ul><li>在被调用函数内赋值的变元和变量，属于该函数的“局部作用域”，处于其中的变量称为”局部变量“，在所有函数之外赋，值的变量，属于“全局作用域”，处于其中的变量为”全局变量“。</li><li>局部变量不能在全局作用域内使用；</li><li>局部作用域不能使用其他局部作用域内的变量；</li><li>全局变量可以在局部作用域中读取；</li></ul></li><li><p>global语句</p><ul><li>通过使用global语句，在函数内修改全局变量；</li></ul></li></ul><pre class="line-numbers language-python"><code class="language-python">eggs <span class="token operator">=</span> <span class="token string">'global'</span><span class="token keyword">def</span> <span class="token function">spam</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">global</span> eggs    eggs <span class="token operator">=</span> <span class="token string">'spam'</span>spam<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>eggs<span class="token punctuation">)</span>    <span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span>spam<span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>除了字符串和整数不能在函数中改变它的值之外，其他的数据类型如列表、字典、集合等都能够通过函数改变它们的值；</li><li>区分一个变量是处于局部作用域还是全局作用域的4条法则：<ul><li>若变量在全局作用于中使用(即在所有函数之外)，则为全局变量；</li><li>若在一个函数中，有针对该变量的global语句，则为全局变量；</li><li>如果变量用于函数中的赋值语句，则为局部变量；</li><li>若变量没有用于复制语句中，则为全局变量；</li></ul></li><li>异常处理：错误可由<code>try</code>和<code>except</code>语句处理；</li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">spam</span><span class="token punctuation">(</span>divideBy<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token number">43</span> <span class="token operator">/</span> divideBy    <span class="token keyword">except</span> ZeroDivisionError<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Error:Invalid argument.'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>小程序：猜数字</li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#小程序：猜数字,不断循环，直到你猜出这个数</span>guessNumber <span class="token operator">=</span> random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"I'm thinking a number between 1 and 100."</span><span class="token punctuation">)</span><span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Take a guess.'</span><span class="token punctuation">)</span>    guess <span class="token operator">=</span> int<span class="token punctuation">(</span>input<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> guess <span class="token operator">></span> guessNumber<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"It's too high"</span><span class="token punctuation">)</span>    <span class="token keyword">elif</span> guess <span class="token operator">&lt;</span> guessNumber<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"It's to low"</span><span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Congratulations, you win."</span><span class="token punctuation">)</span>        <span class="token keyword">break</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="http://upload-images.jianshu.io/upload_images/9747350-af98aecc1fad44d5?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><ul><li>Collatz序列</li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#Collatz序列</span><span class="token keyword">def</span> <span class="token function">collatz</span><span class="token punctuation">(</span>number<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>number <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> number <span class="token operator">/</span> <span class="token number">2</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> number <span class="token operator">*</span> <span class="token number">3</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Input a number.'</span><span class="token punctuation">)</span><span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>    <span class="token keyword">global</span> number1    <span class="token keyword">try</span><span class="token punctuation">:</span>        number1 <span class="token operator">=</span> int<span class="token punctuation">(</span>input<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">except</span> ValueError<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Please input a number'</span><span class="token punctuation">)</span>        <span class="token keyword">continue</span>    <span class="token keyword">if</span> collatz<span class="token punctuation">(</span>number1<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">1</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>int<span class="token punctuation">(</span>collatz<span class="token punctuation">(</span>number1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>int<span class="token punctuation">(</span>collatz<span class="token punctuation">(</span>number1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">break</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="http://upload-images.jianshu.io/upload_images/9747350-e71512c269ebf129?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 编程语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python3经典100例（④）</title>
      <link href="/2019/10/02/python3-jing-dian-100-li/"/>
      <url>/2019/10/02/python3-jing-dian-100-li/</url>
      
        <content type="html"><![CDATA[<h3 id="实例16"><a href="#实例16" class="headerlink" title="实例16"></a>实例16</h3><ul><li><p>题目：输出指定格式的日期；</p></li><li><p>代码：</p></li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/env python</span><span class="token comment" spellcheck="true"># -*- coding: utf-8 -*-</span><span class="token comment" spellcheck="true"># @Time    : 2019/3/5 22:47</span><span class="token comment" spellcheck="true"># @Author  : cunyu</span><span class="token comment" spellcheck="true"># @Site    : cunyu1943.github.io</span><span class="token comment" spellcheck="true"># @File    : sixteen.py</span><span class="token comment" spellcheck="true"># @Software: PyCharm</span><span class="token keyword">import</span> datetime<span class="token keyword">if</span> __name__<span class="token operator">==</span><span class="token string">'__main__'</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 输出当前日期</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>datetime<span class="token punctuation">.</span>date<span class="token punctuation">.</span>today<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 创建日期对象</span>    Z_Birth <span class="token operator">=</span> datetime<span class="token punctuation">.</span>date<span class="token punctuation">(</span><span class="token number">1994</span><span class="token punctuation">,</span><span class="token number">11</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>Z_Birth<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 指定格式输出</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>Z_Birth<span class="token punctuation">.</span>strftime<span class="token punctuation">(</span><span class="token string">'%m/%d/%Y'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 日期替换</span>    Z_Birth <span class="token operator">=</span> Z_Birth<span class="token punctuation">.</span>replace<span class="token punctuation">(</span>year<span class="token operator">=</span>Z_Birth<span class="token punctuation">.</span>year<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>Z_Birth<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 日期运算</span>    Next_Z_Birth <span class="token operator">=</span> Z_Birth <span class="token operator">+</span> datetime<span class="token punctuation">.</span>timedelta<span class="token punctuation">(</span>days<span class="token operator">=</span><span class="token number">366</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>Next_Z_Birth<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>结果：</li></ul><p><img src="http://upload-images.jianshu.io/upload_images/9747350-cc4821e2ec692ee3?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><h3 id="实例17"><a href="#实例17" class="headerlink" title="实例17"></a>实例17</h3><ul><li><p>题目：输入一行字符，分别统计出其中英文字母、空格、数字和其它字符的个数；</p></li><li><p>代码：</p></li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/env python</span><span class="token comment" spellcheck="true"># -*- coding: utf-8 -*-</span><span class="token comment" spellcheck="true"># @Time    : 2019/3/6 21:37</span><span class="token comment" spellcheck="true"># @Author  : cunyu</span><span class="token comment" spellcheck="true"># @Site    : cunyu1943.github.io</span><span class="token comment" spellcheck="true"># @File    : seventeen.py</span><span class="token comment" spellcheck="true"># @Software: PyCharm</span><span class="token keyword">import</span> strings <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token string">'请输入字符串:\n'</span><span class="token punctuation">)</span>num_letter <span class="token operator">=</span> <span class="token number">0</span>num_space <span class="token operator">=</span> <span class="token number">0</span>num_digit <span class="token operator">=</span> <span class="token number">0</span>num_other <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>isspace<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        num_space <span class="token operator">+=</span> <span class="token number">1</span>    <span class="token keyword">elif</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>isdigit<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        num_digit <span class="token operator">+=</span> <span class="token number">1</span>    <span class="token keyword">elif</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>isalpha<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        num_letter <span class="token operator">+=</span> <span class="token number">1</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        num_other <span class="token operator">+=</span> <span class="token number">1</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'character: '</span><span class="token punctuation">,</span> num_letter<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'space: '</span><span class="token punctuation">,</span> num_space<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'digit: '</span><span class="token punctuation">,</span> num_digit<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'other: '</span><span class="token punctuation">,</span> num_other<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>结果：</li></ul><p><img src="http://upload-images.jianshu.io/upload_images/9747350-eaa729e05291dade?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><h3 id="实例18"><a href="#实例18" class="headerlink" title="实例18"></a>实例18</h3><ul><li><p>题目：求s=a+aa+aaa+aaaa+aa…a的值，其中a是一个数字。例如2+22+222+2222+22222(此时共有5个数相加)，几个数相加由键盘控制；</p></li><li><p>代码：</p></li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/env python</span><span class="token comment" spellcheck="true"># -*- coding: utf-8 -*-</span><span class="token comment" spellcheck="true"># @Time    : 2019/3/6 21:46</span><span class="token comment" spellcheck="true"># @Author  : cunyu</span><span class="token comment" spellcheck="true"># @Site    : cunyu1943.github.io</span><span class="token comment" spellcheck="true"># @File    : eighteen.py</span><span class="token comment" spellcheck="true"># @Software: PyCharm</span>num <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token string">'输入重复的数字:\n'</span><span class="token punctuation">)</span>times <span class="token operator">=</span> int<span class="token punctuation">(</span>input<span class="token punctuation">(</span><span class="token string">'你要重复的次数:\n'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>answer <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>times<span class="token punctuation">)</span><span class="token punctuation">:</span>    answer <span class="token operator">+=</span> int<span class="token punctuation">(</span>num<span class="token punctuation">)</span>    num <span class="token operator">+=</span> num<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'结果为: '</span><span class="token punctuation">,</span> answer<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>结果：</li></ul><p><img src="http://upload-images.jianshu.io/upload_images/9747350-53634637ac8daccc?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><h3 id="实例19"><a href="#实例19" class="headerlink" title="实例19"></a>实例19</h3><ul><li><p>题目：一个数如果恰好等于它的因子之和，这个数就称为”完数”。例如6=1＋2＋3.编程找出1000以内的所有完数；</p></li><li><p>代码：</p></li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/env python</span><span class="token comment" spellcheck="true"># -*- coding: utf-8 -*-</span><span class="token comment" spellcheck="true"># @Time    : 2019/3/6 21:57</span><span class="token comment" spellcheck="true"># @Author  : cunyu</span><span class="token comment" spellcheck="true"># @Site    : cunyu1943.github.io</span><span class="token comment" spellcheck="true"># @File    : nineteen.py</span><span class="token comment" spellcheck="true"># @Software: PyCharm</span><span class="token keyword">for</span> num <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1001</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> num<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> num <span class="token operator">%</span> i <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>            arr<span class="token punctuation">.</span>append<span class="token punctuation">(</span>i<span class="token punctuation">)</span>    <span class="token keyword">if</span> sum<span class="token punctuation">(</span>arr<span class="token punctuation">)</span> <span class="token operator">==</span> num<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>num<span class="token punctuation">,</span> arr<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>结果：</li></ul><p><img src="http://upload-images.jianshu.io/upload_images/9747350-5690914b830790d8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><h3 id="实例20"><a href="#实例20" class="headerlink" title="实例20"></a>实例20</h3><ul><li><p>题目：一球从100米高度自由落下，每次落地后反跳回原高度的一半；再落下，求它在第10次落地时，共经过多少米？第10次反弹多高？</p></li><li><p>代码：</p></li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/env python</span><span class="token comment" spellcheck="true"># -*- coding: utf-8 -*-</span><span class="token comment" spellcheck="true"># @Time    : 2019/3/6 22:10</span><span class="token comment" spellcheck="true"># @Author  : cunyu</span><span class="token comment" spellcheck="true"># @Site    : cunyu1943.github.io</span><span class="token comment" spellcheck="true"># @File    : 20th.py</span><span class="token comment" spellcheck="true"># @Software: PyCharm</span><span class="token comment" spellcheck="true"># 初始距离</span>distance <span class="token operator">=</span> <span class="token number">100</span>total <span class="token operator">=</span> <span class="token number">0</span>total <span class="token operator">+=</span> distance<span class="token comment" spellcheck="true"># 第10次落地时，经历了9次弹起到落地</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    distance <span class="token operator">/=</span> <span class="token number">2</span>    total <span class="token operator">+=</span> <span class="token number">2</span> <span class="token operator">*</span> distance<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'总共经过距离: '</span><span class="token punctuation">,</span> total<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'第10次反弹距离: '</span><span class="token punctuation">,</span> distance <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>结果：</p><p><img src="http://upload-images.jianshu.io/upload_images/9747350-ec7441d2113556f5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p></li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 编程语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python3经典100例（③）</title>
      <link href="/2019/10/02/python3-jing-dian-100-li/"/>
      <url>/2019/10/02/python3-jing-dian-100-li/</url>
      
        <content type="html"><![CDATA[<h3 id="实例11"><a href="#实例11" class="headerlink" title="实例11"></a>实例11</h3><ul><li>题目：古典问题：有一对兔子，从出生后第3个月起每个月都生一对兔子，小兔子长到第三个月后每个月又生一对兔子，假如兔子都不死，问每个月的兔子总数为多少？</li><li>分析：可通过定义一个函数，然后利用递归的思想将其实现；</li><li>代码：</li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/python3</span><span class="token comment" spellcheck="true"># -*- coding:utf-8 -*-</span><span class="token comment" spellcheck="true"># @Time    : 2018-10-10 8:49</span><span class="token comment" spellcheck="true"># @Author  : Manu</span><span class="token comment" spellcheck="true"># @Site    : </span><span class="token comment" spellcheck="true"># @File    : rabbit_num.py</span><span class="token comment" spellcheck="true"># @Software: PyCharm</span><span class="token keyword">def</span> <span class="token function">rabbit_num</span><span class="token punctuation">(</span>month<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> month <span class="token operator">==</span> <span class="token number">1</span> <span class="token operator">or</span> month <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token number">1</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> rabbit_num<span class="token punctuation">(</span>month<span class="token number">-2</span><span class="token punctuation">)</span> <span class="token operator">+</span> rabbit_num<span class="token punctuation">(</span>month<span class="token number">-1</span><span class="token punctuation">)</span><span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>    month <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token string">'输入第几个月'</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> month<span class="token punctuation">.</span>isdigit<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        month <span class="token operator">=</span> int<span class="token punctuation">(</span>month<span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'第 %d 个月的兔子数为 %d 对'</span> <span class="token operator">%</span><span class="token punctuation">(</span>month<span class="token punctuation">,</span> rabbit_num<span class="token punctuation">(</span>month<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">elif</span> month <span class="token operator">==</span> <span class="token string">'q'</span><span class="token punctuation">:</span>        <span class="token keyword">break</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'输入错误，请重新输入'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>结果：</li></ul><p><img src="http://upload-images.jianshu.io/upload_images/9747350-829f0e96ac5f27c5?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><h3 id="实例12"><a href="#实例12" class="headerlink" title="实例12"></a>实例12</h3><ul><li>题目：判断101-200之间有多少个素数，并输出所有素数；</li><li>分析：先设置一个标志位默认为<code>False</code>，进入循环判断是否为素数，不为素数则置为<code>True</code>，然后将标志位为<code>False</code>的数输出则为所求素数；</li><li>代码：</li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/python3</span><span class="token comment" spellcheck="true"># -*- coding: utf-8 -*-</span><span class="token comment" spellcheck="true"># @Time    : 2018-10-7 19:06</span><span class="token comment" spellcheck="true"># @Author  : Manu</span><span class="token comment" spellcheck="true"># @Site    : </span><span class="token comment" spellcheck="true"># @File    : prime_number.py</span><span class="token comment" spellcheck="true"># @Software: PyCharm</span><span class="token keyword">import</span> mathflag <span class="token operator">=</span> <span class="token boolean">False</span>count <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">101</span><span class="token punctuation">,</span> <span class="token number">201</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> j <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> int<span class="token punctuation">(</span>math<span class="token punctuation">.</span>sqrt<span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> i <span class="token operator">%</span> j <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>            flag <span class="token operator">=</span> <span class="token boolean">True</span>            <span class="token keyword">break</span>    <span class="token keyword">if</span> flag <span class="token operator">==</span> <span class="token boolean">False</span><span class="token punctuation">:</span>        count <span class="token operator">+=</span> <span class="token number">1</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">'\t'</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> count <span class="token operator">%</span> <span class="token number">5</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    flag <span class="token operator">=</span> <span class="token boolean">False</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>结果：</li></ul><p><img src="http://upload-images.jianshu.io/upload_images/9747350-509812eda6eedad7?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><h3 id="实例13"><a href="#实例13" class="headerlink" title="实例13"></a>实例13</h3><ul><li>题目：打印出所有的”水仙花数”，所谓”水仙花数”是指一个三位数，其各位数字立方和等于该数本身</li><li>分析：对100-1000之内的三位数进行循环，求出这些三位数各自个位、十位、百位上的数，然后将他们的立方和与这个三位数比较，若两者相等则说明这个三位数是水仙花数；</li><li>代码：</li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/python3</span><span class="token comment" spellcheck="true"># -*- coding:utf-8 -*-</span><span class="token comment" spellcheck="true"># @Time    : 2018-10-10 8:25</span><span class="token comment" spellcheck="true"># @Author  : Manu</span><span class="token comment" spellcheck="true"># @Site    : </span><span class="token comment" spellcheck="true"># @File    : narcissistic_num.py</span><span class="token comment" spellcheck="true"># @Software: PyCharm</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'水仙花数列表:'</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    ge <span class="token operator">=</span> i <span class="token operator">%</span> <span class="token number">10</span>    shi <span class="token operator">=</span> i <span class="token operator">//</span> <span class="token number">10</span> <span class="token operator">%</span> <span class="token number">10</span>    bai <span class="token operator">=</span> i <span class="token operator">//</span> <span class="token number">100</span>    <span class="token keyword">if</span> i <span class="token operator">==</span> <span class="token punctuation">(</span>ge <span class="token operator">**</span> <span class="token number">3</span> <span class="token operator">+</span> shi <span class="token operator">**</span> <span class="token number">3</span> <span class="token operator">+</span> bai <span class="token operator">**</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>结果：</li></ul><p><img src="http://upload-images.jianshu.io/upload_images/9747350-2cbc7a644c1b2fd4?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><h3 id="实例14"><a href="#实例14" class="headerlink" title="实例14"></a>实例14</h3><ul><li>题目：将一个正整数分解质因数；</li><li>分析：<ul><li>若这个质数恰等于n，则说明分解质因数的过程结束，打印即可；</li><li>若n!=k，但n能被k整除，则应打印出k的值，并用n除以k的商，作为新的正整数n，重复执行第一步；</li><li>若n不能被k整除，则用k+1作为k的值,重复执行第一步；</li></ul></li><li>代码：</li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/python3</span><span class="token comment" spellcheck="true"># -*- coding:utf-8 -*-</span><span class="token comment" spellcheck="true"># @Time    : 2018-10-8 18:41</span><span class="token comment" spellcheck="true"># @Author  : Manu</span><span class="token comment" spellcheck="true"># @Site    : </span><span class="token comment" spellcheck="true"># @File    : Prime.py</span><span class="token comment" spellcheck="true"># @Software: PyCharm</span><span class="token keyword">def</span> <span class="token function">prime</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>str<span class="token punctuation">(</span>n<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">' = '</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token operator">not</span> isinstance<span class="token punctuation">(</span>n<span class="token punctuation">,</span> int<span class="token punctuation">)</span> <span class="token operator">or</span> n <span class="token operator">&lt;=</span> <span class="token number">0</span> <span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Please input a valid number !'</span><span class="token punctuation">)</span>        exit<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>    <span class="token keyword">elif</span> n <span class="token keyword">in</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span>    <span class="token keyword">while</span> n <span class="token operator">not</span> <span class="token keyword">in</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> index <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> int<span class="token punctuation">(</span>n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> n <span class="token operator">%</span> index <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>                n <span class="token operator">/=</span> index                <span class="token keyword">if</span> n <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>                    <span class="token keyword">print</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span>                <span class="token keyword">else</span> <span class="token punctuation">:</span>                    <span class="token keyword">print</span><span class="token punctuation">(</span>str<span class="token punctuation">(</span>index<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" *"</span><span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">' '</span><span class="token punctuation">)</span>                <span class="token keyword">break</span>num <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token string">'Input the num, enter "q" to quit：'</span><span class="token punctuation">)</span><span class="token keyword">while</span> num <span class="token operator">!=</span> <span class="token string">'q'</span><span class="token punctuation">:</span>    prime<span class="token punctuation">(</span>int<span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">)</span>    num <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token string">'Input the num：'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>结果：</li></ul><p><img src="http://upload-images.jianshu.io/upload_images/9747350-bfce4a76839d3d29?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><h3 id="实例15"><a href="#实例15" class="headerlink" title="实例15"></a>实例15</h3><ul><li>题目：利用条件运算符的嵌套来完成此题：学习成绩&gt;=90分的同学用A表示，60-89分之间的用B表示，60分以下的用C表示；</li><li>分析：输入成绩，判断是否为数字，是数字则判定属于哪个等级，若不是数字怎根据代码设定返回重新输入成绩或者直接退出程序；</li><li>代码：</li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/python3</span><span class="token comment" spellcheck="true"># -*- coding:utf-8 -*-</span><span class="token comment" spellcheck="true"># @Time    : 2018-10-10 8:33</span><span class="token comment" spellcheck="true"># @Author  : Manu</span><span class="token comment" spellcheck="true"># @Site    : </span><span class="token comment" spellcheck="true"># @File    : score_.py</span><span class="token comment" spellcheck="true"># @Software: PyCharm</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'输入成绩查看登记，输入"q"则退出'</span><span class="token punctuation">)</span><span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>    score <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token string">'输入你的成绩:'</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> score<span class="token punctuation">.</span>isdigit<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        score_rank <span class="token operator">=</span> int<span class="token punctuation">(</span>score<span class="token punctuation">)</span> <span class="token operator">//</span> <span class="token number">10</span>        <span class="token keyword">if</span> score_rank <span class="token operator">>=</span> <span class="token number">9</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'A'</span><span class="token punctuation">)</span>        <span class="token keyword">elif</span> score_rank <span class="token operator">>=</span> <span class="token number">6</span> <span class="token operator">and</span> score_rank <span class="token operator">&lt;</span> <span class="token number">9</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'B'</span><span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'C'</span><span class="token punctuation">)</span>    <span class="token keyword">elif</span> score <span class="token operator">==</span> <span class="token string">'q'</span><span class="token punctuation">:</span>        <span class="token keyword">break</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'输入错误，请重新输入！'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>结果：</li></ul><p><img src="http://upload-images.jianshu.io/upload_images/9747350-25a5af86a0f89bef?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 编程语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python3经典100例（②）</title>
      <link href="/2019/10/02/python3-jing-dian-100-li/"/>
      <url>/2019/10/02/python3-jing-dian-100-li/</url>
      
        <content type="html"><![CDATA[<h3 id="实例6"><a href="#实例6" class="headerlink" title="实例6"></a>实例6</h3><ul><li>题目：斐波那契数列；</li><li>分析：利用递归计算斐波那契数列，输入斐波那契数列的n位，调用递归计算出第n位的数列值；</li><li>代码：</li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/python3</span><span class="token comment" spellcheck="true"># -*- coding: utf-8 -*-</span><span class="token comment" spellcheck="true"># @Time    : 2018-10-3 21:10</span><span class="token comment" spellcheck="true"># @Author  : Manu</span><span class="token comment" spellcheck="true"># @Site    : </span><span class="token comment" spellcheck="true"># @File    : fib.py</span><span class="token comment" spellcheck="true"># @Software: PyCharm</span><span class="token keyword">def</span> <span class="token function">fib</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> num <span class="token operator">&lt;=</span> <span class="token number">2</span><span class="token punctuation">:</span>        result <span class="token operator">=</span> <span class="token number">1</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        result <span class="token operator">=</span> fib<span class="token punctuation">(</span>num <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> fib<span class="token punctuation">(</span>num <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> result<span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>    num <span class="token operator">=</span> int<span class="token punctuation">(</span>input<span class="token punctuation">(</span><span class="token string">'num = '</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'斐波那契数列的第 %d 个值是 %d'</span> <span class="token operator">%</span> <span class="token punctuation">(</span>num<span class="token punctuation">,</span> fib<span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>结果：</li></ul><p><img src="http://upload-images.jianshu.io/upload_images/9747350-d28738798db66461?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><h3 id="实例7"><a href="#实例7" class="headerlink" title="实例7"></a>实例7</h3><ul><li>题目：将一个列表的数据复制到另一个列表中；</li><li>分析：Python复制数据有三种方式：直接赋值、浅拷贝、深拷贝；</li><li>代码：</li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/python3</span><span class="token comment" spellcheck="true"># -*- coding: utf-8 -*-</span><span class="token comment" spellcheck="true"># @Time    : 2018-10-4 10:20</span><span class="token comment" spellcheck="true"># @Author  : Manu</span><span class="token comment" spellcheck="true"># @Site    : </span><span class="token comment" spellcheck="true"># @File    : copy.py</span><span class="token comment" spellcheck="true"># @Software: PyCharm</span><span class="token keyword">import</span> copy<span class="token comment" spellcheck="true"># 直接赋值，相当于对象引用，即就是另起一个名字</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'assignment:'</span><span class="token punctuation">)</span>list1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token string">'Manu Ginobili'</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">]</span>list2 <span class="token operator">=</span> list1<span class="token keyword">print</span><span class="token punctuation">(</span>list2<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 浅拷贝(copy)，拷贝父对象，不拷贝子对象</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'copy:'</span><span class="token punctuation">)</span>list1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token string">'Manu Ginobili'</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">]</span>list2 <span class="token operator">=</span> list1<span class="token punctuation">.</span>copy<span class="token punctuation">(</span><span class="token punctuation">)</span>list1<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token number">21</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>list1<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>list2<span class="token punctuation">)</span>list2<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token number">14</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>list1<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>list2<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 深拷贝(deepcopy)，完全拷贝父对象及子对象</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Deepcopy:'</span><span class="token punctuation">)</span>list1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token string">'Manu Ginobili'</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">]</span>list2 <span class="token operator">=</span> copy<span class="token punctuation">.</span>deepcopy<span class="token punctuation">(</span>list1<span class="token punctuation">)</span>list1<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token string">'Duncan'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>list1<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>list2<span class="token punctuation">)</span>list2<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token string">'Paker'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>list1<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>list2<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>结果：</li></ul><p><img src="http://upload-images.jianshu.io/upload_images/9747350-d1c553892cecffd2?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><h3 id="实例8"><a href="#实例8" class="headerlink" title="实例8"></a>实例8</h3><ul><li>题目：输出 9*9 乘法口诀表</li><li>分析：两层循环，将乘法口诀表以左下三角格式打印出</li><li>代码：</li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/python3</span><span class="token comment" spellcheck="true"># -*- coding: utf-8 -*-</span><span class="token comment" spellcheck="true"># @Time    : 2018-10-7 18:38</span><span class="token comment" spellcheck="true"># @Author  : Manu</span><span class="token comment" spellcheck="true"># @Site    : </span><span class="token comment" spellcheck="true"># @File    : multiple.py</span><span class="token comment" spellcheck="true"># @Software: PyCharm</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> j <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'%d * %d = %d\t'</span> <span class="token operator">%</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> j<span class="token punctuation">,</span> i <span class="token operator">*</span> j<span class="token punctuation">)</span><span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">' '</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>结果：</li></ul><p><img src="http://upload-images.jianshu.io/upload_images/9747350-9fd6c8b192d55954?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><h3 id="实例9"><a href="#实例9" class="headerlink" title="实例9"></a>实例9</h3><ul><li>题目：暂停一秒输出；</li><li>分析：调用<code>time</code>模块中的<code>sleep()</code>方法即可；</li><li>代码：</li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/python3</span><span class="token comment" spellcheck="true"># -*- coding: utf-8 -*-</span><span class="token comment" spellcheck="true"># @Time    : 2018-10-7 18:47</span><span class="token comment" spellcheck="true"># @Author  : Manu</span><span class="token comment" spellcheck="true"># @Site    : </span><span class="token comment" spellcheck="true"># @File    : wait1s.py</span><span class="token comment" spellcheck="true"># @Software: PyCharm</span><span class="token keyword">import</span> timespurs <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'Tim Duncan'</span><span class="token punctuation">,</span> <span class="token string">'Manu Ginobili'</span><span class="token punctuation">,</span> <span class="token string">'Tony Paker'</span><span class="token punctuation">]</span><span class="token keyword">for</span> spur <span class="token keyword">in</span> spurs<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>spur<span class="token punctuation">)</span>    time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>结果（打印出结果时会有明显的停顿）：</li></ul><p><img src="http://upload-images.jianshu.io/upload_images/9747350-1b038b59d38049d0?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><h3 id="实例10"><a href="#实例10" class="headerlink" title="实例10"></a>实例10</h3><ul><li>题目：暂停一秒输出，并格式化当前时间；</li><li>分析：使用<code>time</code>模块的<code>strftime()</code>方法实现；</li><li>代码：</li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/python3</span><span class="token comment" spellcheck="true"># -*- coding: utf-8 -*-</span><span class="token comment" spellcheck="true"># @Time    : 2018-10-7 18:54</span><span class="token comment" spellcheck="true"># @Author  : Manu</span><span class="token comment" spellcheck="true"># @Site    : </span><span class="token comment" spellcheck="true"># @File    : wait1s_format.py</span><span class="token comment" spellcheck="true"># @Software: PyCharm</span><span class="token keyword">import</span> time<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'当前时间:'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span>strftime<span class="token punctuation">(</span><span class="token string">"%Y-%m-%d %H:%M:%S %a"</span><span class="token punctuation">,</span> time<span class="token punctuation">.</span>localtime<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'等待一秒后时间:'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span>strftime<span class="token punctuation">(</span><span class="token string">"%Y-%m-%d %H:%M:%S %a"</span><span class="token punctuation">,</span> time<span class="token punctuation">.</span>localtime<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>结果：</li></ul><p><img src="http://upload-images.jianshu.io/upload_images/9747350-ce316d63966da0d1?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 编程语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python3经典100例（①）</title>
      <link href="/2019/10/02/python3-jing-dian-100-li/"/>
      <url>/2019/10/02/python3-jing-dian-100-li/</url>
      
        <content type="html"><![CDATA[<h3 id="实例1"><a href="#实例1" class="headerlink" title="实例1"></a>实例1</h3><ul><li><p>题目：有四个数字：1、2、3、4，能组成多少个互不相同且无重复数字的三位数？各是多少？</p></li><li><p>分析：通过三层循环，将个、十、百位上的数分别循环一次，当其中任意两位相同时，则跳过，当各位上的数都不同时，输出</p></li><li><p>代码：</p></li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/env python</span><span class="token comment" spellcheck="true"># -*- coding: utf-8 -*-</span><span class="token comment" spellcheck="true"># @Time    : 2018-10-3 11:10</span><span class="token comment" spellcheck="true"># @Author  : Manu</span><span class="token comment" spellcheck="true"># @Site    : </span><span class="token comment" spellcheck="true"># @File    : group.py</span><span class="token comment" spellcheck="true"># @Software: PyCharm</span>count <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> j <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> k <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> i <span class="token operator">!=</span> j <span class="token operator">and</span> i <span class="token operator">!=</span> k <span class="token operator">and</span> k <span class="token operator">!=</span> j<span class="token punctuation">:</span>                <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> j<span class="token punctuation">,</span> k<span class="token punctuation">)</span>                count <span class="token operator">+=</span> <span class="token number">1</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"组成的数共有：%d 个"</span> <span class="token operator">%</span> count<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>结果：</li></ul><p><img src="http://upload-images.jianshu.io/upload_images/9747350-a3ea93192c0a4d3e?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><h3 id="实例2"><a href="#实例2" class="headerlink" title="实例2"></a>实例2</h3><ul><li><p>题目：企业发放的奖金根据利润提成。利润(I)低于或等于10万元时，奖金可提10%；利润高于10万元，低于20万元时，低于10万元的部分按10%提成，高于10万元的部分，可提成7.5%；20万到40万之间时，高于20万元的部分，可提成5%；40万到60万之间时高于40万元的部分，可提成3%；60万到100万之间时，高于60万元的部分，可提成1.5%，高于100万元时，超过100万元的部分按1%提成，从键盘输入当月利润I，求应发放奖金总数？</p></li><li><p>分析：进入死循环，然后输入企业利润，然后计算出每一阶段利润内所对应奖金并保存在一个变量中，最后输出保存奖金的变量值即可；</p></li><li><p>代码：</p></li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/env python</span><span class="token comment" spellcheck="true"># -*- coding: utf-8 -*-</span><span class="token comment" spellcheck="true"># @Time    : 2018-10-3 12:10</span><span class="token comment" spellcheck="true"># @Author  : Manu</span><span class="token comment" spellcheck="true"># @Site    : </span><span class="token comment" spellcheck="true"># @File    : bonus.py</span><span class="token comment" spellcheck="true"># @Software: PyCharm</span><span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>    profit <span class="token operator">=</span> int<span class="token punctuation">(</span>input<span class="token punctuation">(</span><span class="token string">"Input the profit"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"利润是 %d 万元"</span> <span class="token operator">%</span> profit<span class="token punctuation">)</span>    <span class="token keyword">if</span> profit <span class="token operator">&lt;=</span> <span class="token number">10</span><span class="token punctuation">:</span>        bonus <span class="token operator">=</span> profit <span class="token operator">*</span> <span class="token number">0.1</span>    <span class="token keyword">elif</span> profit <span class="token operator">></span> <span class="token number">10</span> <span class="token operator">and</span> profit <span class="token operator">&lt;</span> <span class="token number">20</span><span class="token punctuation">:</span>        bonus <span class="token operator">=</span> <span class="token number">10</span> <span class="token operator">*</span> <span class="token number">0.1</span> <span class="token operator">+</span> <span class="token punctuation">(</span>profit <span class="token operator">-</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">0.075</span><span class="token punctuation">;</span>    <span class="token keyword">elif</span> profit <span class="token operator">>=</span> <span class="token number">20</span> <span class="token operator">and</span> profit <span class="token operator">&lt;</span> <span class="token number">40</span><span class="token punctuation">:</span>        bonus <span class="token operator">=</span> <span class="token number">10</span> <span class="token operator">*</span> <span class="token number">0.1</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token number">20</span> <span class="token operator">-</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">0.075</span> <span class="token operator">+</span> <span class="token number">0.05</span> <span class="token operator">*</span> <span class="token punctuation">(</span>profit <span class="token operator">-</span> <span class="token number">20</span><span class="token punctuation">)</span>    <span class="token keyword">elif</span> profit <span class="token operator">>=</span> <span class="token number">40</span> <span class="token operator">and</span> profit <span class="token operator">&lt;</span> <span class="token number">60</span><span class="token punctuation">:</span>        bonus <span class="token operator">=</span> <span class="token number">10</span> <span class="token operator">*</span> <span class="token number">0.1</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token number">20</span> <span class="token operator">-</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">0.075</span> <span class="token operator">+</span> <span class="token number">0.05</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token number">40</span> <span class="token operator">-</span> <span class="token number">20</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">0.03</span> <span class="token operator">*</span> <span class="token punctuation">(</span>profit <span class="token operator">-</span> <span class="token number">40</span><span class="token punctuation">)</span>    <span class="token keyword">elif</span> profit <span class="token operator">>=</span> <span class="token number">60</span> <span class="token operator">and</span> profit <span class="token operator">&lt;</span> <span class="token number">100</span><span class="token punctuation">:</span>        <span class="token number">10</span> <span class="token operator">*</span> <span class="token number">0.1</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token number">20</span> <span class="token operator">-</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">0.075</span> <span class="token operator">+</span> <span class="token number">0.05</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token number">40</span> <span class="token operator">-</span> <span class="token number">20</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">0.03</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token number">60</span> <span class="token operator">-</span> <span class="token number">40</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span>profit <span class="token operator">-</span> <span class="token number">60</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">0.015</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        bonus <span class="token operator">=</span> <span class="token number">10</span> <span class="token operator">*</span> <span class="token number">0.1</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token number">20</span> <span class="token operator">-</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">0.075</span> <span class="token operator">+</span> <span class="token number">0.05</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token number">40</span> <span class="token operator">-</span> <span class="token number">20</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">0.03</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token number">60</span> <span class="token operator">-</span> <span class="token number">40</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token number">100</span> <span class="token operator">-</span> <span class="token number">60</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">0.015</span> <span class="token operator">+</span> <span class="token punctuation">(</span>profit <span class="token operator">-</span> <span class="token number">100</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">0.01</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"奖金是 %f 万元"</span> <span class="token operator">%</span>bonus<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>结果：</li></ul><p><img src="http://upload-images.jianshu.io/upload_images/9747350-ef070f6b7b96d9bc?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><h3 id="实例3"><a href="#实例3" class="headerlink" title="实例3"></a>实例3</h3><ul><li><p>题目：一个整数，它加上100后是一个完全平方数，再加上168又是一个完全平方数，请问该数是多少？</p></li><li><p>分析：如果一个正整数 a 是某一个整数 b 的平方，那么这个正整数 a 叫做完全平方数;<br>假设这个数为 x：<br>1、则：x + 100 = n ** 2, x + 100 + 168 = m ** 2；<br>2、计算等式：m ** 2 - n ** 2 = (m + n)(m - n) = 168；<br>3、设置： m + n = i，m - n = j，i * j =168，i 和 j 至少一个是偶数；<br>4、可得： m = (i + j) / 2， n = (i - j) / 2，i 和 j 要么都是偶数，要么都是奇数；<br>5、从 3 和 4 推导可知道，i 与 j 均是大于等于 2 的偶数；<br>6、由于 i * j = 168， j&gt;=2，则 1 &lt; i &lt; 168 / 2 + 1；</p></li><li><p>代码：</p></li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/env python</span><span class="token comment" spellcheck="true"># -*- coding: utf-8 -*-</span><span class="token comment" spellcheck="true"># @Time    : 2018-10-3 12:10</span><span class="token comment" spellcheck="true"># @Author  : Manu</span><span class="token comment" spellcheck="true"># @Site    : </span><span class="token comment" spellcheck="true"># @File    : compSquNum.py</span><span class="token comment" spellcheck="true"># @Software: PyCharm</span>res <span class="token operator">=</span> <span class="token number">168</span> <span class="token operator">//</span> <span class="token number">2</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> res <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> <span class="token number">168</span> <span class="token operator">%</span> i <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>        j <span class="token operator">=</span> <span class="token number">168</span> <span class="token operator">/</span> i<span class="token punctuation">;</span>        <span class="token keyword">if</span>  i <span class="token operator">></span> j <span class="token operator">and</span> <span class="token punctuation">(</span>i <span class="token operator">+</span> j<span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">and</span> <span class="token punctuation">(</span>i <span class="token operator">-</span> j<span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">:</span>            m <span class="token operator">=</span> <span class="token punctuation">(</span>i <span class="token operator">+</span> j<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span>            n <span class="token operator">=</span> <span class="token punctuation">(</span>i <span class="token operator">-</span> j<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span>            x <span class="token operator">=</span> m <span class="token operator">*</span> m <span class="token operator">-</span> <span class="token number">268</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'这个数可能是: '</span><span class="token punctuation">,</span> x<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>结果：</li></ul><p><img src="http://upload-images.jianshu.io/upload_images/9747350-35140ed1bac6aa89?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><h3 id="实例4"><a href="#实例4" class="headerlink" title="实例4"></a>实例4</h3><ul><li><p>题目：输入某年某月某日，判断这一天是这一年的第几天？</p></li><li><p>分析：分别将平年和闰年每个月的天数存入两个列表中，然后输入年月日，判断平年还是闰年，然后进行计算这是这一年中的第几天；</p></li><li><p>代码：</p></li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/env python</span><span class="token comment" spellcheck="true"># -*- coding: utf-8 -*-</span><span class="token comment" spellcheck="true"># @Time    : 2018-10-3 14:10</span><span class="token comment" spellcheck="true"># @Author  : Manu</span><span class="token comment" spellcheck="true"># @Site    : </span><span class="token comment" spellcheck="true"># @File    : day.py</span><span class="token comment" spellcheck="true"># @Software: PyCharm</span>list1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">31</span><span class="token punctuation">,</span> <span class="token number">28</span><span class="token punctuation">,</span> <span class="token number">31</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">31</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">31</span><span class="token punctuation">,</span> <span class="token number">31</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">31</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">31</span><span class="token punctuation">]</span>list2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">31</span><span class="token punctuation">,</span> <span class="token number">29</span><span class="token punctuation">,</span> <span class="token number">31</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">31</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">31</span><span class="token punctuation">,</span> <span class="token number">31</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">31</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">31</span><span class="token punctuation">]</span><span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>    year <span class="token operator">=</span> int<span class="token punctuation">(</span>input<span class="token punctuation">(</span><span class="token string">'输入年份'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    month <span class="token operator">=</span> int<span class="token punctuation">(</span>input<span class="token punctuation">(</span><span class="token string">'输入月份'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    day <span class="token operator">=</span> int<span class="token punctuation">(</span>input<span class="token punctuation">(</span><span class="token string">'输入日期'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    sum <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">if</span> year <span class="token operator">%</span> <span class="token number">400</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">or</span> <span class="token punctuation">(</span>year <span class="token operator">%</span> <span class="token number">4</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">and</span> year <span class="token operator">%</span> <span class="token number">100</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>month <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            sum <span class="token operator">+=</span> list2<span class="token punctuation">[</span>i<span class="token punctuation">]</span>        sum <span class="token operator">+=</span> day    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>month <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            sum <span class="token operator">+=</span> list1<span class="token punctuation">[</span>i<span class="token punctuation">]</span>        sum <span class="token operator">+=</span> day    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'这是第 %d 天'</span> <span class="token operator">%</span>sum<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>结果：</li></ul><p><img src="http://upload-images.jianshu.io/upload_images/9747350-aacd05d37932a75b?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><h3 id="实例5"><a href="#实例5" class="headerlink" title="实例5"></a>实例5</h3><ul><li><p>题目：输入三个整数x,y,z，请把这三个数由小到大输出。</p></li><li><p>分析：进入死循环，然后分3次输入，每次输入后将其追加到列表中，然后对列表进行排序，最后输出排序好的列表；</p></li><li><p>代码：</p></li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/env python</span><span class="token comment" spellcheck="true"># -*- coding: utf-8 -*-</span><span class="token comment" spellcheck="true"># @Time    : 2018-10-3 15:10</span><span class="token comment" spellcheck="true"># @Author  : Manu</span><span class="token comment" spellcheck="true"># @Site    : </span><span class="token comment" spellcheck="true"># @File    : sortNum.py</span><span class="token comment" spellcheck="true"># @Software: PyCharm</span><span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Input x, y, z:'</span><span class="token punctuation">)</span>    arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        tmp <span class="token operator">=</span> int<span class="token punctuation">(</span>input<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        arr<span class="token punctuation">.</span>append<span class="token punctuation">(</span>tmp<span class="token punctuation">)</span>    arr<span class="token punctuation">.</span>sort<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'三个数从小到大排序: '</span><span class="token punctuation">,</span>  arr<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>结果：</li></ul><p><img src="http://upload-images.jianshu.io/upload_images/9747350-15f9c749a2171123?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 编程语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python学习中遇到的问题总结</title>
      <link href="/2019/10/02/python-xue-xi-zhong-yu-dao-de-wen-ti-zong-jie/"/>
      <url>/2019/10/02/python-xue-xi-zhong-yu-dao-de-wen-ti-zong-jie/</url>
      
        <content type="html"><![CDATA[<h1 id="问题1"><a href="#问题1" class="headerlink" title="问题1"></a>问题1</h1><pre class="line-numbers language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">import</span> sys<span class="token operator">>></span><span class="token operator">></span> reload<span class="token punctuation">(</span>sys<span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> sys<span class="token punctuation">.</span>setdefaultencoding<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span> NameError<span class="token punctuation">:</span> name <span class="token string">'reload'</span> <span class="token keyword">is</span> <span class="token operator">not</span> defined<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>原因：Python3.x中已经彻底抛弃<code>sys.setdefaultencoding('uft-8')</code>；</li><li>解决办法：</li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> importlibimportlib<span class="token punctuation">.</span>reload<span class="token punctuation">(</span>sys<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h1 id="问题2"><a href="#问题2" class="headerlink" title="问题2"></a>问题2</h1><ul><li><p>如何给新建的<code>python</code>脚本设置默认模版</p></li><li><p>进入<code>File&gt;&gt;Setting&gt;&gt;Editor&gt;&gt;Code Style&gt;&gt;File and Code Templates</code>，然后找到<code>Python Script</code>，然后在右边的框中输入你想要定义的模版，比如说我的是：</p></li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/env python</span><span class="token comment" spellcheck="true"># -*- coding: utf-8 -*-</span><span class="token comment" spellcheck="true"># @Time    : ${DATE} ${TIME}</span><span class="token comment" spellcheck="true"># @Author  : cunyu</span><span class="token comment" spellcheck="true"># @Site    : ${SITE}</span><span class="token comment" spellcheck="true"># @File    : ${NAME}.py</span><span class="token comment" spellcheck="true"># @Software: ${PRODUCT_NAME}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="http://upload-images.jianshu.io/upload_images/9747350-8066083eb82ad526?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><p><img src="http://upload-images.jianshu.io/upload_images/9747350-abb1c72d39f46b63?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 编程语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python实践：购物车</title>
      <link href="/2019/10/02/python-shi-jian-gou-wu-che/"/>
      <url>/2019/10/02/python-shi-jian-gou-wu-che/</url>
      
        <content type="html"><![CDATA[<h2 id="购物车程序"><a href="#购物车程序" class="headerlink" title="购物车程序"></a>购物车程序</h2><ul><li>要求如下图</li></ul><p><img src="http://upload-images.jianshu.io/upload_images/9747350-f2e841bb87378ba7?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><ul><li>代码</li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># --*--coding:utf-8--*--</span><span class="token comment" spellcheck="true"># Author: 村雨</span><span class="token keyword">import</span> pprintproductList <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token string">'Iphone 8'</span><span class="token punctuation">,</span> <span class="token number">10000</span><span class="token punctuation">)</span><span class="token punctuation">,</span>               <span class="token punctuation">(</span><span class="token string">'GTX2080'</span><span class="token punctuation">,</span> <span class="token number">8000</span><span class="token punctuation">)</span><span class="token punctuation">,</span>               <span class="token punctuation">(</span><span class="token string">'Z7KP7-GT'</span><span class="token punctuation">,</span> <span class="token number">6000</span><span class="token punctuation">)</span><span class="token punctuation">,</span>               <span class="token punctuation">(</span><span class="token string">'Mac pro'</span><span class="token punctuation">,</span> <span class="token number">15000</span><span class="token punctuation">)</span><span class="token punctuation">,</span>               <span class="token punctuation">(</span><span class="token string">'Honor 10'</span><span class="token punctuation">,</span> <span class="token number">2800</span><span class="token punctuation">)</span><span class="token punctuation">,</span>               <span class="token punctuation">(</span><span class="token string">'Iphone XR'</span><span class="token punctuation">,</span> <span class="token number">12000</span><span class="token punctuation">)</span><span class="token punctuation">,</span>               <span class="token punctuation">(</span><span class="token string">'Mi 8'</span><span class="token punctuation">,</span> <span class="token number">2999</span><span class="token punctuation">)</span>               <span class="token punctuation">]</span>shoppingList <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'输入你的工资:'</span><span class="token punctuation">)</span>salary <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">if</span> <span class="token operator">not</span> salary<span class="token punctuation">.</span>isdigit<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'请输入整数'</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    salary <span class="token operator">=</span> int<span class="token punctuation">(</span>salary<span class="token punctuation">)</span>    <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> index<span class="token punctuation">,</span> item <span class="token keyword">in</span> enumerate<span class="token punctuation">(</span>productList<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>index <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> item<span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'输入你要买的商品的序号：'</span><span class="token punctuation">)</span>        userWant <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> userWant<span class="token punctuation">.</span>isdigit<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            userWant <span class="token operator">=</span> int<span class="token punctuation">(</span>userWant<span class="token punctuation">)</span>            <span class="token keyword">if</span> userWant <span class="token operator">&lt;=</span> len<span class="token punctuation">(</span>productList<span class="token punctuation">)</span> <span class="token operator">and</span> userWant <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">:</span>                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'你要购买的是：'</span><span class="token punctuation">,</span> productList<span class="token punctuation">[</span>userWant <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>                <span class="token keyword">if</span> salary <span class="token operator">>=</span> productList<span class="token punctuation">[</span>userWant <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">:</span>                    shoppingList<span class="token punctuation">.</span>append<span class="token punctuation">(</span>productList<span class="token punctuation">[</span>userWant <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>                    salary <span class="token operator">-=</span> productList<span class="token punctuation">[</span>userWant <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>                    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'你已经购买了'</span> <span class="token operator">+</span> productList<span class="token punctuation">[</span>userWant <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">', 你的余额为 '</span> <span class="token operator">+</span> str<span class="token punctuation">(</span>salary<span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token keyword">else</span><span class="token punctuation">:</span>                    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'对不起，你的余额不足！请努力工作吧！'</span><span class="token punctuation">)</span>                    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'你当前所购买的商品为：'</span><span class="token punctuation">)</span>                    <span class="token keyword">for</span> brought <span class="token keyword">in</span> shoppingList<span class="token punctuation">:</span>                        pprint<span class="token punctuation">.</span>pprint<span class="token punctuation">(</span>brought<span class="token punctuation">)</span>                    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'你当前余额为：'</span><span class="token punctuation">,</span> salary<span class="token punctuation">)</span>                    exit<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'你输入的商品序号有错，请重新输入'</span><span class="token punctuation">)</span>        <span class="token keyword">elif</span> userWant <span class="token operator">==</span> <span class="token string">'q'</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'-----------Shopping List----------'</span><span class="token punctuation">)</span>            <span class="token keyword">for</span> brought <span class="token keyword">in</span> shoppingList<span class="token punctuation">:</span>                pprint<span class="token punctuation">.</span>pprint<span class="token punctuation">(</span>brought<span class="token punctuation">)</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'你的余额为 '</span><span class="token punctuation">,</span> salary<span class="token punctuation">)</span>            exit<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Invalid input！！！'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>结果</li></ul><p><img src="http://upload-images.jianshu.io/upload_images/9747350-5f52df3cfb1676e6?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><p><img src="http://upload-images.jianshu.io/upload_images/9747350-36aaf64170e333c1?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><p><img src="http://upload-images.jianshu.io/upload_images/9747350-9f5cb2d811578c72?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 编程语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python中的条件判断、循环以及循环的终止</title>
      <link href="/2019/10/02/python-zhong-de-tiao-jian-pan-duan-xun-huan-yi-ji-xun-huan-de-zhong-zhi/"/>
      <url>/2019/10/02/python-zhong-de-tiao-jian-pan-duan-xun-huan-yi-ji-xun-huan-de-zhong-zhi/</url>
      
        <content type="html"><![CDATA[<h1 id="条件判断"><a href="#条件判断" class="headerlink" title="条件判断"></a>条件判断</h1><p>条件语句是用来判断给定条件是否满足，并根据判断所得结果从而决定所要执行的操作，通常的逻辑思路如下图；</p><p><img src="http://upload-images.jianshu.io/upload_images/9747350-4a48aef9c648161a?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><h3 id="单次判断"><a href="#单次判断" class="headerlink" title="单次判断"></a>单次判断</h3><ul><li>形式</li></ul><pre><code>if &lt;判断条件&gt;：    &lt;执行&gt;else：    &lt;执行&gt;</code></pre><ul><li>例子</li></ul><pre><code>age = int(input("输入你的年龄："))if age &lt; 18:    print("未成年")else:    print("已成年")</code></pre><p><img src="http://upload-images.jianshu.io/upload_images/9747350-7e2b9cca7ec3568a?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><h3 id="多次判断"><a href="#多次判断" class="headerlink" title="多次判断"></a>多次判断</h3><ul><li>形式</li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">if</span> <span class="token operator">&lt;</span>判断条件<span class="token number">1</span><span class="token operator">></span><span class="token punctuation">:</span>    <span class="token operator">&lt;</span>执行<span class="token number">1</span><span class="token operator">></span><span class="token keyword">elif</span> <span class="token operator">&lt;</span>判断条件<span class="token number">2</span><span class="token operator">></span><span class="token punctuation">:</span>    <span class="token operator">&lt;</span>执行<span class="token number">2</span><span class="token operator">></span><span class="token keyword">elif</span> <span class="token operator">&lt;</span>判断条件<span class="token number">3</span><span class="token operator">></span><span class="token punctuation">:</span>    <span class="token operator">&lt;</span>执行<span class="token number">3</span><span class="token operator">></span><span class="token keyword">else</span><span class="token punctuation">:</span>    <span class="token operator">&lt;</span>执行<span class="token number">4</span><span class="token operator">></span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>例子</li></ul><pre class="line-numbers language-python"><code class="language-python">age <span class="token operator">=</span> int<span class="token punctuation">(</span>input<span class="token punctuation">(</span><span class="token string">"输入你的年龄："</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">if</span> age <span class="token operator">>=</span> <span class="token number">18</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'adult'</span><span class="token punctuation">)</span><span class="token keyword">elif</span> age <span class="token operator">>=</span> <span class="token number">6</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'teenager'</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'kid'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="http://upload-images.jianshu.io/upload_images/9747350-34e70f0ed37f4fad?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><p>注意，<code>if</code>语句是从上往下判断的；</p><h1 id="循环"><a href="#循环" class="headerlink" title="循环"></a>循环</h1><h3 id="while循环"><a href="#while循环" class="headerlink" title="while循环"></a>while循环</h3><p>当条件满足时，就不断循环，直到条件不再满足时即退出循环；</p><ul><li>例子</li></ul><pre class="line-numbers language-python"><code class="language-python">count <span class="token operator">=</span> <span class="token number">50</span><span class="token keyword">while</span> count <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>str<span class="token punctuation">(</span>count<span class="token punctuation">)</span><span class="token punctuation">)</span>    count <span class="token operator">-=</span> <span class="token number">2</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"循环结束"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="http://upload-images.jianshu.io/upload_images/9747350-91bd70609dececa9?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><h3 id="for…in循环"><a href="#for…in循环" class="headerlink" title="for…in循环"></a>for…in循环</h3><ul><li>例子</li></ul><pre class="line-numbers language-python"><code class="language-python">sum <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">for</span> num <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    sum <span class="token operator">+=</span> num<span class="token keyword">print</span><span class="token punctuation">(</span>str<span class="token punctuation">(</span>sum<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>其中<code>range()</code>函数用于生成一个整数序列；</p><h1 id="终止循环"><a href="#终止循环" class="headerlink" title="终止循环"></a>终止循环</h1><ul><li>break<br>用于提前终止循环；</li></ul><pre class="line-numbers language-python"><code class="language-python">num <span class="token operator">=</span> <span class="token number">1</span><span class="token keyword">while</span> num <span class="token operator">&lt;=</span> <span class="token number">100</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> num <span class="token operator">>=</span> <span class="token number">10</span><span class="token punctuation">:</span>        <span class="token keyword">break</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span>    num <span class="token operator">+=</span> <span class="token number">2</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"结束"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="http://upload-images.jianshu.io/upload_images/9747350-0a093b730a918bbc?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><ul><li>continue<br>用于跳出当前循环，进入下一次循环；</li></ul><pre class="line-numbers language-python"><code class="language-python">num <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">while</span> num <span class="token operator">&lt;</span> <span class="token number">20</span><span class="token punctuation">:</span>    num <span class="token operator">+=</span> <span class="token number">1</span>    <span class="token keyword">if</span> num <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>         <span class="token keyword">continue</span>     <span class="token keyword">print</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="http://upload-images.jianshu.io/upload_images/9747350-e7ce7ce441b0f751?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 编程语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python中的数据类型、变量、字符编码、输入输出、注释</title>
      <link href="/2019/10/02/python-zhong-de-shu-ju-lei-xing-bian-liang-zi-fu-bian-ma-shu-ru-shu-chu-zhu-shi/"/>
      <url>/2019/10/02/python-zhong-de-shu-ju-lei-xing-bian-liang-zi-fu-bian-ma-shu-ru-shu-chu-zhu-shi/</url>
      
        <content type="html"><![CDATA[<h1 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h1><ul><li>number(数字)<br>用于存储类型，通常分为int、long、float、complex；</li></ul><ol><li>int：32位机器上占32位，取值范围为-2<strong>31 ~ 2</strong>31 - 1；64位机器上占64位，取值范围为-2<strong>63～2</strong>63-1；</li><li>long：无指定位宽，但实际使用中由于机器内存有限，故不可能无限大；</li><li>float：用来处理实数，占8个字节，64位，52位表示底，11位表示指数，最后一位表示符号；</li><li>complex：由实数部分和虚数部分组成；</li></ol><ul><li><p>string(字符串)<br>用单引号<code>'</code>或双引号<code>"</code>括起来的任意文本，是一种表示文本的数据类型；</p></li><li><p>bool(布尔值)<br>一个布尔值只有<code>True</code>、<code>False</code>两种状态，可通过<code>and</code>、<code>or</code>、<code>not</code>运算；</p></li><li><p>空值<br>一种特殊的值，用<code>None</code>表示，但不能和<code>0</code>混为一谈，<code>0</code>也是有意义的，而<code>None</code>是一个特殊的空值；</p></li><li><p>常量<br>顾名思义，所谓常量就是不能变的变量，常用全部大写的变量名来表示；</p></li><li><p>list(列表)<br>用”[]”标识，元素可变，是有序的对象集合，可以随时添加和删除其中的元素；</p></li><li><p>tuple(元组)<br>用”()”标识，内部元素之间用逗号隔开，元素不可变，相当于不可变的列表，也是有序的对象集合，但可以给存储元组的变量复制；</p></li><li><p>dict(字典)<br>用”{}”标识，字典中的键值是无序的，由”key:value”的形式存在，当要取出其中的元素时，只需要通过键来存取，不是通过偏移来存取，具有极快的查找速度；</p></li><li><p>set<br>类似于dict，是一组key的集合，但不存储value，且key是不能重复的；</p></li></ul><h1 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h1><ul><li><p>定义<br>源于数学，在计算机语言表示能储存计算结果或能表示值的抽象概念，可以是任意数据类型，在程序中用变量名表示；</p></li><li><p>变量命名规则</p></li></ul><ol><li>只能是数字、字符、下划线的组合；</li><li>关键字不能声明为变量名；</li><li>变量名第一个字符不能是数字；</li></ol><h1 id="字符编码"><a href="#字符编码" class="headerlink" title="字符编码"></a>字符编码</h1><ul><li><p>ASCII<br>8个比特表示一个字节，一个字节所能表示的最大整数为255；</p></li><li><p>Unicode<br>常用两个字节表示一个字符，包括字符集、编码方案等。是为了解决传统的字符编码方案的局限性而产生，为各种语言中的每个字符都设定了统一且唯一的二进制编码，能够满足跨语言、跨平台进行文本转换及处理的要求；</p></li></ul><h1 id="输入与输出"><a href="#输入与输出" class="headerlink" title="输入与输出"></a>输入与输出</h1><ul><li>输出：用print()在括号之中直接加上字符串或者表达式，然后直接输出想要的结果；</li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"人生苦短，我用Python"</span><span class="token punctuation">)</span>人生苦短，我用Python<span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"1 + 2 = "</span><span class="token punctuation">,</span> <span class="token number">1</span> <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token number">1</span> <span class="token operator">+</span> <span class="token number">2</span> <span class="token operator">=</span> <span class="token number">3</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><img src="http://upload-images.jianshu.io/upload_images/9747350-496fe439c6b14772?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><ul><li>输入：用input()函数将值赋给一个变量后，在交互式命令行就会等待用户输入，输入完成后不会有提示，但在交互式命令行输入刚才的变量名后，获取的输入就会在命令行输出；</li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> name <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token string">"Name:"</span><span class="token punctuation">)</span>Name<span class="token punctuation">:</span>Manu Ginobili<span class="token operator">>></span><span class="token operator">></span> name<span class="token string">'Manu Ginobili'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><img src="http://upload-images.jianshu.io/upload_images/9747350-80d23008c3e24885?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><h1 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h1><ul><li>单行注释<br>在所要注释的行最前边加上<code>#</code>即可；</li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"人生苦短，我用Python"</span><span class="token punctuation">)</span>人生苦短，我用Python<span class="token operator">>></span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"人生苦短，我用Python"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><img src="http://upload-images.jianshu.io/upload_images/9747350-9b64f39dc85e0562?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><ul><li>多行注释<br>当要多行或者批量注释时，用三引号 <code>'''  '''</code>将所要注释的内容包含起来即可；</li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token triple-quoted-string string">'''print("hello world")print('welcome to Python world!')print(1, 2, 3);'''</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>中文注释</li></ul><p>当所写程序中包含有中文时，一定要在源代码开头写上中文注释<code># --*-- coding:utf-8 --*--</code>，否则当程序运行时可能会出现中文乱码的情况出现；</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 编程语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python简介及开发环境搭建</title>
      <link href="/2019/10/02/python-jian-jie-ji-kai-fa-huan-jing-da-jian/"/>
      <url>/2019/10/02/python-jian-jie-ji-kai-fa-huan-jing-da-jian/</url>
      
        <content type="html"><![CDATA[<h1 id="Python简介"><a href="#Python简介" class="headerlink" title="Python简介"></a>Python简介</h1><p>Python是一门动态解释性的强类型定义的计算机程序设计语言，是一种完全面向对象的语言，由荷兰人”龟叔”-Guido van Rossum于1989年开发，于1991年发行第一个公开发行版。Python具有丰富而强大的库，能够将用其他开发语言设计的各种模块很好的联接在一起。</p><h1 id="Python应用领域"><a href="#Python应用领域" class="headerlink" title="Python应用领域"></a>Python应用领域</h1><ul><li>云计算；</li><li>WEB开发；</li><li>系统运维；</li><li>图形GUI；</li><li>金融分析；</li><li>科学运算、人工智能；</li></ul><h1 id="设计目标"><a href="#设计目标" class="headerlink" title="设计目标"></a>设计目标</h1><ul><li>简单直观且和主要竞争者一样强大；</li><li>开源；</li><li>容易理解</li><li>适用于短期开发任务；</li></ul><h1 id="编译型语言和解释型语言对比"><a href="#编译型语言和解释型语言对比" class="headerlink" title="编译型语言和解释型语言对比"></a>编译型语言和解释型语言对比</h1><ul><li>速度–编译型比解释型执行速度快，效率高；</li><li>跨平台性–解释型比编译型跨平台性好；</li></ul><h1 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h1><ul><li>完全面向对象；</li><li>拥有强大标准库；</li><li>大量第三方模块；</li></ul><h1 id="Python优缺点"><a href="#Python优缺点" class="headerlink" title="Python优缺点"></a>Python优缺点</h1><h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h3><ul><li>优雅、明确、简单；</li><li>开发效率高；</li><li>可移植性强；</li><li>可扩展性强；</li><li>可嵌入性好；</li></ul><h3 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h3><ul><li>相对于C/C++等语言而言，运行速度慢；</li><li>线程间无法利用多CPU的问题；</li><li>代码不能加密；</li></ul><h1 id="Python解释器"><a href="#Python解释器" class="headerlink" title="Python解释器"></a>Python解释器</h1><ul><li><p>CPython<br>即C语言实现的Python，当我们从Python官网下载并安装后，就已经将这一解释器安装到了我们电脑中，在命令行中运行Python就是相当于启动了CPyhton解释器；</p></li><li><p>IPython<br>基于CPython之上的一个交互式的解释器，其底层还是基于CPython，只不过交互性比起CPython更好。就好比Chrome和360极速浏览器，虽然不同，但360极速浏览器的内核却是Chrome；</p></li><li><p>JPython<br>运行于Java平台的Python解释器，能够直接将Python代码编译为Java字节码并执行；</p></li><li><p>PyPy<br>PyPy最突出的优点就是可以提升Python代码的执行速度，它采用了JIT技术，对Python代码进行了动态编译，这样一来Python代码的执行速度得以显著提升；</p></li><li><p>IronPython<br>类似于JPython，它是运行于微软.Net平台上的解释器，能够将Python代码编译成.Net的字节码；</p></li></ul><h1 id="执行Python程序到的三种方式"><a href="#执行Python程序到的三种方式" class="headerlink" title="执行Python程序到的三种方式"></a>执行Python程序到的三种方式</h1><ul><li>解释器；</li><li>交互式；</li><li>集成开发环境；</li></ul><h1 id="Python的下载与安装"><a href="#Python的下载与安装" class="headerlink" title="Python的下载与安装"></a>Python的下载与安装</h1><p>详情见我的另一篇博客<a href="https://blog.csdn.net/github_39655029/article/details/80994706" target="_blank" rel="noopener">NLP自然语言处理的开发环境搭建</a></p><h1 id="开发工具"><a href="#开发工具" class="headerlink" title="开发工具"></a>开发工具</h1><p>当然了，IDE肯定是首推Pycharm，详情见<a href="https://www.jetbrains.com/pycharm/download/#section=windows" target="_blank" rel="noopener">下载地址</a>。</p><p><img src="http://upload-images.jianshu.io/upload_images/9747350-f4ddbe60acd00e8d?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><p>Pycharm分为社区版(Community)和专业版(Professional)，两者的区别在于专业版功能更加强大，但同时的，专业版是收费的。对于我们日常使用开发，社区版已经足够用了，如果实在是需要用到专业版的功能，那么你可以选择购买序列号或者去网上找专业版的破解版。Pycharm安装详情见<a href="https://jingyan.baidu.com/article/d45ad148432e9a69552b8027.html" target="_blank" rel="noopener">Pycharm安装教程</a>。</p><ul><li>Pycharm主界面</li></ul><p><img src="http://upload-images.jianshu.io/upload_images/9747350-d5de4626aa2ee8cb?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 编程语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python绘制七段数码管显示当前时间</title>
      <link href="/2019/10/02/python-hui-zhi-qi-duan-shu-ma-guan-xian-shi-dang-qian-shi-jian/"/>
      <url>/2019/10/02/python-hui-zhi-qi-duan-shu-ma-guan-xian-shi-dang-qian-shi-jian/</url>
      
        <content type="html"><![CDATA[<h2 id="利用Python中的turtle图形库绘制七段数码管，显示当前时间"><a href="#利用Python中的turtle图形库绘制七段数码管，显示当前时间" class="headerlink" title="利用Python中的turtle图形库绘制七段数码管，显示当前时间"></a>利用Python中的turtle图形库绘制七段数码管，显示当前时间</h2><h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># coding:utf-8</span><span class="token comment" spellcheck="true"># 绘制七段数码管，显示当前时间</span><span class="token keyword">import</span> time<span class="token keyword">import</span> turtle <span class="token keyword">as</span> tt<span class="token comment" spellcheck="true"># 绘制间隔</span><span class="token keyword">def</span> <span class="token function">drawGap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    tt<span class="token punctuation">.</span>penup<span class="token punctuation">(</span><span class="token punctuation">)</span>    tt<span class="token punctuation">.</span>fd<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 绘制单段数码管</span><span class="token keyword">def</span> <span class="token function">drawLine</span><span class="token punctuation">(</span>draw<span class="token punctuation">)</span><span class="token punctuation">:</span>    drawGap<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>draw<span class="token punctuation">)</span><span class="token punctuation">:</span>        tt<span class="token punctuation">.</span>pendown<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        tt<span class="token punctuation">.</span>penup<span class="token punctuation">(</span><span class="token punctuation">)</span>    tt<span class="token punctuation">.</span>fd<span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span>    drawGap<span class="token punctuation">(</span><span class="token punctuation">)</span>    tt<span class="token punctuation">.</span>right<span class="token punctuation">(</span><span class="token number">90</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 绘制当前时间</span><span class="token keyword">def</span> <span class="token function">drawDate</span><span class="token punctuation">(</span>date<span class="token punctuation">)</span><span class="token punctuation">:</span>    tt<span class="token punctuation">.</span>pencolor<span class="token punctuation">(</span><span class="token string">"red"</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> date<span class="token punctuation">:</span>        <span class="token keyword">if</span> i <span class="token operator">==</span> <span class="token string">'+'</span><span class="token punctuation">:</span>            tt<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">"年"</span><span class="token punctuation">,</span> font <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">"黑体"</span><span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">,</span> <span class="token string">"normal"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            tt<span class="token punctuation">.</span>pencolor<span class="token punctuation">(</span><span class="token string">"green"</span><span class="token punctuation">)</span>            tt<span class="token punctuation">.</span>fd<span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span>        <span class="token keyword">elif</span> i <span class="token operator">==</span> <span class="token string">'-'</span><span class="token punctuation">:</span>            tt<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">"月"</span><span class="token punctuation">,</span> font<span class="token operator">=</span><span class="token punctuation">(</span><span class="token string">"黑体"</span><span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">,</span> <span class="token string">"normal"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            tt<span class="token punctuation">.</span>pencolor<span class="token punctuation">(</span><span class="token string">"blue"</span><span class="token punctuation">)</span>            tt<span class="token punctuation">.</span>fd<span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span>        <span class="token keyword">elif</span> i <span class="token operator">==</span> <span class="token string">'*'</span><span class="token punctuation">:</span>            tt<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">"日"</span><span class="token punctuation">,</span> font<span class="token operator">=</span><span class="token punctuation">(</span><span class="token string">"黑体"</span><span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">,</span> <span class="token string">"normal"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            tt<span class="token punctuation">.</span>pencolor<span class="token punctuation">(</span><span class="token string">"purple"</span><span class="token punctuation">)</span>            tt<span class="token punctuation">.</span>fd<span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span>        <span class="token keyword">elif</span> i <span class="token operator">==</span> <span class="token string">'='</span><span class="token punctuation">:</span>            tt<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">"时"</span><span class="token punctuation">,</span> font<span class="token operator">=</span><span class="token punctuation">(</span><span class="token string">"黑体"</span><span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">,</span> <span class="token string">"normal"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            tt<span class="token punctuation">.</span>pencolor<span class="token punctuation">(</span><span class="token string">"yellow"</span><span class="token punctuation">)</span>            tt<span class="token punctuation">.</span>fd<span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span>        <span class="token keyword">elif</span> i <span class="token operator">==</span> <span class="token string">'#'</span><span class="token punctuation">:</span>            tt<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">"分"</span><span class="token punctuation">,</span> font<span class="token operator">=</span><span class="token punctuation">(</span><span class="token string">"黑体"</span><span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">,</span> <span class="token string">"normal"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            tt<span class="token punctuation">.</span>pencolor<span class="token punctuation">(</span><span class="token string">"black"</span><span class="token punctuation">)</span>            tt<span class="token punctuation">.</span>fd<span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span>        <span class="token keyword">elif</span> i <span class="token operator">==</span> <span class="token string">'$'</span><span class="token punctuation">:</span>            tt<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">"秒"</span><span class="token punctuation">,</span> font<span class="token operator">=</span><span class="token punctuation">(</span><span class="token string">"黑体"</span><span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">,</span> <span class="token string">"normal"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            drawDigit<span class="token punctuation">(</span>eval<span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 绘制数码管</span><span class="token keyword">def</span> <span class="token function">drawDigit</span><span class="token punctuation">(</span>cur_time<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> cur_time <span class="token keyword">in</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">:</span>        drawLine<span class="token punctuation">(</span><span class="token boolean">True</span><span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        drawLine<span class="token punctuation">(</span><span class="token boolean">False</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> cur_time <span class="token keyword">in</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">:</span>        drawLine<span class="token punctuation">(</span><span class="token boolean">True</span><span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        drawLine<span class="token punctuation">(</span><span class="token boolean">False</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> cur_time <span class="token keyword">in</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">:</span>        drawLine<span class="token punctuation">(</span><span class="token boolean">True</span><span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        drawLine<span class="token punctuation">(</span><span class="token boolean">False</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> cur_time <span class="token keyword">in</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">:</span>        drawLine<span class="token punctuation">(</span><span class="token boolean">True</span><span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        drawLine<span class="token punctuation">(</span><span class="token boolean">False</span><span class="token punctuation">)</span>    tt<span class="token punctuation">.</span>left<span class="token punctuation">(</span><span class="token number">90</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> cur_time <span class="token keyword">in</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">:</span>        drawLine<span class="token punctuation">(</span><span class="token boolean">True</span><span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        drawLine<span class="token punctuation">(</span><span class="token boolean">False</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> cur_time <span class="token keyword">in</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">:</span>        drawLine<span class="token punctuation">(</span><span class="token boolean">True</span><span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        drawLine<span class="token punctuation">(</span><span class="token boolean">False</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> cur_time <span class="token keyword">in</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">:</span>        drawLine<span class="token punctuation">(</span><span class="token boolean">True</span><span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        drawLine<span class="token punctuation">(</span><span class="token boolean">False</span><span class="token punctuation">)</span>    tt<span class="token punctuation">.</span>left<span class="token punctuation">(</span><span class="token number">180</span><span class="token punctuation">)</span>    tt<span class="token punctuation">.</span>penup<span class="token punctuation">(</span><span class="token punctuation">)</span>    tt<span class="token punctuation">.</span>fd<span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 主函数</span><span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    tt<span class="token punctuation">.</span>setup<span class="token punctuation">(</span><span class="token number">1600</span><span class="token punctuation">,</span> <span class="token number">300</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">)</span>    tt<span class="token punctuation">.</span>penup<span class="token punctuation">(</span><span class="token punctuation">)</span>    tt<span class="token punctuation">.</span>fd<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">730</span><span class="token punctuation">)</span>    tt<span class="token punctuation">.</span>pensize<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>    drawDate<span class="token punctuation">(</span>time<span class="token punctuation">.</span>strftime<span class="token punctuation">(</span><span class="token string">'%Y+%m-%d*%H=%M#%S$'</span><span class="token punctuation">,</span> time<span class="token punctuation">.</span>localtime<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    tt<span class="token punctuation">.</span>hideturtle<span class="token punctuation">(</span><span class="token punctuation">)</span>    tt<span class="token punctuation">.</span>done<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    main<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h4 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h4><p><img src="http://upload-images.jianshu.io/upload_images/9747350-df2cfdae2ade6111?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>通过在mooc网学习相关知识，借鉴相关代码，最终实现本次设计。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 编程语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python中turtle库的使用</title>
      <link href="/2019/10/02/python-zhong-turtle-ku-de-shi-yong/"/>
      <url>/2019/10/02/python-zhong-turtle-ku-de-shi-yong/</url>
      
        <content type="html"><![CDATA[<h2 id="Turtle图形库"><a href="#Turtle图形库" class="headerlink" title="Turtle图形库"></a>Turtle图形库</h2><p>Turtle库是Python内置的图形化模块，属于标准库之一，位于Python安装目录的lib文件夹下，常用函数有以下几种：</p><ul><li><p>画笔控制函数</p><ol><li><code>penup()</code>:抬起画笔； </li><li><code>pendown()</code>:落下画笔；</li><li><code>pensize(width)</code>:画笔宽度；</li><li><code>pencolor(color)</code>:画笔颜色；</li></ol></li><li><p>运动控制函数</p><ol><li><code>forward(d)/fd(d)</code>:直行d个像素；</li><li><code>circle(r, extent = None)</code>:绘制半径为r，角度为extent的弧形，圆心默认在海龟左侧距离r的位置；</li></ol><ul><li>方向控制函数<ol><li><code>setheading(angle)/seth(angle)</code>:改变前进方向；</li><li><code>left(angle)</code>:海龟左转；</li><li><code>right(angle)</code>:海龟右转；</li></ol></li></ul></li></ul><h2 id="Turtle库的使用"><a href="#Turtle库的使用" class="headerlink" title="Turtle库的使用"></a>Turtle库的使用</h2><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#coding=utf-8</span><span class="token comment" spellcheck="true">#绘制蟒蛇</span><span class="token keyword">import</span> turtleturtle<span class="token punctuation">.</span>penup<span class="token punctuation">(</span><span class="token punctuation">)</span>turtle<span class="token punctuation">.</span>pencolor<span class="token punctuation">(</span><span class="token string">"red"</span><span class="token punctuation">)</span>turtle<span class="token punctuation">.</span>forward<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">250</span><span class="token punctuation">)</span>turtle<span class="token punctuation">.</span>pendown<span class="token punctuation">(</span><span class="token punctuation">)</span>turtle<span class="token punctuation">.</span>pensize<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>turtle<span class="token punctuation">.</span>right<span class="token punctuation">(</span><span class="token number">45</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    turtle<span class="token punctuation">.</span>circle<span class="token punctuation">(</span><span class="token number">40</span><span class="token punctuation">,</span> <span class="token number">80</span><span class="token punctuation">)</span>    turtle<span class="token punctuation">.</span>circle<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">40</span><span class="token punctuation">,</span> <span class="token number">80</span><span class="token punctuation">)</span>turtle<span class="token punctuation">.</span>circle<span class="token punctuation">(</span><span class="token number">40</span><span class="token punctuation">,</span> <span class="token number">80</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span>turtle<span class="token punctuation">.</span>fd<span class="token punctuation">(</span><span class="token number">40</span><span class="token punctuation">)</span>turtle<span class="token punctuation">.</span>circle<span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">,</span> <span class="token number">180</span><span class="token punctuation">)</span>turtle<span class="token punctuation">.</span>fd<span class="token punctuation">(</span><span class="token number">40</span> <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">/</span> <span class="token number">3</span><span class="token punctuation">)</span>turtle<span class="token punctuation">.</span>done<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h2><p><img src="https://upload-images.jianshu.io/upload_images/9747350-b12e4fbef1a7a0ad.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/800" alt=""></p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#coding=utf-8</span><span class="token comment" spellcheck="true"># 绘制五角星</span><span class="token keyword">import</span> turtleturtle<span class="token punctuation">.</span>pensize<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>turtle<span class="token punctuation">.</span>pencolor<span class="token punctuation">(</span><span class="token string">"red"</span><span class="token punctuation">)</span>turtle<span class="token punctuation">.</span>forward<span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    turtle<span class="token punctuation">.</span>right<span class="token punctuation">(</span><span class="token number">144</span><span class="token punctuation">)</span>    turtle<span class="token punctuation">.</span>fd<span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span>turtle<span class="token punctuation">.</span>done<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="结果-1"><a href="#结果-1" class="headerlink" title="结果"></a>结果</h2><p><img src="https://upload-images.jianshu.io/upload_images/9747350-e1f3eac743de34d9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#绘制时钟</span><span class="token comment" spellcheck="true"># coding=utf-8</span><span class="token keyword">import</span> turtle <span class="token keyword">as</span> tt<span class="token keyword">from</span> datetime <span class="token keyword">import</span> <span class="token operator">*</span><span class="token comment" spellcheck="true"># 当前日期属于一周的第几天</span><span class="token keyword">def</span> <span class="token function">Week</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">:</span>    week <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"星期一"</span><span class="token punctuation">,</span> <span class="token string">"星期二"</span><span class="token punctuation">,</span> <span class="token string">"星期三"</span><span class="token punctuation">,</span> <span class="token string">"星期四"</span><span class="token punctuation">,</span> <span class="token string">"星期五"</span><span class="token punctuation">,</span> <span class="token string">"星期六"</span><span class="token punctuation">,</span> <span class="token string">"星期日"</span><span class="token punctuation">]</span>    <span class="token keyword">return</span> week<span class="token punctuation">[</span>t<span class="token punctuation">.</span>weekday<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true"># 获取当前时间</span><span class="token keyword">def</span> <span class="token function">Date</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">:</span>    y <span class="token operator">=</span> t<span class="token punctuation">.</span>year    m <span class="token operator">=</span> t<span class="token punctuation">.</span>month    d <span class="token operator">=</span> t<span class="token punctuation">.</span>day    cur_hour <span class="token operator">=</span> t<span class="token punctuation">.</span>hour<span class="token punctuation">;</span>    cur_min <span class="token operator">=</span> t<span class="token punctuation">.</span>minute<span class="token punctuation">;</span>    cur_sec <span class="token operator">=</span> t<span class="token punctuation">.</span>second<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token string">"%s-%d-%d %d:%02d:%02d"</span> <span class="token operator">%</span> <span class="token punctuation">(</span>y<span class="token punctuation">,</span> m<span class="token punctuation">,</span> d<span class="token punctuation">,</span> cur_hour<span class="token punctuation">,</span> cur_min<span class="token punctuation">,</span> cur_sec<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 移动画笔,距离为distance</span><span class="token keyword">def</span> <span class="token function">movePen</span><span class="token punctuation">(</span>distance<span class="token punctuation">)</span><span class="token punctuation">:</span>    tt<span class="token punctuation">.</span>penup<span class="token punctuation">(</span><span class="token punctuation">)</span>    tt<span class="token punctuation">.</span>pensize<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>    tt<span class="token punctuation">.</span>pencolor<span class="token punctuation">(</span><span class="token string">"blue"</span><span class="token punctuation">)</span>    tt<span class="token punctuation">.</span>fd<span class="token punctuation">(</span>distance<span class="token punctuation">)</span>    tt<span class="token punctuation">.</span>pendown<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 绘制表针</span><span class="token keyword">def</span> <span class="token function">makeHands</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> length<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 清空窗口，重置turtule状态为初始状态</span>    tt<span class="token punctuation">.</span>reset<span class="token punctuation">(</span><span class="token punctuation">)</span>    movePen<span class="token punctuation">(</span><span class="token operator">-</span>length <span class="token operator">*</span> <span class="token number">0.1</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 开始记录多边形的顶点</span>    tt<span class="token punctuation">.</span>begin_poly<span class="token punctuation">(</span><span class="token punctuation">)</span>    tt<span class="token punctuation">.</span>fd<span class="token punctuation">(</span>length <span class="token operator">*</span> <span class="token number">1.1</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 停止记录多边形的顶点</span>    tt<span class="token punctuation">.</span>end_poly<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 返回记录的多边形</span>    handForm <span class="token operator">=</span> tt<span class="token punctuation">.</span>get_poly<span class="token punctuation">(</span><span class="token punctuation">)</span>    tt<span class="token punctuation">.</span>register_shape<span class="token punctuation">(</span>name<span class="token punctuation">,</span> handForm<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 初始化</span><span class="token keyword">def</span> <span class="token function">initial</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">global</span> secHand<span class="token punctuation">,</span> minHand<span class="token punctuation">,</span> hurHand<span class="token punctuation">,</span> printer    <span class="token comment" spellcheck="true"># 重置方向向北(上)，正角度为顺时针</span>    tt<span class="token punctuation">.</span>mode<span class="token punctuation">(</span><span class="token string">"logo"</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 建立并初始化表针</span>    makeHands<span class="token punctuation">(</span><span class="token string">"secHand"</span><span class="token punctuation">,</span> <span class="token number">180</span><span class="token punctuation">)</span>    makeHands<span class="token punctuation">(</span><span class="token string">"minHand"</span><span class="token punctuation">,</span> <span class="token number">150</span><span class="token punctuation">)</span>    makeHands<span class="token punctuation">(</span><span class="token string">"hurHand"</span><span class="token punctuation">,</span> <span class="token number">110</span><span class="token punctuation">)</span>    secHand <span class="token operator">=</span> tt<span class="token punctuation">.</span>Turtle<span class="token punctuation">(</span><span class="token punctuation">)</span>    secHand<span class="token punctuation">.</span>shape<span class="token punctuation">(</span><span class="token string">"secHand"</span><span class="token punctuation">)</span>    minHand <span class="token operator">=</span> tt<span class="token punctuation">.</span>Turtle<span class="token punctuation">(</span><span class="token punctuation">)</span>    minHand<span class="token punctuation">.</span>shape<span class="token punctuation">(</span><span class="token string">"minHand"</span><span class="token punctuation">)</span>    hurHand <span class="token operator">=</span> tt<span class="token punctuation">.</span>Turtle<span class="token punctuation">(</span><span class="token punctuation">)</span>    hurHand<span class="token punctuation">.</span>shape<span class="token punctuation">(</span><span class="token string">"hurHand"</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> hand <span class="token keyword">in</span> secHand<span class="token punctuation">,</span> minHand<span class="token punctuation">,</span> hurHand<span class="token punctuation">:</span>        hand<span class="token punctuation">.</span>shapesize<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span>        hand<span class="token punctuation">.</span>speed<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 输出文字</span>    printer <span class="token operator">=</span> tt<span class="token punctuation">.</span>Turtle<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 隐藏画笔</span>    printer<span class="token punctuation">.</span>hideturtle<span class="token punctuation">(</span><span class="token punctuation">)</span>    printer<span class="token punctuation">.</span>penup<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 绘制表盘外框</span><span class="token keyword">def</span> <span class="token function">drawClock</span><span class="token punctuation">(</span>R<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 清空窗口，重置turtule状态为初始状态</span>    tt<span class="token punctuation">.</span>reset<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 画笔尺寸</span>    tt<span class="token punctuation">.</span>pensize<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">60</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        movePen<span class="token punctuation">(</span>R<span class="token punctuation">)</span>        <span class="token keyword">if</span> i <span class="token operator">%</span> <span class="token number">5</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>            tt<span class="token punctuation">.</span>fd<span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span>            movePen<span class="token punctuation">(</span><span class="token operator">-</span>R <span class="token operator">-</span> <span class="token number">20</span><span class="token punctuation">)</span>            movePen<span class="token punctuation">(</span>R <span class="token operator">+</span> <span class="token number">20</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> i <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>                <span class="token comment" spellcheck="true"># 写文本</span>                tt<span class="token punctuation">.</span>write<span class="token punctuation">(</span>int<span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">,</span> align<span class="token operator">=</span><span class="token string">"center"</span><span class="token punctuation">,</span> font<span class="token operator">=</span><span class="token punctuation">(</span><span class="token string">"Consolas"</span><span class="token punctuation">,</span> <span class="token number">14</span><span class="token punctuation">,</span> <span class="token string">"bold"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">elif</span> i <span class="token operator">==</span> <span class="token number">30</span><span class="token punctuation">:</span>                movePen<span class="token punctuation">(</span><span class="token number">25</span><span class="token punctuation">)</span>                tt<span class="token punctuation">.</span>write<span class="token punctuation">(</span>int<span class="token punctuation">(</span>i <span class="token operator">/</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">,</span> align<span class="token operator">=</span><span class="token string">"center"</span><span class="token punctuation">,</span> font<span class="token operator">=</span><span class="token punctuation">(</span><span class="token string">"Consolas"</span><span class="token punctuation">,</span> <span class="token number">14</span><span class="token punctuation">,</span> <span class="token string">"bold"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                movePen<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">25</span><span class="token punctuation">)</span>            <span class="token keyword">elif</span> <span class="token punctuation">(</span>i <span class="token operator">==</span> <span class="token number">25</span> <span class="token operator">or</span> i <span class="token operator">==</span> <span class="token number">35</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                movePen<span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span>                tt<span class="token punctuation">.</span>write<span class="token punctuation">(</span>int<span class="token punctuation">(</span>i <span class="token operator">/</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">,</span> align<span class="token operator">=</span><span class="token string">"center"</span><span class="token punctuation">,</span> font<span class="token operator">=</span><span class="token punctuation">(</span><span class="token string">"Consolas"</span><span class="token punctuation">,</span> <span class="token number">14</span><span class="token punctuation">,</span> <span class="token string">"bold"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                movePen<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">20</span><span class="token punctuation">)</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                tt<span class="token punctuation">.</span>write<span class="token punctuation">(</span>int<span class="token punctuation">(</span>i <span class="token operator">/</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">,</span> align<span class="token operator">=</span><span class="token string">"center"</span><span class="token punctuation">,</span> font<span class="token operator">=</span><span class="token punctuation">(</span><span class="token string">"Consolas"</span><span class="token punctuation">,</span> <span class="token number">14</span><span class="token punctuation">,</span> <span class="token string">"bold"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            movePen<span class="token punctuation">(</span><span class="token operator">-</span>R <span class="token operator">-</span> <span class="token number">20</span><span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token comment" spellcheck="true"># 绘制指定半径和颜色的点</span>            tt<span class="token punctuation">.</span>dot<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token string">"red"</span><span class="token punctuation">)</span>            movePen<span class="token punctuation">(</span><span class="token operator">-</span>R<span class="token punctuation">)</span>        tt<span class="token punctuation">.</span>right<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 表针的动态显示</span><span class="token keyword">def</span> <span class="token function">handsMove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    t <span class="token operator">=</span> datetime<span class="token punctuation">.</span>today<span class="token punctuation">(</span><span class="token punctuation">)</span>    second <span class="token operator">=</span> t<span class="token punctuation">.</span>second <span class="token operator">+</span> t<span class="token punctuation">.</span>microsecond <span class="token operator">*</span> <span class="token number">0.000001</span>    minute <span class="token operator">=</span> t<span class="token punctuation">.</span>minute <span class="token operator">+</span> second <span class="token operator">/</span> <span class="token number">60.0</span>    hour <span class="token operator">=</span> t<span class="token punctuation">.</span>hour <span class="token operator">+</span> minute <span class="token operator">/</span> <span class="token number">60.0</span>    secHand<span class="token punctuation">.</span>seth<span class="token punctuation">(</span><span class="token number">6</span> <span class="token operator">*</span> second<span class="token punctuation">)</span>    minHand<span class="token punctuation">.</span>seth<span class="token punctuation">(</span><span class="token number">6</span> <span class="token operator">*</span> minute<span class="token punctuation">)</span>    hurHand<span class="token punctuation">.</span>seth<span class="token punctuation">(</span><span class="token number">30</span> <span class="token operator">*</span> hour<span class="token punctuation">)</span>    tt<span class="token punctuation">.</span>tracer<span class="token punctuation">(</span><span class="token boolean">False</span><span class="token punctuation">)</span>    printer<span class="token punctuation">.</span>fd<span class="token punctuation">(</span><span class="token number">65</span><span class="token punctuation">)</span>    tt<span class="token punctuation">.</span>pencolor<span class="token punctuation">(</span><span class="token string">"green"</span><span class="token punctuation">)</span>    printer<span class="token punctuation">.</span>write<span class="token punctuation">(</span>Week<span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">,</span> align<span class="token operator">=</span><span class="token string">"center"</span><span class="token punctuation">,</span> font <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">"黑体"</span><span class="token punctuation">,</span> <span class="token number">14</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    printer<span class="token punctuation">.</span>back<span class="token punctuation">(</span><span class="token number">130</span><span class="token punctuation">)</span>    printer<span class="token punctuation">.</span>write<span class="token punctuation">(</span>Date<span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">,</span> align<span class="token operator">=</span><span class="token string">"center"</span><span class="token punctuation">,</span> font <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">"Consolas"</span><span class="token punctuation">,</span> <span class="token number">14</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 设置当前画笔位置为原点，方向朝东</span>    printer<span class="token punctuation">.</span>home<span class="token punctuation">(</span><span class="token punctuation">)</span>    tt<span class="token punctuation">.</span>tracer<span class="token punctuation">(</span><span class="token boolean">True</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 经过100ms后继续调用handsMove函数</span>    tt<span class="token punctuation">.</span>ontimer<span class="token punctuation">(</span>handsMove<span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 调用定义的函数，打开和关闭动画，为更新图纸设置延迟；</span>tt<span class="token punctuation">.</span>tracer<span class="token punctuation">(</span><span class="token boolean">False</span><span class="token punctuation">)</span>initial<span class="token punctuation">(</span><span class="token punctuation">)</span>drawClock<span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span>tt<span class="token punctuation">.</span>tracer<span class="token punctuation">(</span><span class="token boolean">True</span><span class="token punctuation">)</span>handsMove<span class="token punctuation">(</span><span class="token punctuation">)</span>tt<span class="token punctuation">.</span>mainloop<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="结果-2"><a href="#结果-2" class="headerlink" title="结果"></a>结果</h2><p><img src="https://upload-images.jianshu.io/upload_images/9747350-ded4ea1f60fe089a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/620" alt=""></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 编程语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> turtle </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python之设计模式、异常处理、模块与包、文件操作及编码</title>
      <link href="/2019/10/02/python-zhi-she-ji-mo-shi-yi-chang-chu-li-mo-kuai-yu-bao-wen-jian-cao-zuo-ji-bian-ma/"/>
      <url>/2019/10/02/python-zhi-she-ji-mo-shi-yi-chang-chu-li-mo-kuai-yu-bao-wen-jian-cao-zuo-ji-bian-ma/</url>
      
        <content type="html"><![CDATA[<h2 id="单例设计模式"><a href="#单例设计模式" class="headerlink" title="单例设计模式"></a>单例设计模式</h2><ul><li>设计模式：前人工作的总结与提炼，针对某一特定问题的比较成熟的解决方案，使用设计模式可提高代码复用率、可读性，可靠性；</li><li>单例设计模式：目的是让类所创建的对象在系统中只有唯一一个实例，让每一次执行<code>类名()</code>所返回的对象的内存地址都是同一个的；</li><li><code>__new__()</code>方法<ul><li>作用：在内存中给对象分配空间，返回对象的引用；</li><li>重写时一定要<code>return super().__new__(cls)</code>；</li></ul></li><li>只执行一次初始化工作的解决方法之一<ul><li>定义类属性<code>init_flag</code>用于标记是否执行过初始化动作，初始化为<code>False</code>；</li><li>然后在内置方法<code>__init__</code>方法中判断<code>init_flag</code>，若值为<code>False</code>则执行初始化操作，然后将<code>init_flag</code>置为<code>True</code>，若值为<code>True</code>则不再执行初始化动作；</li></ul></li></ul><h2 id="异常"><a href="#异常" class="headerlink" title="异常"></a>异常</h2><ul><li>异常捕获的目的：增强程序稳定性和健壮性；</li><li>捕获异常的语法</li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">try</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true">#尝试执行的代码</span>    <span class="token keyword">pass</span><span class="token keyword">except</span> exception1：    <span class="token comment" spellcheck="true"># TODO出现错误1后处理的代码</span>    <span class="token keyword">pass</span><span class="token keyword">except</span> exception2<span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># TODO出现错误2后处理的代码</span>    <span class="token keyword">pass</span><span class="token keyword">except</span> Exception<span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># TODO处理未知错误的代码</span>    <span class="token keyword">pass</span><span class="token keyword">finally</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># TODO无论是否有异常，都将执行的代码</span>    <span class="token keyword">pass</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>异常的传递</li></ul><p>当函数/方法执行出现异常时，调用函数/方法的一方也会出现异常，当传递到主程序仍无异常处理时，程序才会终止；</p><ul><li><p>抛出异常 </p><ul><li>创建一个<code>Exception</code>类的对象；</li><li>使用<code>raise</code>关键字抛出异常；</li></ul></li></ul><h2 id="模块与包"><a href="#模块与包" class="headerlink" title="模块与包"></a>模块与包</h2><ul><li>导入语法</li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 全部导入</span><span class="token keyword">import</span> 模块名<span class="token comment" spellcheck="true"># import 模块名 as 模块别名</span><span class="token comment" spellcheck="true"># 局部导入</span><span class="token keyword">from</span> 模块名 <span class="token keyword">import</span> 工具名<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>注意：导入的不同模块中存在相同函数名时，后导入的会覆盖先导入的模块中的函数；</p></li><li><p>原则：每个文件都应该可以做为被导入的模块；</p></li><li><p><code>__name_</code>属性可以让测试的代码只在测试的情况下被运行，而在导入时不会被执行；</p></li><li><p>如何制作发布压缩包，安装以及卸载</p><ul><li><p>1、创建<code>setup.py</code>文件</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> distutils<span class="token punctuation">.</span>core <span class="token keyword">import</span> setupsetup<span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">'包名'</span><span class="token punctuation">,</span>    version <span class="token operator">=</span> <span class="token string">'版本'</span><span class="token punctuation">,</span>    description <span class="token operator">=</span> <span class="token string">'描述信息'</span><span class="token punctuation">,</span>    long_description <span class="token operator">=</span> <span class="token string">'完整描述信息'</span><span class="token punctuation">,</span>    author <span class="token operator">=</span> <span class="token string">'作者'</span><span class="token punctuation">,</span>    email <span class="token operator">=</span> <span class="token string">'邮箱'</span><span class="token punctuation">,</span>    url <span class="token operator">=</span> <span class="token string">'个人主页'</span><span class="token punctuation">,</span>    py_modules <span class="token operator">=</span> <span class="token punctuation">[</span>包所包含的模块列表<span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>2、构建模块</p><p><code>python setup.py build</code></p></li><li><p>3、生成发布压缩包</p><p><code>python setup.py sdist</code></p></li><li><p>4、安装</p><p><code>python setup.py install</code></p></li><li><p>5、卸载</p><p>直接将所安装的软件包所安装的目录删除即可；</p></li></ul></li></ul><h2 id="文件操作"><a href="#文件操作" class="headerlink" title="文件操作"></a>文件操作</h2><ul><li><p>当我们进行文件操作时，要记得关闭文件，否则就会造成系统资源消耗，且后续的文件访问也会受到影响；</p></li><li><p>文件指针</p><ul><li>用于标记从哪个位置开始读取数据；</li><li>当第一次打开文件时，通常文件指针是指向文件开头位置；</li><li>进行文件读取方法后，指针会移动到读取内容的末尾；</li></ul></li><li><p>文件访问模式</p></li></ul><table><thead><tr><th align="right">访问模式</th><th align="left">功能</th></tr></thead><tbody><tr><td align="right"><code>r</code></td><td align="left">只读，文件指针位于文件开头，文件不存在则抛出异常</td></tr><tr><td align="right"><code>w</code></td><td align="left">只写，文件存在则覆盖，不存在则创建</td></tr><tr><td align="right"><code>a</code></td><td align="left">追加，文件存在则在文件末尾追加，不存在则创建后写入</td></tr><tr><td align="right"><code>r+</code></td><td align="left">读写，文件指针位于文件开头，文件不存在则抛出异常</td></tr><tr><td align="right"><code>w+</code></td><td align="left">读写，文件存在则覆盖，不存在则创建</td></tr><tr><td align="right"><code>a+</code></td><td align="left">读写，文件指针置于文件末尾，不存在则创建后写入</td></tr></tbody></table><ul><li>文件及目录操作</li></ul><table><thead><tr><th align="right">方法名</th><th align="left">说明</th></tr></thead><tbody><tr><td align="right"><code>rename</code></td><td align="left">重命名文件，<code>os.rename('源文件'， '目标文件')</code></td></tr><tr><td align="right"><code>remove</code></td><td align="left">删除文件， <code>os.remove('文件名')</code></td></tr><tr><td align="right"><code>listdir</code></td><td align="left">目录列表，<code>os.listdir('目录名')</code></td></tr><tr><td align="right"><code>mkdir</code></td><td align="left">创建目录，<code>os.mkdir('目录名')</code></td></tr><tr><td align="right"><code>rmdir</code></td><td align="left">删除目录，<code>os.rmdir('目录名')</code></td></tr><tr><td align="right"><code>getcwd</code></td><td align="left">获取当前目录，<code>os.getcwd()</code></td></tr><tr><td align="right"><code>chdir</code></td><td align="left">修改工作目录，<code>os.chdir('目标目录')</code></td></tr><tr><td align="right"><code>path.isdir</code></td><td align="left">判断是否为文件，<code>os.path.isdir('文件路径')</code></td></tr></tbody></table><h2 id="文本编码"><a href="#文本编码" class="headerlink" title="文本编码"></a>文本编码</h2><ul><li><code>Python2.x</code>中默认使用<code>ASCII</code>编码，<code>Python3.x</code>默认使用<code>utf-8</code>编码；</li><li><code>python2.x</code>中在字符串前边加上<code>u</code>用于告知解释器这是一个<code>utf-8</code>编码格式的字符串；</li></ul><h2 id="内建函数eval"><a href="#内建函数eval" class="headerlink" title="内建函数eval"></a>内建函数<code>eval</code></h2><ul><li>功能：将字符串当成一个有效的表达式来求值并返回结算结果； </li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 编程语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python中的面向对象</title>
      <link href="/2019/10/02/python-zhong-de-mian-xiang-dui-xiang/"/>
      <url>/2019/10/02/python-zhong-de-mian-xiang-dui-xiang/</url>
      
        <content type="html"><![CDATA[<h2 id="面向对象特点"><a href="#面向对象特点" class="headerlink" title="面向对象特点"></a>面向对象特点</h2><ul><li>注重对象与职责，不同对象，不同职责；</li><li>应对复杂项目开发，提供固定模版；</li><li>基于面向过程；</li><li>封装：根据功能将属性和方法封装到一个抽象的类中；</li><li>继承：实现代码复用，相同代码不需多次编写；</li><li>多态：不同对象调用相同方法得出不同结果，增加了代码的灵活度；</li></ul><h2 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h2><p>类创建出来的一个具体存在，可直接使用，拥有类所具有的属性与方法；</p><h2 id="类与对象的关系"><a href="#类与对象的关系" class="headerlink" title="类与对象的关系"></a>类与对象的关系</h2><ul><li>类是模版，对象根据类创建而出，先有类再有对象；</li><li>类只有一个，但对象可以有多个；</li><li>类中定义属性与方法，对象中只能具有所创建而出的类所具有的属性与方法；</li></ul><h2 id="类的设计三要素"><a href="#类的设计三要素" class="headerlink" title="类的设计三要素"></a>类的设计三要素</h2><ul><li>类名：一般满足大驼峰命名法；</li><li>属性：一类事物所具有的特征；</li><li>方法：一类事物所具有的行为；</li></ul><h2 id="添加类的属性"><a href="#添加类的属性" class="headerlink" title="添加类的属性"></a>添加类的属性</h2><ul><li>在创建类之后，对象可以在外部直接使用<code>.属性名</code> 给对象增加属性，但是这种方式不推荐使用，因为它并没有将属性封装到类的内部中，只是对象临时的属性；</li><li>在初始化方法内部定义属性之后，在使用该类创建新对象时，所创建的新对象都会拥有该属性，使用方法：<code>self.属性名 = 属性初始值</code>；</li></ul><h2 id="对象及内置方法生命周期"><a href="#对象及内置方法生命周期" class="headerlink" title="对象及内置方法生命周期"></a>对象及内置方法生命周期</h2><table><thead><tr><th align="center">方法</th><th align="center">功能</th></tr></thead><tbody><tr><td align="center"><code>__init_</code></td><td align="center">初始化对象并设置属性</td></tr><tr><td align="center"><code>__del_</code></td><td align="center">销毁对象</td></tr><tr><td align="center"><code>__str_</code></td><td align="center">必须返回一个字符串，定制变量的输出信息</td></tr></tbody></table><ul><li>对象从调用<code>类名()</code>创建时生命周期即开始；</li><li>对象生命周期内，既可以访问对象属性，也可以调用对象方法；</li><li>对象的<code>__del__</code>方法一旦调用，对象的生命周期即结束；</li></ul><h2 id="身份运算符"><a href="#身份运算符" class="headerlink" title="身份运算符"></a>身份运算符</h2><ul><li>功能：用于比较两个对象内存地址是否一致–即判断是否是对同一对象的引用；</li><li><code>is</code>和<code>==</code>的区别<ul><li><code>is</code>用于判断两个变量引用对象是否为同一个；</li><li><code>==</code>用于判断引用变量的值是否相等；</li></ul></li></ul><h2 id="私有属性与方法"><a href="#私有属性与方法" class="headerlink" title="私有属性与方法"></a>私有属性与方法</h2><ul><li>定义方式：属性名或方法名之前增加两个下划线，则定义的属性或方法就是私有属性或方法；</li><li>特点：在对象方法外部是不能直接访问的，只有在方法内部才能够访问；</li><li>子类对象不能直接访问父类私有属性或私有方法，但可以通过父类的公有方法间接访问私有属性或私有方法；</li></ul><h2 id="伪私有属性与方法"><a href="#伪私有属性与方法" class="headerlink" title="伪私有属性与方法"></a>伪私有属性与方法</h2><ul><li>对于定义的私有属性与方法，通过<code>_类名__名称</code>的方式即可访问，所以说私有属性或方法并非真正意义的私有，而是内部通过特殊处理伪装起来使得外界无法访问的。虽然私有属性或方法我们都可以访问，但日常开发中最好不要使用这种方式来访问私有属性或方法；</li></ul><h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a><strong>注意</strong></h2><ul><li>内置函数<code>__str__</code>必须返回一个字符串；</li><li>对象的方法内部，可以直接访问对象属性；</li><li>对于多个对象之间，各自的属性是互不干扰的；</li></ul><h2 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h2><ul><li>语法</li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">A</span><span class="token punctuation">(</span>B<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">pass</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>子类继承于父类，拥有父类所封装的属性与方法，无需二次开发；</li><li>子类只需要封装属于自己特有的，有别于父类的属性与方法即可；</li><li>特性：传递性；</li><li>方法重写：<ul><li>覆盖基类方法；</li><li>对基类方法进行拓展，需要使用<code>super().父类方法</code>来调用父类方法的执行，然后在方法中其他位置进行对子类方法的扩展；</li></ul></li></ul><h2 id="多继承"><a href="#多继承" class="headerlink" title="多继承"></a>多继承</h2><ul><li>语法</li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> 子类名<span class="token punctuation">(</span>父类名<span class="token number">1</span><span class="token punctuation">,</span> 父类名<span class="token number">2</span><span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">pass</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>注意事项<ul><li>父类名应该避免重复；</li><li>不同父类中的属性或方法应该避免同名；</li></ul></li></ul><h2 id="新式类与经典类"><a href="#新式类与经典类" class="headerlink" title="新式类与经典类"></a>新式类与经典类</h2><ul><li>新式类</li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">A</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">pass</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>经典类</li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">A</span><span class="token punctuation">:</span>    <span class="token keyword">pass</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="实例化"><a href="#实例化" class="headerlink" title="实例化"></a>实例化</h2><ul><li>每个对象实例化是都有自己独立的内存空间，用于保存各自不同的属性；</li><li>而多个对象的方法在内存中只有一份，在调用方法时需要吧对象的引用传递到方法内部；  </li></ul><h2 id="类方法"><a href="#类方法" class="headerlink" title="类方法"></a>类方法</h2><ul><li>语法</li></ul><pre class="line-numbers language-python"><code class="language-python">@classmethod<span class="token keyword">def</span> 类方法名<span class="token punctuation">(</span>cls<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">pass</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>在类方法内部<ul><li>通过<code>cls.</code>访问类的属性；</li><li>通过<code>cls.</code>调用其他类方法；</li></ul></li></ul><h2 id="静态方法"><a href="#静态方法" class="headerlink" title="静态方法"></a>静态方法</h2><ul><li>需要封装为静态方法的情况：<ul><li>无需访问实例属性或实例方法；</li><li>无需访问类属性或类方法；</li></ul></li><li>语法</li></ul><pre class="line-numbers language-python"><code class="language-python">@staticmethod<span class="token keyword">def</span> 静态方法名<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">pass</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="实例方法、类方法、静态方法之间的区别"><a href="#实例方法、类方法、静态方法之间的区别" class="headerlink" title="实例方法、类方法、静态方法之间的区别"></a>实例方法、类方法、静态方法之间的区别</h2><ul><li>实例方法：方法内部需要访问实例属性，实例方法内部需使用<code>类名.</code>访问类属性；</li><li>类方法：方法内部只需要访问<code>类属性</code>；</li><li>静态方法：方法内部不需访问<code>实例属性</code>与<code>类属性</code>；</li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 编程语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python爬虫前奏</title>
      <link href="/2019/10/02/python-pa-chong-qian-zou/"/>
      <url>/2019/10/02/python-pa-chong-qian-zou/</url>
      
        <content type="html"><![CDATA[<h2 id="网络爬虫"><a href="#网络爬虫" class="headerlink" title="网络爬虫"></a>网络爬虫</h2><ul><li><p>定义<br>通过模拟人请求网站的行为，然后能够自动请求网页并将数据抓取下来，再使用一定规则将其中我们所需要的有价值的数据提取出来存储，以便我们进行分析；</p></li><li><p>分类</p><ul><li>通用爬虫<br>搜索引擎抓取系统的一个重要组成部分，主要将网页抓取下来，形成一个互联网的内容备份镜像；</li><li>聚焦爬虫<br>面向特定需求的网络爬虫，与通用爬虫的区别在于它能够在对网页抓取的同时对有价值的内容进行筛选，以满足我们对数据的需求；</li></ul></li></ul><h2 id="http-amp-https"><a href="#http-amp-https" class="headerlink" title="http&amp;https"></a>http&amp;https</h2><ul><li><p>http<br>HyperText Transfer Protocol，超文本传输协议，一种发布和接收HTML页面的方法，默认端口80；</p></li><li><p>https<br>Hypertext Transfer Protocol Secure，http协议的加密版，在http下加入SSL层，默认端口443；</p></li></ul><h2 id="URL"><a href="#URL" class="headerlink" title="URL"></a>URL</h2><ul><li><p>定义<br>Uniform Resource Locator，统一资源定位符；</p></li><li><p>组成：<code>scheme://host:port/path/?query-string=xxx#anchor</code>，除开英文字母、数字和部分符号外，其他都是<code>%+16进制码</code>进行编码；</p><ul><li>scheme：访问协议，常为http、https及ftp；</li><li>host：主机/域名；</li><li>port：端口号；</li><li>path：查找路径；</li><li>query-string：查询字符串；</li><li>anchor：锚点，用于前端的页面定位；</li></ul></li></ul><h2 id="常见请求方式"><a href="#常见请求方式" class="headerlink" title="常见请求方式"></a>常见请求方式</h2><ul><li><p>get<br>只需要从服务器获取数据，而不会对服务器资源产生影响时所使用的方式；</p></li><li><p>post<br>向服务器发送数据如登陆操作、上传文件等，会对服务器资源产生影响时所采用的方式；</p></li></ul><h2 id="常见请求头参数"><a href="#常见请求头参数" class="headerlink" title="常见请求头参数"></a>常见请求头参数</h2><ul><li><p>Cookie<br>由之前服务器通过Set-Cookies设置的一个HTTP协议；</p></li><li><p>Referer<br>表示浏览器之前访问的页面，可以认为是之前访问页面的链接将浏览器带到当前页面；</p></li><li><p>User-Agent<br>浏览器的身份表示字符串；</p></li></ul><h2 id="响应状态码"><a href="#响应状态码" class="headerlink" title="响应状态码"></a>响应状态码</h2><p><img src="http://upload-images.jianshu.io/upload_images/9747350-6f4585d02677b854?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p><img src="http://upload-images.jianshu.io/upload_images/9747350-10675fd4eb347b66.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><h2 id="urllib库"><a href="#urllib库" class="headerlink" title="urllib库"></a>urllib库</h2><p>Python中常用的一个网络请求库，可用于模拟浏览器的行为，向指定服务器发送请求，同时也可以向服务器请求数据，然后将服务器返回的数据保存，这是Python3中自带的一个库，直接可以使用，不需要再安装；</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>本文总结了学习Python爬虫所需要的一些基础知识，通过学习，你将对爬虫的定义以及一些网络知识有所了解，为接下来进一步学习Python爬虫做好准备；</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 编程语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python爬虫中的网络请求</title>
      <link href="/2019/10/02/python-pa-chong-zhong-de-wang-luo-qing-qiu/"/>
      <url>/2019/10/02/python-pa-chong-zhong-de-wang-luo-qing-qiu/</url>
      
        <content type="html"><![CDATA[<h2 id="urllib库中常用函数的使用"><a href="#urllib库中常用函数的使用" class="headerlink" title="urllib库中常用函数的使用"></a>urllib库中常用函数的使用</h2><ul><li><p><strong>安装</strong><br>urllib库是安装python时自带的一个库，不需要再另外安装；</p></li><li><p><strong>使用</strong></p></li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/python3</span><span class="token comment" spellcheck="true"># -*- coding:utf-8 -*-</span><span class="token comment" spellcheck="true"># @Time    : 2018-11-10 21:25</span><span class="token comment" spellcheck="true"># @Author  : Manu</span><span class="token comment" spellcheck="true"># @Site    : </span><span class="token comment" spellcheck="true"># @File    : urllib_lib.py</span><span class="token comment" spellcheck="true"># @Software: PyCharm</span><span class="token keyword">from</span> urllib <span class="token keyword">import</span> request<span class="token keyword">from</span> urllib <span class="token keyword">import</span> parse<span class="token comment" spellcheck="true"># ulropen</span><span class="token comment" spellcheck="true"># 打开网页请求</span>response <span class="token operator">=</span> request<span class="token punctuation">.</span>urlopen<span class="token punctuation">(</span><span class="token string">'http://www.baidu.com'</span><span class="token punctuation">)</span>text <span class="token operator">=</span> response<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># urlretrieve</span><span class="token comment" spellcheck="true"># 将网页文件保存到本地</span>csdnhtml <span class="token operator">=</span> request<span class="token punctuation">.</span>urlretrieve<span class="token punctuation">(</span><span class="token string">'https://blog.csdn.net/github_39655029'</span><span class="token punctuation">,</span> <span class="token string">'csdn.html'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>csdnhtml<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># urlencode</span><span class="token comment" spellcheck="true"># 想浏览器发送请求时，将字典数据转换为URL编码的数据</span>data <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'team'</span><span class="token punctuation">:</span><span class="token string">'Spurs'</span><span class="token punctuation">,</span> <span class="token string">'Coach'</span><span class="token punctuation">:</span><span class="token string">'波波'</span><span class="token punctuation">,</span> <span class="token string">'age'</span><span class="token punctuation">:</span><span class="token string">'69'</span><span class="token punctuation">}</span>qs <span class="token operator">=</span> parse<span class="token punctuation">.</span>urlencode<span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>qs<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># parse_qs</span><span class="token comment" spellcheck="true"># 将编码后的url进行解析</span>qs <span class="token operator">=</span> <span class="token string">'age=69&amp;team=Spurs&amp;Coach=%E6%B3%A2%E6%B3%A2'</span><span class="token keyword">print</span><span class="token punctuation">(</span>parse<span class="token punctuation">.</span>parse_qs<span class="token punctuation">(</span>qs<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># urlparse&amp;urlsplit</span><span class="token comment" spellcheck="true"># 将url中的各个部分进行分割，两者不同在于urlparse多了一个params属性</span>url <span class="token operator">=</span> <span class="token string">'https://blog.csdn.net/github_39655029'</span>url_list <span class="token operator">=</span> parse<span class="token punctuation">.</span>urlsplit<span class="token punctuation">(</span>url<span class="token punctuation">)</span>url_list <span class="token operator">=</span> parse<span class="token punctuation">.</span>urlparse<span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>url_list<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># request.Request类</span><span class="token comment" spellcheck="true"># 增加一些请求头</span>headers <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token string">'User-Agent'</span><span class="token punctuation">:</span><span class="token string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64) '</span>                 <span class="token string">'AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.77 Safari/537.36'</span><span class="token punctuation">}</span>req <span class="token operator">=</span> request<span class="token punctuation">.</span>Request<span class="token punctuation">(</span>url<span class="token punctuation">,</span> headers<span class="token operator">=</span>headers<span class="token punctuation">)</span>res <span class="token operator">=</span> request<span class="token punctuation">.</span>urlopen<span class="token punctuation">(</span>req<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># ProxyHandler处理器</span><span class="token comment" spellcheck="true"># 设置代理服务器，防止网站检测时被检测出来</span><span class="token comment" spellcheck="true"># 常用代理</span><span class="token comment" spellcheck="true"># 西刺免费代理IP：http://www.xicidaili.com</span><span class="token comment" spellcheck="true"># 快代理：http://www.kuaidaili.com</span><span class="token comment" spellcheck="true"># 代理云：http://www.dailiyun.com</span><span class="token comment" spellcheck="true"># 原理：在请求目的网站前，先请求代理服务器，然后经服务器请求目的网站，代理服务器获取目的网站数据后，在再转发给我们</span>handler <span class="token operator">=</span> request<span class="token punctuation">.</span>ProxyHandler<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">'https'</span><span class="token punctuation">:</span><span class="token string">'223.145.212.16:8118'</span><span class="token punctuation">}</span><span class="token punctuation">)</span>opener <span class="token operator">=</span> request<span class="token punctuation">.</span>build_opener<span class="token punctuation">(</span>handler<span class="token punctuation">)</span>req <span class="token operator">=</span> request<span class="token punctuation">.</span>Request<span class="token punctuation">(</span><span class="token string">'http://httpbin.org/ip'</span><span class="token punctuation">)</span>resq <span class="token operator">=</span> opener<span class="token punctuation">.</span>open<span class="token punctuation">(</span>req<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>resq<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Cookie"><a href="#Cookie" class="headerlink" title="Cookie"></a>Cookie</h2><ul><li><strong>格式</strong>：<pre class="line-numbers language-shell"><code class="language-shell">Set-Cookie：NAME=VALUE：Expires/Max=DATE:Path=PATH:Domain=DOMAIN_NAME:SECURE<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>NAME：cookie的名字；</li><li>VALUE：cookie的值；</li><li>Expires：cookie的过期时间；</li><li>Path：cookie作用的路径；</li><li>Domain：cookie作用的域名；</li><li>SECURE：是否作用于https协议；</li></ul></li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> urllib <span class="token keyword">import</span> request<span class="token keyword">from</span> http<span class="token punctuation">.</span>cookiejar <span class="token keyword">import</span> MozillaCookieJar<span class="token comment" spellcheck="true"># cookie保存与加载</span>cookiejar <span class="token operator">=</span> MozillaCookieJar<span class="token punctuation">(</span><span class="token string">'cookie.txt'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 加载</span>cookiejar<span class="token punctuation">.</span>load<span class="token punctuation">(</span>ignore_discard<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>handler <span class="token operator">=</span> request<span class="token punctuation">.</span>HTTPCookieProcessor<span class="token punctuation">(</span>cookiejar<span class="token punctuation">)</span>opener <span class="token operator">=</span> request<span class="token punctuation">.</span>build_opener<span class="token punctuation">(</span>handler<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 保存</span>resp <span class="token operator">=</span> opener<span class="token punctuation">.</span>open<span class="token punctuation">(</span><span class="token string">'https://www.baidu.com'</span><span class="token punctuation">)</span>cookiejar<span class="token punctuation">.</span>save<span class="token punctuation">(</span>ignore_discard<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token keyword">for</span> cookie <span class="token keyword">in</span> cookiejar<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>cookie<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="requests库的基本使用"><a href="#requests库的基本使用" class="headerlink" title="requests库的基本使用"></a>requests库的基本使用</h2><ul><li><strong>安装</strong></li></ul><p>在控制命令台使用pip命令安装即可，使用命令如下；</p><pre class="line-numbers language-shell"><code class="language-shell">pip install requests<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li><strong>使用</strong></li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> requests<span class="token comment" spellcheck="true"># 发送get请求</span>kw <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'kw'</span><span class="token punctuation">:</span><span class="token string">'村雨'</span><span class="token punctuation">}</span>headers <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token string">'User-Agent'</span><span class="token punctuation">:</span><span class="token string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64) '</span>                 <span class="token string">'AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.77 Safari/537.36'</span><span class="token punctuation">}</span>response <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'http://www.baidu.com/s'</span><span class="token punctuation">,</span> params<span class="token operator">=</span>kw<span class="token punctuation">,</span> headers<span class="token operator">=</span>headers<span class="token punctuation">,</span> verify <span class="token operator">=</span> <span class="token boolean">False</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 直接从网络抓取的内容，未经编码，是bytes类型</span><span class="token keyword">print</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>content<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 将response.content进行解码的字符串，解码需要指定编码方式</span><span class="token keyword">print</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>text<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 返回状态码</span><span class="token keyword">print</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>status_code<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 查看相应头部字符编码</span><span class="token keyword">print</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>encoding<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 查看完整url地址</span><span class="token keyword">print</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>url<span class="token punctuation">)</span><span class="token keyword">with</span> open<span class="token punctuation">(</span><span class="token string">'cunyu.html'</span><span class="token punctuation">,</span> <span class="token string">'w'</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">'utf-8 '</span><span class="token punctuation">)</span> <span class="token keyword">as</span> cy<span class="token punctuation">:</span>    cy<span class="token punctuation">.</span>write<span class="token punctuation">(</span>response<span class="token punctuation">.</span>content<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 查看cookies</span><span class="token keyword">print</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>cookies<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 代理使用</span><span class="token comment" spellcheck="true"># proxy = {'http':'218.25.131.121:33859'}</span><span class="token comment" spellcheck="true"># res = requests.get('http://www.baidu.com', headers=headers, proxies=proxy)</span><span class="token comment" spellcheck="true"># print(res.text)</span><span class="token comment" spellcheck="true"># 多次请求中使用cookies，使用Session</span>session <span class="token operator">=</span> requests<span class="token punctuation">.</span>Session<span class="token punctuation">(</span><span class="token punctuation">)</span>session<span class="token punctuation">.</span>post<span class="token punctuation">(</span><span class="token string">'http://www.baidu.com'</span><span class="token punctuation">,</span> headers<span class="token operator">=</span>headers<span class="token punctuation">,</span> data<span class="token operator">=</span>kw<span class="token punctuation">)</span>res <span class="token operator">=</span> session<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'http://www.baidu.com'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'demo'</span> <span class="token operator">+</span> res<span class="token punctuation">.</span>text<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>本篇介绍了爬虫中有关网络请求的相关知识，通过阅读，你将了解到<code>urllib</code>和<code>requests</code>库的相关使用方法，并对<code>Cookies</code>有进一步的了解，如果你有更好的想法和建议，欢迎留言交流。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 编程语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据解析中用到的XPath &amp; lxml库</title>
      <link href="/2019/10/02/shu-ju-jie-xi-zhong-yong-dao-de-xpath-lxml-ku/"/>
      <url>/2019/10/02/shu-ju-jie-xi-zhong-yong-dao-de-xpath-lxml-ku/</url>
      
        <content type="html"><![CDATA[<h1 id="XPath"><a href="#XPath" class="headerlink" title="XPath"></a>XPath</h1><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><p>即XML路径语言(XML Path Language)，是一种用来确定XML文档中某部分位置的语言，它基于XML的树状结构，提供在数据结构树中寻找节点的能力，也适用于HTML文档中；</p><h3 id="开发工具"><a href="#开发工具" class="headerlink" title="开发工具"></a>开发工具</h3><ul><li><strong>Chrome</strong></li></ul><p>在Chrome的应用商店搜索XPath Helper，然后安装这个插件即可；<br><img src="http://upload-images.jianshu.io/upload_images/9747350-a74b45cdb8169181?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><ul><li><strong>Firefox</strong></li></ul><p>同样的方式，在应用中心查找XPath Checker，然后安装这个插件即可，由于未使用Firefox，便不再演示；</p><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><ul><li><strong>节点选取</strong></li></ul><table><thead><tr><th>表达式</th><th>描述</th><th>示例</th></tr></thead><tbody><tr><td>nodename</td><td>选词当前节点下节点的所有子节点</td><td>div</td></tr><tr><td>/</td><td>若在最前，则表示从根节点开始选取，否则选择某节点下的某个节点</td><td>/div</td></tr><tr><td>//</td><td>从全局节点中选取某一节点所在所有位置</td><td>//div</td></tr><tr><td>@</td><td>选取某一节点属性</td><td>//div[@color]</td></tr><tr><td>.</td><td>选取当前节点</td><td>./div</td></tr><tr><td>..</td><td>选取当前节点的父节点</td><td>../div</td></tr></tbody></table><ul><li><strong>谓语</strong></li></ul><table><thead><tr><th>路径表达式</th><th>描述</th></tr></thead><tbody><tr><td>/markstore/mark[1]</td><td>选取markstore下第一个元素</td></tr><tr><td>/markstore/mark[last()]</td><td>选取markstore下倒数第二个mark元素</td></tr><tr><td>markstore/mark[position()&lt;5]</td><td>选取markstore下前四个子元素</td></tr><tr><td>//mark[@id]</td><td>选取拥有id的mark元素</td></tr><tr><td>//mark[@id=‘k’]</td><td>选取id属性为k的mark元素</td></tr></tbody></table><ul><li><strong>通配符</strong></li></ul><table><thead><tr><th>通配符</th><th>描述</th></tr></thead><tbody><tr><td>*</td><td>匹配任意节点</td></tr><tr><td>@*</td><td>匹配节点中的任意属性</td></tr><tr><td>node()</td><td>匹配任何类型的节点</td></tr></tbody></table><h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><ul><li><strong>使用方式</strong>：//获取当前页面所有元素，然后写标签名，最后写谓词进行提取；</li><li><strong>/和//的区别</strong>：/代表只获取直接子节点，//代表获取子孙节点；</li></ul><h1 id="lxml库"><a href="#lxml库" class="headerlink" title="lxml库"></a>lxml库</h1><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>使用如下命令安装即可，</p><pre class="line-numbers language-shell"><code class="language-shell">pip install lxml<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> lxml <span class="token keyword">import</span> etreetext <span class="token operator">=</span> <span class="token triple-quoted-string string">'''&lt;div>    &lt;ul>        &lt;li class="id-1">&lt;a href="www.baidu.com">baidu&lt;/a>&lt;/li>        &lt;li class="id-2">&lt;a href="www.google.com">Google&lt;/a>&lt;/li>        &lt;li class="id-3 id-4" name='item'>&lt;a href="www.taobao.com">Taobao&lt;/li>    &lt;/ul>&lt;/div>'''</span><span class="token comment" spellcheck="true"># 解析字符串为html文档</span>html <span class="token operator">=</span> etree<span class="token punctuation">.</span>HTML<span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 字符串序列化为html文档,会自动修正HTML文本</span>result <span class="token operator">=</span> etree<span class="token punctuation">.</span>tostring<span class="token punctuation">(</span>html<span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 从文件读取</span>parser <span class="token operator">=</span> etree<span class="token punctuation">.</span>HTMLParser<span class="token punctuation">(</span>encoding<span class="token operator">=</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span>html <span class="token operator">=</span> etree<span class="token punctuation">.</span>parse<span class="token punctuation">(</span><span class="token string">'csdn.html'</span><span class="token punctuation">,</span> parser<span class="token operator">=</span>parser<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 获取所有a标签的href属性</span>aList <span class="token operator">=</span> html<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'//a/@href'</span><span class="token punctuation">)</span><span class="token keyword">for</span> a <span class="token keyword">in</span> aList<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 属性多值匹配</span>html <span class="token operator">=</span> etree<span class="token punctuation">.</span>HTML<span class="token punctuation">(</span>text<span class="token punctuation">)</span>result <span class="token operator">=</span> html<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'//li[contains(@class, "id-4")/href/text()]'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 多属性匹配</span>html <span class="token operator">=</span> etree<span class="token punctuation">.</span>HTML<span class="token punctuation">(</span>text<span class="token punctuation">)</span>result <span class="token operator">=</span> html<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'//li[contains(@class, "id-4") and @name="item"]/href/text()'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 按序选择</span>text <span class="token operator">=</span> <span class="token triple-quoted-string string">"""&lt;div> &lt;ul> &lt;li class="item-0">&lt;a href="link1.html">first item&lt;/a>&lt;/li> &lt;li class="item-1">&lt;a href="link2.html">second item&lt;/a>&lt;/li> &lt;li class="item-inactive">&lt;a href="link3.html">third item&lt;/a>&lt;/li> &lt;li class="item-1">&lt;a href="link4.html">fourth item&lt;/a>&lt;/li> &lt;li class="item-0">&lt;a href="links.html">fifth item&lt;/a>&lt;/li> &lt;/ul> &lt;/div>"""</span>html <span class="token operator">=</span> etree<span class="token punctuation">.</span>HTML<span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 注意，xpath匹配中序号是以1开头的，而不是以0开头的</span>result <span class="token operator">=</span> html<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'//li[1]/a/text()'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span>result <span class="token operator">=</span> html<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'//li[last()]/a//text()'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span>result <span class="token operator">=</span> html<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'//li[last()-2]/a/text()'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span>result <span class="token operator">=</span> html<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'//li[position()&lt;3]/a/text()'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>本文主要介绍了爬虫中数据解析时所需要的用的XPath和lxml库，介绍了它们的安装方式和简单的使用方式，如果你有更好的建议和想法，欢迎留言指正。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 编程语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> XPath </tag>
            
            <tag> lxml </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python爬取豆瓣电影当前上映电影信息</title>
      <link href="/2019/10/02/python-pa-qu-dou-ban-dian-ying-dang-qian-shang-ying-dian-ying-xin-xi/"/>
      <url>/2019/10/02/python-pa-qu-dou-ban-dian-ying-dang-qian-shang-ying-dian-ying-xin-xi/</url>
      
        <content type="html"><![CDATA[<h1 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h1><p>爬取当前时间段豆瓣电影中正在上映的电影的相关信息，如电影名、导演、演员表、上映时间、制作方等信息，然后再通过字典的方式，将其保存在本地文件当中，以便我们查询；</p><h1 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h1><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/python3</span><span class="token comment" spellcheck="true"># -*- coding:utf-8 -*-</span><span class="token comment" spellcheck="true"># @Time    : 2018-11-15 8:24</span><span class="token comment" spellcheck="true"># @Author  : Manu</span><span class="token comment" spellcheck="true"># @Site    : </span><span class="token comment" spellcheck="true"># @File    : doubanMovie.py</span><span class="token comment" spellcheck="true"># @Software: PyCharm</span><span class="token keyword">import</span> pprint<span class="token keyword">import</span> requests<span class="token keyword">from</span> lxml <span class="token keyword">import</span> etree<span class="token triple-quoted-string string">'''爬取豆瓣电影上当前正在上映的电影信息，并保存到文件中'''</span>HEADERS <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token string">'User-Agent'</span><span class="token punctuation">:</span><span class="token string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64) '</span>                 <span class="token string">'AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36'</span><span class="token punctuation">,</span>    <span class="token string">'Refer'</span><span class="token punctuation">:</span><span class="token string">'https://movie.douban.com/'</span><span class="token punctuation">}</span>url <span class="token operator">=</span> <span class="token string">'https://movie.douban.com/cinema/nowplaying/'</span>response <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">,</span> headers<span class="token operator">=</span>HEADERS<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>text<span class="token punctuation">)</span>text <span class="token operator">=</span> response<span class="token punctuation">.</span>texthtml <span class="token operator">=</span> etree<span class="token punctuation">.</span>HTML<span class="token punctuation">(</span>text<span class="token punctuation">)</span>ul <span class="token operator">=</span> html<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">"//ul[@class='lists']"</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>lis <span class="token operator">=</span> ul<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'./li'</span><span class="token punctuation">)</span>movies <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">for</span> li <span class="token keyword">in</span> lis<span class="token punctuation">:</span>    title <span class="token operator">=</span> li<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'@data-title'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>    score <span class="token operator">=</span> li<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'@data-score'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>    release <span class="token operator">=</span> li<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'@data-release'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>    duration <span class="token operator">=</span> li<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'@data-duration'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>    region <span class="token operator">=</span> li<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'@data-region'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>    director <span class="token operator">=</span> li<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'@data-director'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>    actors <span class="token operator">=</span> li<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'@data-actors'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>    thumbnail <span class="token operator">=</span> li<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'.//img/@src'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>    movie <span class="token operator">=</span> <span class="token punctuation">{</span>        <span class="token string">'电影名'</span><span class="token punctuation">:</span>title<span class="token punctuation">,</span>        <span class="token string">'评分'</span><span class="token punctuation">:</span>score<span class="token punctuation">,</span>        <span class="token string">"上映时间"</span><span class="token punctuation">:</span>release<span class="token punctuation">,</span>        <span class="token string">'片长'</span><span class="token punctuation">:</span>duration<span class="token punctuation">,</span>        <span class="token string">'制片国家'</span><span class="token punctuation">:</span>region<span class="token punctuation">,</span>        <span class="token string">'导演'</span><span class="token punctuation">:</span>director<span class="token punctuation">,</span>        <span class="token string">'演员表'</span><span class="token punctuation">:</span>actors<span class="token punctuation">,</span>        <span class="token string">'海报'</span><span class="token punctuation">:</span>thumbnail    <span class="token punctuation">}</span>    movies<span class="token punctuation">.</span>append<span class="token punctuation">(</span>movie<span class="token punctuation">)</span>pprint<span class="token punctuation">.</span>pprint<span class="token punctuation">(</span>movies<span class="token punctuation">)</span><span class="token keyword">with</span> open<span class="token punctuation">(</span><span class="token string">'豆瓣正在上映.txt'</span><span class="token punctuation">,</span> <span class="token string">'w'</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> movie_file<span class="token punctuation">:</span>    <span class="token keyword">for</span> movie <span class="token keyword">in</span> movies<span class="token punctuation">:</span>        movie_file<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">'电影名：'</span> <span class="token operator">+</span> movie<span class="token punctuation">[</span><span class="token string">'电影名'</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">'\n'</span><span class="token punctuation">)</span>        movie_file<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">'评分：'</span> <span class="token operator">+</span> movie<span class="token punctuation">[</span><span class="token string">'评分'</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">'\n'</span><span class="token punctuation">)</span>        movie_file<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">'上映时间：'</span> <span class="token operator">+</span> movie<span class="token punctuation">[</span><span class="token string">'上映时间'</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">'\n'</span><span class="token punctuation">)</span>        movie_file<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">'片长：'</span> <span class="token operator">+</span> movie<span class="token punctuation">[</span><span class="token string">'片长'</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">'\n'</span><span class="token punctuation">)</span>        movie_file<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">'制片国家：'</span> <span class="token operator">+</span> movie<span class="token punctuation">[</span><span class="token string">'制片国家'</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">'\n'</span><span class="token punctuation">)</span>        movie_file<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">'导演：'</span> <span class="token operator">+</span> movie<span class="token punctuation">[</span><span class="token string">'导演'</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">'\n'</span><span class="token punctuation">)</span>        movie_file<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">'演员表：'</span> <span class="token operator">+</span> movie<span class="token punctuation">[</span><span class="token string">'演员表'</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">'\n'</span><span class="token punctuation">)</span>        movie_file<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">'海报：'</span> <span class="token operator">+</span> movie<span class="token punctuation">[</span><span class="token string">'海报'</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">'\n'</span><span class="token punctuation">)</span>        movie_file<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">'\n'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h1><p><img src="https://upload-images.jianshu.io/upload_images/9747350-ca4cca3e5dafb5c6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 编程语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Beautiful Soup</title>
      <link href="/2019/10/02/beautiful-soup/"/>
      <url>/2019/10/02/beautiful-soup/</url>
      
        <content type="html"><![CDATA[<h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><p>Python中的一个库，主要用于从网页爬取数据；</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><pre class="line-numbers language-shell"><code class="language-shell">pip install beautifulsoup4<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="四大对象"><a href="#四大对象" class="headerlink" title="四大对象"></a>四大对象</h2><p><code>Beautiful Soup</code>将复杂的<code>HTML</code>文档转换成树形结构，树中的每个节点都是<code>Python</code>对象，对象可归纳为以下4种；</p><h4 id="Tag"><a href="#Tag" class="headerlink" title="Tag"></a>Tag</h4><p>同<code>XML</code>或<code>HTML</code>中的标签<code>tag</code>相同，<code>tag</code>属性可被增删修改，操作方法和字典一样，最常用的属性如下；</p><ul><li>name</li><li>attributes</li></ul><h4 id="NavigableString"><a href="#NavigableString" class="headerlink" title="NavigableString"></a>NavigableString</h4><p>获取标签之后，用于获取标签内部的文字；</p><h4 id="BeautifulSoup"><a href="#BeautifulSoup" class="headerlink" title="BeautifulSoup"></a>BeautifulSoup</h4><p>表示一个文档的全部内容，大多数情况下都可以将它当作Tag对象，是一个特殊的Tag对象，可用于分别获取其类型、名称及属性；</p><h4 id="Comment"><a href="#Comment" class="headerlink" title="Comment"></a>Comment</h4><p>Comment是一个中枢类型的NavigableString对象，输出内容不含注释符号；</p><h1 id="使用举例"><a href="#使用举例" class="headerlink" title="使用举例"></a>使用举例</h1><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/python3</span><span class="token comment" spellcheck="true"># -*- coding:utf-8 -*-</span><span class="token comment" spellcheck="true"># @Time    : 2018-11-16 10:30</span><span class="token comment" spellcheck="true"># @Author  : Manu</span><span class="token comment" spellcheck="true"># @Site    : </span><span class="token comment" spellcheck="true"># @File    : beautiful_soup.py</span><span class="token comment" spellcheck="true"># @Software: PyCharm</span><span class="token keyword">from</span> bs4 <span class="token keyword">import</span> BeautifulSouphtml <span class="token operator">=</span> <span class="token triple-quoted-string string">"""&lt;html>&lt;head>&lt;title>村雨&lt;/title>&lt;/head>&lt;body>&lt;p class="title" name="blog">&lt;b>村雨的博客&lt;/b>&lt;/p>&lt;li>&lt;!--注释-->&lt;/li>&lt;a href="https://blog.csdn.net/github_39655029/article/details/83933199" target="_blank">        &lt;span class="article-type type-1">            原        &lt;/span>        Python爬虫之网络请求      &lt;/a>&lt;a href="https://blog.csdn.net/github_39655029/article/details/84100458" target="_blank">        &lt;span class="article-type type-1">            原        &lt;/span>        爬虫实践--豆瓣电影当前上映电影信息爬取      &lt;/a>&lt;/body>&lt;/html>"""</span>soup <span class="token operator">=</span> BeautifulSoup<span class="token punctuation">(</span>html<span class="token punctuation">,</span> <span class="token string">'lxml'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>soup<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>soup<span class="token punctuation">.</span>title<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>soup<span class="token punctuation">.</span>prettify<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 获取title</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'title:'</span><span class="token punctuation">,</span> soup<span class="token punctuation">.</span>title<span class="token punctuation">.</span>text<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 获取head</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'p:'</span><span class="token punctuation">,</span> soup<span class="token punctuation">.</span>p<span class="token punctuation">.</span>text<span class="token punctuation">)</span>a_list <span class="token operator">=</span> soup<span class="token punctuation">.</span>a<span class="token punctuation">.</span>attrs<span class="token keyword">print</span><span class="token punctuation">(</span>a_list<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'href'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 获取Title标签的文字内容</span><span class="token keyword">print</span><span class="token punctuation">(</span>soup<span class="token punctuation">.</span>title<span class="token punctuation">.</span>string<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 获取对象名称</span><span class="token keyword">print</span><span class="token punctuation">(</span>soup<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 获取对象属性</span><span class="token keyword">print</span><span class="token punctuation">(</span>soup<span class="token punctuation">.</span>attrs<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 获取对象类型</span><span class="token keyword">print</span><span class="token punctuation">(</span>type<span class="token punctuation">(</span>soup<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">if</span> type<span class="token punctuation">(</span>soup<span class="token punctuation">.</span>li<span class="token punctuation">.</span>string<span class="token punctuation">)</span> <span class="token operator">==</span> element<span class="token punctuation">.</span>Comment<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'comment:'</span><span class="token punctuation">,</span> soup<span class="token punctuation">.</span>li<span class="token punctuation">.</span>string<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="http://upload-images.jianshu.io/upload_images/9747350-a5e70fa6d29ef300?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 编程语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Beautiful Soup </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Numpy中矩阵、函数、二元运算及数组读写</title>
      <link href="/2019/10/02/numpy-zhong-ju-zhen-han-shu-er-yuan-yun-suan-ji-shu-zu-du-xie/"/>
      <url>/2019/10/02/numpy-zhong-ju-zhen-han-shu-er-yuan-yun-suan-ji-shu-zu-du-xie/</url>
      
        <content type="html"><![CDATA[<h1 id="矩阵"><a href="#矩阵" class="headerlink" title="矩阵"></a>矩阵</h1><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># --*--coding:utf-8--*--</span><span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token triple-quoted-string string">"""矩阵"""</span><span class="token comment" spellcheck="true"># mat(array),将二维数组转化为矩阵</span>a <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span>              <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">,</span>              <span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'matrix:\n'</span><span class="token punctuation">,</span> np<span class="token punctuation">.</span>mat<span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>np<span class="token punctuation">.</span>mat<span class="token punctuation">(</span><span class="token string">'1,2,4;5,6,9'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># matrix.I,表示matrix的逆矩阵</span><span class="token keyword">print</span><span class="token punctuation">(</span>np<span class="token punctuation">.</span>mat<span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">.</span>I<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 利用分块创造新矩阵</span>a <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">,</span>              <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">19</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>b <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">89</span><span class="token punctuation">]</span><span class="token punctuation">,</span>              <span class="token punctuation">[</span><span class="token number">49</span><span class="token punctuation">,</span> <span class="token number">29</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>np<span class="token punctuation">.</span>bmat<span class="token punctuation">(</span><span class="token string">'a, b;b, a'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h1><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># --*--coding:utf-8--*--</span><span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> plt<span class="token triple-quoted-string string">"""一般函数"""</span><span class="token comment" spellcheck="true"># 正无穷</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'正无穷：'</span><span class="token punctuation">,</span> np<span class="token punctuation">.</span>inf<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 负无穷</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'负无穷：'</span><span class="token punctuation">,</span> <span class="token operator">-</span>np<span class="token punctuation">.</span>inf<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 非法值</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'非法值：'</span><span class="token punctuation">,</span> np<span class="token punctuation">.</span>nan<span class="token punctuation">)</span><span class="token triple-quoted-string string">"""向量化函数"""</span><span class="token comment" spellcheck="true"># vectorize(function_name),将函数向量化，产生一个新函数</span>x <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">54</span><span class="token punctuation">,</span> <span class="token number">89</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">sinc</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> x <span class="token operator">==</span> <span class="token number">0.0</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token number">1.0</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        y <span class="token operator">=</span> np<span class="token punctuation">.</span>pi <span class="token operator">*</span> x        <span class="token keyword">return</span> np<span class="token punctuation">.</span>sin<span class="token punctuation">(</span>y<span class="token punctuation">)</span> <span class="token operator">/</span> ysinc1 <span class="token operator">=</span> np<span class="token punctuation">.</span>vectorize<span class="token punctuation">(</span>sinc<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'向量化：'</span><span class="token punctuation">,</span> sinc1<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span>x <span class="token operator">=</span> np<span class="token punctuation">.</span>linspace<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>x<span class="token punctuation">,</span> sinc1<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="二元运算"><a href="#二元运算" class="headerlink" title="二元运算"></a>二元运算</h1><h3 id="四则运算对应函数"><a href="#四则运算对应函数" class="headerlink" title="四则运算对应函数"></a>四则运算对应函数</h3><table><thead><tr><th align="center">运算符</th><th align="center">对应函数</th></tr></thead><tbody><tr><td align="center">a + b</td><td align="center">add(a, b)</td></tr><tr><td align="center">a - b</td><td align="center">subtract(a, b)</td></tr><tr><td align="center">a * b</td><td align="center">multiply(a, b)</td></tr><tr><td align="center">a / b</td><td align="center">divide(a, b)</td></tr><tr><td align="center">a ** b</td><td align="center">power(a, b)</td></tr><tr><td align="center">a % b</td><td align="center">remainder(a,b)</td></tr></tbody></table><h3 id="比较与逻辑运算"><a href="#比较与逻辑运算" class="headerlink" title="比较与逻辑运算"></a>比较与逻辑运算</h3><table><thead><tr><th align="center">运算符</th><th align="center">对应函数</th></tr></thead><tbody><tr><td align="center">==</td><td align="center">equal</td></tr><tr><td align="center">!=</td><td align="center">not_equal</td></tr><tr><td align="center">&gt;</td><td align="center">greater</td></tr><tr><td align="center">&gt;=</td><td align="center">greater_equal</td></tr><tr><td align="center">&lt;</td><td align="center">less</td></tr><tr><td align="center">&lt;=</td><td align="center">less_equal</td></tr><tr><td align="center">&amp;</td><td align="center">bitwise_and</td></tr><tr><td align="center">/</td><td align="center">bitwise_or</td></tr><tr><td align="center">^</td><td align="center">bitwise_xor</td></tr><tr><td align="center">~</td><td align="center">invert</td></tr><tr><td align="center">&gt;&gt;</td><td align="center">right_shift</td></tr><tr><td align="center">&lt;&lt;</td><td align="center">left_shift</td></tr></tbody></table><h1 id="ufunc对象"><a href="#ufunc对象" class="headerlink" title="ufunc对象"></a>ufunc对象</h1><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># --*--coding:utf-8--*--</span><span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token triple-quoted-string string">"""ufunc对象"""</span><span class="token comment" spellcheck="true"># reduce方法</span><span class="token comment" spellcheck="true"># op.reduce(a)，将op沿着某个轴应用，使得数组啊的维数降低一维</span>a <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>np<span class="token punctuation">.</span>add<span class="token punctuation">.</span>reduce<span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>np<span class="token punctuation">.</span>logical_or<span class="token punctuation">.</span>reduce<span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># accumulate方法</span><span class="token comment" spellcheck="true"># op.accumulate(a),看成保存reduce每一步的结果所形成的数组</span><span class="token keyword">print</span><span class="token punctuation">(</span>np<span class="token punctuation">.</span>add<span class="token punctuation">.</span>accumulate<span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>np<span class="token punctuation">.</span>logical_or<span class="token punctuation">.</span>accumulate<span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># reduceat方法</span><span class="token comment" spellcheck="true"># op.reduceat(a, indices),将操作符运用到指定的下标上，返回一个与indices大小相同的数组</span>indices <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>np<span class="token punctuation">.</span>add<span class="token punctuation">.</span>reduceat<span class="token punctuation">(</span>a<span class="token punctuation">,</span> indices<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># outer方法</span><span class="token comment" spellcheck="true"># op.outer(a, b)，对a中每个元素，将op运用到它与b的每一个元素上所得到的结果</span>b <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>np<span class="token punctuation">.</span>add<span class="token punctuation">.</span>outer<span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>np<span class="token punctuation">.</span>logical_or<span class="token punctuation">.</span>outer<span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="数组读写"><a href="#数组读写" class="headerlink" title="数组读写"></a>数组读写</h1><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># --*--coding:utf-8--*--</span><span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token triple-quoted-string string">""" 数组读写"""</span><span class="token comment" spellcheck="true"># 空格（制表符）分隔的文本</span>data <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">with</span> open<span class="token punctuation">(</span><span class="token string">'file.txt'</span><span class="token punctuation">,</span> <span class="token string">'r'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> file<span class="token punctuation">:</span>    <span class="token keyword">for</span> line <span class="token keyword">in</span> file<span class="token punctuation">:</span>        fileds <span class="token operator">=</span> line<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span>        row_data <span class="token operator">=</span> <span class="token punctuation">[</span>float<span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token keyword">for</span> x <span class="token keyword">in</span> fileds<span class="token punctuation">]</span>        data<span class="token punctuation">.</span>append<span class="token punctuation">(</span>row_data<span class="token punctuation">)</span>data <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'空格分隔：'</span><span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 逗号分隔文件</span>data <span class="token operator">=</span> np<span class="token punctuation">.</span>loadtxt<span class="token punctuation">(</span><span class="token string">'file1.txt'</span><span class="token punctuation">,</span> delimiter<span class="token operator">=</span><span class="token string">','</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'逗号分隔：'</span><span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 数组写入文件</span>np<span class="token punctuation">.</span>savetxt<span class="token punctuation">(</span><span class="token string">'out.txt'</span><span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token keyword">with</span> open<span class="token punctuation">(</span><span class="token string">'out.txt'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>    <span class="token keyword">for</span> line <span class="token keyword">in</span> f<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>line<span class="token punctuation">)</span><span class="token triple-quoted-string string">"""Numpy二进制格式保存的方法：    1、save(file, arr) 保存单个数组，.npy 格式    2、savez(file, *args, **kwds) 保存多个数组，无压缩的 .npz 格式    3、savez_compressed(file, *args, **kwds) 保存多个数组，有压缩的 .npz 格式读取的方法：    load(file, mmap_mode=None) 对于 .npy，返回保存的数组，对于 .npz，返回一个｛名称-数组｝对组成的字典"""</span><span class="token comment" spellcheck="true"># 单个数组的读写</span>a <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>np<span class="token punctuation">.</span>save<span class="token punctuation">(</span><span class="token string">'file2.txt'</span><span class="token punctuation">,</span> a<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 保存多个数组</span>b <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span>np<span class="token punctuation">.</span>savez<span class="token punctuation">(</span><span class="token string">'data.npz'</span><span class="token punctuation">,</span> a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 编程语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Numpy </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Numpy中数组的使用</title>
      <link href="/2019/10/02/numpy-zhong-shu-zu-de-shi-yong/"/>
      <url>/2019/10/02/numpy-zhong-shu-zu-de-shi-yong/</url>
      
        <content type="html"><![CDATA[<h1 id="数组类型"><a href="#数组类型" class="headerlink" title="数组类型"></a>数组类型</h1><h3 id="Numpy类型"><a href="#Numpy类型" class="headerlink" title="Numpy类型"></a>Numpy类型</h3><p><img src="http://upload-images.jianshu.io/upload_images/9747350-7f8445459032eee7?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># --*--coding:utf-8--*--</span><span class="token keyword">from</span> numpy <span class="token keyword">import</span> <span class="token operator">*</span><span class="token triple-quoted-string string">"""复数数组"""</span>a <span class="token operator">=</span> array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span> <span class="token operator">+</span> <span class="token number">1j</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 数组类型</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'type:'</span><span class="token punctuation">,</span> a<span class="token punctuation">.</span>dtype<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 实部</span><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>real<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 虚部</span><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>imag<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 复共轭</span><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>conj<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token triple-quoted-string string">"""指定数组类型"""</span>a <span class="token operator">=</span> array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span>float32<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>a <span class="token operator">=</span> array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1.8</span><span class="token punctuation">,</span> <span class="token number">3.3</span><span class="token punctuation">,</span> <span class="token number">4.1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span>uint8<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token triple-quoted-string string">"""类型转换"""</span>a <span class="token operator">=</span> array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1.5</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">3.3</span><span class="token punctuation">]</span><span class="token punctuation">,</span>         dtype<span class="token operator">=</span>float32<span class="token punctuation">)</span>b <span class="token operator">=</span> asarray<span class="token punctuation">(</span>a<span class="token punctuation">,</span> dtype<span class="token operator">=</span>float64<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'asarray类型转换：'</span><span class="token punctuation">,</span> b<span class="token punctuation">)</span>c <span class="token operator">=</span> a<span class="token punctuation">.</span>astype<span class="token punctuation">(</span>uint8<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'astype类型转换：'</span><span class="token punctuation">,</span> c<span class="token punctuation">)</span>a <span class="token operator">=</span> array<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span>int32<span class="token punctuation">)</span>d <span class="token operator">=</span> a<span class="token punctuation">.</span>view<span class="token punctuation">(</span>uint8<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'view类型转换：'</span><span class="token punctuation">,</span> d<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="数组方法"><a href="#数组方法" class="headerlink" title="数组方法"></a>数组方法</h1><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># --*--coding:utf-8--*--</span><span class="token keyword">from</span> numpy <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">from</span> numpy<span class="token punctuation">.</span>random <span class="token keyword">import</span> rand<span class="token triple-quoted-string string">"""求和"""</span>a <span class="token operator">=</span> array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 所有元素和</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'all:'</span><span class="token punctuation">,</span> sum<span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 指定求和维度</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'维度和：'</span><span class="token punctuation">,</span> sum<span class="token punctuation">(</span>a<span class="token punctuation">,</span> axis<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'维度和：'</span><span class="token punctuation">,</span> sum<span class="token punctuation">(</span>a<span class="token punctuation">,</span> axis<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token triple-quoted-string string">"""求积"""</span><span class="token comment" spellcheck="true"># 所有元素积</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'all:'</span><span class="token punctuation">,</span> prod<span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 指定求积维度</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'维度积：'</span><span class="token punctuation">,</span> prod<span class="token punctuation">(</span>a<span class="token punctuation">,</span> axis<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'维度积：'</span><span class="token punctuation">,</span> prod<span class="token punctuation">(</span>a<span class="token punctuation">,</span> axis<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token triple-quoted-string string">"""最大最小值"""</span>a <span class="token operator">=</span> rand<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 全局最小</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'all:'</span><span class="token punctuation">,</span> a<span class="token punctuation">.</span>min<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 某个轴最小</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'axis:'</span><span class="token punctuation">,</span> a<span class="token punctuation">.</span>min<span class="token punctuation">(</span>axis<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 全局最大</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'all:'</span><span class="token punctuation">,</span> a<span class="token punctuation">.</span>max<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 某个轴最大</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'axis:'</span><span class="token punctuation">,</span> a<span class="token punctuation">.</span>max<span class="token punctuation">(</span>axis<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 最大最小值的位置</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'max in: '</span><span class="token punctuation">,</span> a<span class="token punctuation">.</span>argmax<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'min in '</span><span class="token punctuation">,</span> a<span class="token punctuation">.</span>argmin<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token triple-quoted-string string">"""均值"""</span>a <span class="token operator">=</span> array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'avg:'</span><span class="token punctuation">,</span> a<span class="token punctuation">.</span>mean<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'avg: '</span><span class="token punctuation">,</span> average<span class="token punctuation">(</span>a<span class="token punctuation">,</span> axis<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token triple-quoted-string string">"""标准差"""</span><span class="token comment" spellcheck="true"># 标准差</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'std: '</span><span class="token punctuation">,</span> a<span class="token punctuation">.</span>std<span class="token punctuation">(</span>axis<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 方差</span><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>var<span class="token punctuation">(</span>axis<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>var<span class="token punctuation">(</span>a<span class="token punctuation">,</span> axis<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>std<span class="token punctuation">(</span>a<span class="token punctuation">,</span> axis<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># clip方法,将数值限制在某个范围</span><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 小于2的变成2，大于4的变成4</span><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>clip<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># ptp方法，计算最大值和最小值之差</span><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>ptp<span class="token punctuation">(</span>axis<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>ptp<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># round方法</span>a <span class="token operator">=</span> array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1.35</span><span class="token punctuation">,</span> <span class="token number">2.5</span><span class="token punctuation">,</span> <span class="token number">1.5</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>round<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 近似到一位小数</span><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>round<span class="token punctuation">(</span>decimals<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="数组排序"><a href="#数组排序" class="headerlink" title="数组排序"></a>数组排序</h1><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># --*-- coding:utf-8 --*--</span><span class="token keyword">from</span> numpy <span class="token keyword">import</span> <span class="token operator">*</span><span class="token triple-quoted-string string">"""数组排序"""</span><span class="token comment" spellcheck="true"># sort函数</span>names <span class="token operator">=</span> array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'Bob'</span><span class="token punctuation">,</span> <span class="token string">'Sue'</span><span class="token punctuation">,</span> <span class="token string">'Jan'</span><span class="token punctuation">,</span> <span class="token string">'Ad'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'names sort:'</span><span class="token punctuation">,</span> sort<span class="token punctuation">(</span>names<span class="token punctuation">)</span><span class="token punctuation">)</span>weights <span class="token operator">=</span> array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">93</span><span class="token punctuation">,</span> <span class="token number">53</span><span class="token punctuation">,</span> <span class="token number">62</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'weights sort:'</span><span class="token punctuation">,</span> sort<span class="token punctuation">(</span>weights<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># argsort函数</span>ordered_indices <span class="token operator">=</span> argsort<span class="token punctuation">(</span>weights<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>ordered_indices<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>weights<span class="token punctuation">[</span>ordered_indices<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token triple-quoted-string string">"""二维数组排序"""</span>a <span class="token operator">=</span> array<span class="token punctuation">(</span><span class="token punctuation">[</span>        <span class="token punctuation">[</span><span class="token punctuation">.</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">[</span><span class="token punctuation">.</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">[</span><span class="token punctuation">.</span><span class="token number">9</span><span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token number">7</span><span class="token punctuation">]</span>    <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'all: \n'</span><span class="token punctuation">,</span> sort<span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'axis: \n'</span><span class="token punctuation">,</span> sort<span class="token punctuation">(</span>a<span class="token punctuation">,</span> axis<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token triple-quoted-string string">"""searchsorted函数，接受两个参数，第一个必须是已排序的数组"""</span>sorted_array <span class="token operator">=</span> linspace<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span>values <span class="token operator">=</span> array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">.</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token number">31</span><span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token number">9</span><span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token number">45</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'searcgsorted: '</span><span class="token punctuation">,</span> searchsorted<span class="token punctuation">(</span>sorted_array<span class="token punctuation">,</span> values<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="数组形状"><a href="#数组形状" class="headerlink" title="数组形状"></a>数组形状</h1><pre class="line-numbers language-python"><code class="language-python"><span class="token triple-quoted-string string">"""数组形状"""</span><span class="token comment" spellcheck="true"># --*-- coding:utf-8 --*--</span><span class="token keyword">from</span> numpy <span class="token keyword">import</span> <span class="token operator">*</span><span class="token comment" spellcheck="true"># 修改数组形状</span>a <span class="token operator">=</span> arange<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'origin: \n'</span><span class="token punctuation">,</span> a<span class="token punctuation">)</span>a<span class="token punctuation">.</span>shape <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'after modified: \n'</span><span class="token punctuation">,</span> a<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'after reshape: \n'</span><span class="token punctuation">,</span> a<span class="token punctuation">.</span>reshape<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 使用newaxis增加数组维数</span>a <span class="token operator">=</span> arange<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'shape:'</span><span class="token punctuation">,</span> shape<span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span>y <span class="token operator">=</span> a<span class="token punctuation">[</span>newaxis<span class="token punctuation">,</span> <span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>shape<span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span>y <span class="token operator">=</span> a<span class="token punctuation">[</span>newaxis<span class="token punctuation">,</span> newaxis<span class="token punctuation">,</span> <span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>shape<span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># squeeze方法去除多余的轴</span>a <span class="token operator">=</span> arange<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span>a<span class="token punctuation">.</span>shape <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span>b <span class="token operator">=</span> a<span class="token punctuation">.</span>squeeze<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'shape of b:'</span><span class="token punctuation">,</span> b<span class="token punctuation">.</span>shape<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 数组转置</span><span class="token triple-quoted-string string">"""PS:    1、对于复述数组，转置不返回复共轭，只是单纯交换轴的位置    2、转置可以作用于多维数组"""</span><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'transpose: \n'</span><span class="token punctuation">,</span> a<span class="token punctuation">.</span>transpose<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>T<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 数组连接</span>x <span class="token operator">=</span> array<span class="token punctuation">(</span><span class="token punctuation">[</span>        <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">11</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">]</span>    <span class="token punctuation">]</span><span class="token punctuation">)</span>y <span class="token operator">=</span> array<span class="token punctuation">(</span><span class="token punctuation">[</span>        <span class="token punctuation">[</span><span class="token number">50</span><span class="token punctuation">,</span><span class="token number">51</span><span class="token punctuation">,</span><span class="token number">52</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">[</span><span class="token number">60</span><span class="token punctuation">,</span><span class="token number">61</span><span class="token punctuation">,</span><span class="token number">62</span><span class="token punctuation">]</span>    <span class="token punctuation">]</span><span class="token punctuation">)</span>z <span class="token operator">=</span> concatenate<span class="token punctuation">(</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>z<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># Flatten数组，将多维数组转化为1维数组,返回数组的复制，不改变原数组的值</span>a <span class="token operator">=</span> array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>           <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>b <span class="token operator">=</span> a<span class="token punctuation">.</span>flatten<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># flat属性，相当于返回所有元组组成的一个迭代器</span><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>flat<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># reval方法,将多位数组转化为1维数组</span>b <span class="token operator">=</span> a<span class="token punctuation">.</span>ravel<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># atleast_xd函数，保证数组至少有x维</span>x <span class="token operator">=</span> <span class="token number">1</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'1d:'</span><span class="token punctuation">,</span>atleast_1d<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>a <span class="token operator">=</span> array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span>b <span class="token operator">=</span> atleast_2d<span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'2d:'</span><span class="token punctuation">,</span> b<span class="token punctuation">)</span>c <span class="token operator">=</span> atleast_3d<span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'3d: '</span><span class="token punctuation">,</span> c<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="对角线"><a href="#对角线" class="headerlink" title="对角线"></a>对角线</h1><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># --*--coding:utf-8--*--</span><span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token triple-quoted-string string">"""对角线"""</span>a <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">11</span><span class="token punctuation">,</span><span class="token number">22</span><span class="token punctuation">,</span><span class="token number">33</span><span class="token punctuation">,</span><span class="token number">44</span><span class="token punctuation">,</span><span class="token number">55</span><span class="token punctuation">,</span><span class="token number">66</span><span class="token punctuation">,</span><span class="token number">77</span><span class="token punctuation">,</span><span class="token number">88</span><span class="token punctuation">,</span><span class="token number">99</span><span class="token punctuation">]</span><span class="token punctuation">)</span>a<span class="token punctuation">.</span>shape <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 对角线元素</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'all :\n'</span><span class="token punctuation">,</span> a<span class="token punctuation">.</span>diagonal<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 对角线元素偏移，正数代表右移，负数代表左移</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'左移：\n'</span><span class="token punctuation">,</span> a<span class="token punctuation">.</span>diagonal<span class="token punctuation">(</span>offset<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'右移：\n'</span><span class="token punctuation">,</span> a<span class="token punctuation">.</span>diagonal<span class="token punctuation">(</span>offset<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 更新对角线的值</span>i <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span>a<span class="token punctuation">[</span>i<span class="token punctuation">,</span> i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">20</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'update: \n'</span><span class="token punctuation">,</span> a<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 修改次对角线的值</span>i <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>a<span class="token punctuation">[</span>i<span class="token punctuation">,</span> i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">21</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'修改次对角线：\n'</span><span class="token punctuation">,</span> a<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="数组与字符串的转换"><a href="#数组与字符串的转换" class="headerlink" title="数组与字符串的转换"></a>数组与字符串的转换</h1><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># --*--coding:utf-8--*--</span><span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token triple-quoted-string string">"""数组与字符串的转换"""</span><span class="token comment" spellcheck="true"># tostring方法</span>a <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dtype <span class="token operator">=</span> np<span class="token punctuation">.</span>uint8<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'a: '</span><span class="token punctuation">,</span> a<span class="token punctuation">.</span>tostring<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 按照列读取数据</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'a Fortran:'</span><span class="token punctuation">,</span> a<span class="token punctuation">.</span>tostring<span class="token punctuation">(</span>order<span class="token operator">=</span><span class="token string">'F'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># fromstring函数，从字符串中独处数据，但要指定类型</span>s <span class="token operator">=</span> a<span class="token punctuation">.</span>tostring<span class="token punctuation">(</span><span class="token punctuation">)</span>a <span class="token operator">=</span> np<span class="token punctuation">.</span>fromstring<span class="token punctuation">(</span>s<span class="token punctuation">,</span> dtype<span class="token operator">=</span>np<span class="token punctuation">.</span>uint8<span class="token punctuation">)</span>a<span class="token punctuation">.</span>shape <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="生成数组的函数"><a href="#生成数组的函数" class="headerlink" title="生成数组的函数"></a>生成数组的函数</h1><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># --*--coding:utf-8--*--</span><span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token triple-quoted-string string">"""生成数组的函数"""</span><span class="token comment" spellcheck="true"># arange(start, stop=None, step=1, dtype=None)，类似range函数，返回数组</span><span class="token comment" spellcheck="true"># 允许非整数值输入，产生一个菲整形的数组</span>a <span class="token operator">=</span> np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># linspace(start, stop, N)，产生N个等距分布与【】</span><span class="token keyword">print</span><span class="token punctuation">(</span>np<span class="token punctuation">.</span>linspace<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># logspace(start, stop, N),产生N个对数等距分布的数组，默认以10为底</span><span class="token keyword">print</span><span class="token punctuation">(</span>np<span class="token punctuation">.</span>logspace<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># meshgrid，二维平面中生成一个网格</span>x_lable <span class="token operator">=</span> np<span class="token punctuation">.</span>linspace<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span>y_lable <span class="token operator">=</span> np<span class="token punctuation">.</span>linspace<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span>x<span class="token punctuation">,</span> y <span class="token operator">=</span> np<span class="token punctuation">.</span>meshgrid<span class="token punctuation">(</span>x_lable<span class="token punctuation">,</span> y_lable<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">'\n'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 1、ogrid(start:end:step)：meshgrid(indexing='ij', sparse=True)，生成列矩阵</span><span class="token comment" spellcheck="true"># 2、mgrid(start:end:step): meshgrid(indexing='ij', sparse=False)，生成行矩阵</span>x<span class="token punctuation">,</span> y <span class="token operator">=</span> np<span class="token punctuation">.</span>ogrid<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">10</span><span class="token punctuation">:</span><span class="token number">10</span><span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">:</span><span class="token number">30</span><span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'{} \n {}'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># r_:产生行向量</span><span class="token comment" spellcheck="true"># c_:产生列向量</span><span class="token keyword">print</span><span class="token punctuation">(</span>np<span class="token punctuation">.</span>r_<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token number">10</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>np<span class="token punctuation">.</span>c_<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token number">10</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># ones(shape, dtype)，定制一个全1的数组，数组类型可指定</span><span class="token comment" spellcheck="true"># zeros(shape, dtype),定制一个全0的数组，数组类型可指定</span><span class="token comment" spellcheck="true"># empty(shape, dtype, order)，产生一个指定大小的数组(指向的内存未初始化，故值随机)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'全1:\n'</span><span class="token punctuation">,</span> ones<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dtype <span class="token operator">=</span> np<span class="token punctuation">.</span>float32<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'全0:\n'</span><span class="token punctuation">,</span> zeros<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dtype <span class="token operator">=</span> np<span class="token punctuation">.</span>float32<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>np<span class="token punctuation">.</span>empty<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># empty_like(array)、ones_like(array)、zeros_like(array),产生一个与a大小一样，类型一样的对应数组</span>a <span class="token operator">=</span> np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'empty like:\n'</span><span class="token punctuation">,</span> np<span class="token punctuation">.</span>empty_like<span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'zeros like:\n'</span><span class="token punctuation">,</span> np<span class="token punctuation">.</span>zeros_like<span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'ones like:\n'</span><span class="token punctuation">,</span> np<span class="token punctuation">.</span>ones_like<span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># identity(n, dtype)，产生一个n*n的单位矩阵</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'identity: \n'</span><span class="token punctuation">,</span> np<span class="token punctuation">.</span>identity<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 编程语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Numpy </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Pandas入门</title>
      <link href="/2019/10/02/pandas-ru-men/"/>
      <url>/2019/10/02/pandas-ru-men/</url>
      
        <content type="html"><![CDATA[<h1 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h1><p>Pandas是基于Numpy的一种工具，目的是解决数据分析任务。通过纳入大量库和一些标准数据模型，提供了高效操作大型数据集所需工具；</p><h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><pre class="line-numbers language-shell"><code class="language-shell">pip install pandas<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h1><h3 id="Series"><a href="#Series" class="headerlink" title="Series"></a>Series</h3><ul><li>定义<br>一维的数组类型，其中每个元素有各自标签；可当作一个由带标签元素组成的numpy数组，标签可以是数字或字符；</li><li>关键点<ul><li>均匀数据；</li><li>尺寸大小不变；</li><li>数据的值可变；</li></ul></li></ul><h3 id="Dataframe"><a href="#Dataframe" class="headerlink" title="Dataframe"></a>Dataframe</h3><ul><li>定义<br>二维、表格型的数组结构，可存储许多不同类型的数据，且每个轴都有标签，可当作一个series的字典；</li><li>关键点<ul><li>异构数据；</li><li>大小可变；</li><li>数据可变；</li></ul></li><li>功能特点<ul><li>潜在的类是不同类型；</li><li>大小可变；</li><li>标记轴（行和列）；</li><li>可对行和列执行算术运算；<h3 id="Panel"><a href="#Panel" class="headerlink" title="Panel"></a>Panel</h3></li></ul></li><li>定义<br>三维，大小可变的数组；</li><li>关键点<ul><li>异构数据；</li><li>大小可变；</li><li>数据可变；<h3 id="三者区别与共性"><a href="#三者区别与共性" class="headerlink" title="三者区别与共性"></a>三者区别与共性</h3></li></ul></li><li>可变性：三者的值都是值可变的，除了series都是大小可变的；</li><li>较高维数据结构是较低维数据结构的容器，Panel是DataFrame的容器，DataFrame是Series的容器；</li></ul><h1 id="合并-连接"><a href="#合并-连接" class="headerlink" title="合并/连接"></a>合并/连接</h1><h3 id="how的参数"><a href="#how的参数" class="headerlink" title="how的参数"></a>how的参数</h3><ul><li>left<br>使用左侧对象的键；</li><li>right<br>使用右侧对象的键；</li><li>outer<br>使用键的联合；</li><li>inner<br>使用键的交集</li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># --*--coding:utf-8--*--</span><span class="token keyword">import</span> pandas <span class="token keyword">as</span> pdleft <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span><span class="token punctuation">{</span>         <span class="token string">'id'</span><span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">,</span>         <span class="token string">'Name'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Alex'</span><span class="token punctuation">,</span> <span class="token string">'Amy'</span><span class="token punctuation">,</span> <span class="token string">'Allen'</span><span class="token punctuation">,</span> <span class="token string">'Alice'</span><span class="token punctuation">,</span> <span class="token string">'Ayoung'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>         <span class="token string">'subject_id'</span><span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token string">'sub1'</span><span class="token punctuation">,</span><span class="token string">'sub2'</span><span class="token punctuation">,</span><span class="token string">'sub4'</span><span class="token punctuation">,</span><span class="token string">'sub6'</span><span class="token punctuation">,</span><span class="token string">'sub5'</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">)</span>right <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span>         <span class="token punctuation">{</span><span class="token string">'id'</span><span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">,</span>         <span class="token string">'Name'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Billy'</span><span class="token punctuation">,</span> <span class="token string">'Brian'</span><span class="token punctuation">,</span> <span class="token string">'Bran'</span><span class="token punctuation">,</span> <span class="token string">'Bryce'</span><span class="token punctuation">,</span> <span class="token string">'Betty'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>         <span class="token string">'subject_id'</span><span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token string">'sub2'</span><span class="token punctuation">,</span><span class="token string">'sub4'</span><span class="token punctuation">,</span><span class="token string">'sub3'</span><span class="token punctuation">,</span><span class="token string">'sub6'</span><span class="token punctuation">,</span><span class="token string">'sub5'</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">)</span>left_merge <span class="token operator">=</span> pd<span class="token punctuation">.</span>merge<span class="token punctuation">(</span>left<span class="token punctuation">,</span> right<span class="token punctuation">,</span> on<span class="token operator">=</span><span class="token string">'subject_id'</span><span class="token punctuation">,</span> how<span class="token operator">=</span><span class="token string">'left'</span><span class="token punctuation">)</span>right_merge <span class="token operator">=</span> pd<span class="token punctuation">.</span>merge<span class="token punctuation">(</span>left<span class="token punctuation">,</span> right<span class="token punctuation">,</span> on<span class="token operator">=</span><span class="token string">'subject_id'</span><span class="token punctuation">,</span> how<span class="token operator">=</span><span class="token string">'right'</span><span class="token punctuation">)</span>outer_merge <span class="token operator">=</span> pd<span class="token punctuation">.</span>merge<span class="token punctuation">(</span>left<span class="token punctuation">,</span> right<span class="token punctuation">,</span> on<span class="token operator">=</span><span class="token string">'subject_id'</span><span class="token punctuation">,</span> how<span class="token operator">=</span><span class="token string">'outer'</span><span class="token punctuation">)</span>inner_merge <span class="token operator">=</span> pd<span class="token punctuation">.</span>merge<span class="token punctuation">(</span>left<span class="token punctuation">,</span> right<span class="token punctuation">,</span> on<span class="token operator">=</span><span class="token string">'subject_id'</span><span class="token punctuation">,</span> how<span class="token operator">=</span><span class="token string">'inner'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'left:\t'</span><span class="token punctuation">,</span> left_merge<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'right:\t'</span><span class="token punctuation">,</span> right_merge<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'outer:\t'</span><span class="token punctuation">,</span> outer_merge<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'inner:\t'</span><span class="token punctuation">,</span> inner_merge<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="如何使用Pandas"><a href="#如何使用Pandas" class="headerlink" title="如何使用Pandas"></a>如何使用Pandas</h1><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/python3</span><span class="token comment" spellcheck="true"># -*- coding:utf-8 -*-</span><span class="token comment" spellcheck="true"># @Time    : 2018-12-15 14:29</span><span class="token comment" spellcheck="true"># @Author  : Cunyu</span><span class="token comment" spellcheck="true"># @Site    : </span><span class="token comment" spellcheck="true"># @File    : panda.py</span><span class="token comment" spellcheck="true"># @Software: PyCharm</span><span class="token keyword">import</span> pandas <span class="token keyword">as</span> pd<span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> plt<span class="token comment" spellcheck="true"># 对象创建</span>seri <span class="token operator">=</span> pd<span class="token punctuation">.</span>Series<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span>np<span class="token punctuation">.</span>nan<span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>seri<span class="token punctuation">)</span>dates <span class="token operator">=</span> pd<span class="token punctuation">.</span>date_range<span class="token punctuation">(</span><span class="token string">'20181215'</span><span class="token punctuation">,</span> periods<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>dates<span class="token punctuation">)</span>df <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span>np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>randn<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">,</span> index<span class="token operator">=</span>dates<span class="token punctuation">,</span> columns<span class="token operator">=</span>list<span class="token punctuation">(</span><span class="token string">'ABCD'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>df<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 查看数据</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'All:\n'</span><span class="token punctuation">,</span> df<span class="token punctuation">.</span>head<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'前三行：\n'</span><span class="token punctuation">,</span> df<span class="token punctuation">.</span>head<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'后三行\n'</span><span class="token punctuation">,</span> df<span class="token punctuation">.</span>tail<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'index:\n'</span><span class="token punctuation">,</span>df<span class="token punctuation">.</span>index<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'col:\n'</span><span class="token punctuation">,</span> df<span class="token punctuation">.</span>columns<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'values:\n'</span><span class="token punctuation">,</span> df<span class="token punctuation">.</span>values<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'desc:\n'</span><span class="token punctuation">,</span> df<span class="token punctuation">.</span>describe<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'转置：\n'</span><span class="token punctuation">,</span> df<span class="token punctuation">.</span>T<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'sort by an axis:\n'</span><span class="token punctuation">,</span> df<span class="token punctuation">.</span>sort_index<span class="token punctuation">(</span>axis<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> ascending<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'sort by values:\n'</span><span class="token punctuation">,</span> df<span class="token punctuation">.</span>sort_values<span class="token punctuation">(</span>by<span class="token operator">=</span><span class="token string">'B'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 获取，常用数据访问方法：.at, .iat, .loc, .iloc, .ix</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"df['A']:\n"</span><span class="token punctuation">,</span> df<span class="token punctuation">[</span><span class="token string">'A'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 选择一列产生一个系列</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'df[0:3]:\n'</span><span class="token punctuation">,</span> df<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 按标签选择</span><span class="token keyword">print</span><span class="token punctuation">(</span>df<span class="token punctuation">.</span>loc<span class="token punctuation">[</span>dates<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>df<span class="token punctuation">.</span>loc<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">'A'</span><span class="token punctuation">,</span><span class="token string">'B'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'获取某一个特定值：\n'</span><span class="token punctuation">,</span> df<span class="token punctuation">.</span>at<span class="token punctuation">[</span>dates<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">'A'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 通过位置选择</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'获取每个特定位置的值：\n'</span><span class="token punctuation">,</span> df<span class="token punctuation">.</span>iloc<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'切片操作：\n'</span><span class="token punctuation">,</span> df<span class="token punctuation">.</span>iloc<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>df<span class="token punctuation">.</span>iat<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 布尔索引</span><span class="token keyword">print</span><span class="token punctuation">(</span>df<span class="token punctuation">[</span>df<span class="token punctuation">.</span>A<span class="token operator">></span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'filter:\n'</span><span class="token punctuation">,</span> df<span class="token punctuation">.</span>copy<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'demo:\n'</span><span class="token punctuation">,</span> df<span class="token punctuation">[</span>df<span class="token punctuation">[</span><span class="token string">'D'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>isin<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'two'</span><span class="token punctuation">,</span> <span class="token string">'four'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token triple-quoted-string string">"""Series"""</span><span class="token comment" spellcheck="true"># pandas.Series(data, index, dtype, copy)，构造函数创建</span><span class="token comment" spellcheck="true"># 创建一个空系列</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Null Series:\n'</span><span class="token punctuation">,</span> pd<span class="token punctuation">.</span>Series<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 从ndarray创建一个系列</span>data <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">,</span> <span class="token string">'d'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'ndarray Series:\n'</span><span class="token punctuation">,</span> pd<span class="token punctuation">.</span>Series<span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 从字典创建一个系列</span>data <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'a'</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">:</span><span class="token number">4</span><span class="token punctuation">}</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'dict Series:\n'</span><span class="token punctuation">,</span> pd<span class="token punctuation">.</span>Series<span class="token punctuation">(</span>dict<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 从标量创建一个系列</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'scalar Series:\n'</span><span class="token punctuation">,</span> pd<span class="token punctuation">.</span>Series<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> index<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 从具有位置系列中访问数据</span>s <span class="token operator">=</span> pd<span class="token punctuation">.</span>Series<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">,</span>index <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span><span class="token string">'b'</span><span class="token punctuation">,</span><span class="token string">'c'</span><span class="token punctuation">,</span><span class="token string">'d'</span><span class="token punctuation">,</span><span class="token string">'e'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Search :\n'</span><span class="token punctuation">,</span> s<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 使用标签检索数据</span>s <span class="token operator">=</span> pd<span class="token punctuation">.</span>Series<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">,</span>index <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span><span class="token string">'b'</span><span class="token punctuation">,</span><span class="token string">'c'</span><span class="token punctuation">,</span><span class="token string">'d'</span><span class="token punctuation">,</span><span class="token string">'e'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'s["d"]: '</span><span class="token punctuation">,</span> s<span class="token punctuation">[</span><span class="token string">'d'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 属性或方法</span><span class="token comment" spellcheck="true"># 1、axes，返回行轴标签列表</span>seri <span class="token operator">=</span> pd<span class="token punctuation">.</span>Series<span class="token punctuation">(</span>np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>randn<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'axes:\n'</span><span class="token punctuation">,</span> seri<span class="token punctuation">.</span>axes<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 2、dtype，返回对象数据类型</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'dtype:\n'</span><span class="token punctuation">,</span> seri<span class="token punctuation">.</span>dtype<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 3、empty，若系列为空，返回True</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'empty:\n'</span><span class="token punctuation">,</span> seri<span class="token punctuation">.</span>empty<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 4、ndim，返回底层数据的维数</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'ndim:\n'</span><span class="token punctuation">,</span> seri<span class="token punctuation">.</span>ndim<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 5、size，返回基础数据中的元素数</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'size:\n'</span><span class="token punctuation">,</span> seri<span class="token punctuation">.</span>size<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 6、values，将系列作为ndarray返回</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'values:\n'</span><span class="token punctuation">,</span> seri<span class="token punctuation">.</span>values<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 7、head(n),返回前n行</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'head:\n'</span><span class="token punctuation">,</span> seri<span class="token punctuation">.</span>head<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 8、tail(n),返回后n行</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'tail:\n'</span><span class="token punctuation">,</span> seri<span class="token punctuation">.</span>tail<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token triple-quoted-string string">"""DataFrame"""</span><span class="token comment" spellcheck="true"># pandas.DataFrame(data,index,columns,dtype,copy)</span><span class="token comment" spellcheck="true"># 创建空DataFrame</span><span class="token keyword">print</span><span class="token punctuation">(</span>pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 从列表创建DataFrame</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'List DataFrame:\n'</span><span class="token punctuation">,</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 从字典创建DataFrame</span>dict <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'name'</span><span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token string">'Manu'</span><span class="token punctuation">,</span> <span class="token string">'Tim'</span><span class="token punctuation">,</span> <span class="token string">'Paker'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">'age'</span><span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token number">41</span><span class="token punctuation">,</span> <span class="token number">42</span><span class="token punctuation">,</span> <span class="token number">36</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Dict DataFrame:\n'</span><span class="token punctuation">,</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span>dict<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 从系列的字典创建DataFrame</span>dict_series <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'First'</span> <span class="token punctuation">:</span> pd<span class="token punctuation">.</span>Series<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> index<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token string">'Second'</span> <span class="token punctuation">:</span> pd<span class="token punctuation">.</span>Series<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span> index<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">,</span> <span class="token string">'d'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Series DataFrame:\n'</span><span class="token punctuation">,</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span>dict_series<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 列选择，列添加，列删除</span>df <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span>dict_series<span class="token punctuation">)</span>dict_series <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'First'</span> <span class="token punctuation">:</span> pd<span class="token punctuation">.</span>Series<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> index<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token string">'Second'</span> <span class="token punctuation">:</span> pd<span class="token punctuation">.</span>Series<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span> index<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">,</span> <span class="token string">'d'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'列选择：\n'</span><span class="token punctuation">,</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span>dict_series<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">'First'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>df<span class="token punctuation">[</span><span class="token string">'Third'</span><span class="token punctuation">]</span> <span class="token operator">=</span> pd<span class="token punctuation">.</span>Series<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">,</span> <span class="token number">44</span><span class="token punctuation">]</span><span class="token punctuation">,</span> index<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'列添加：\n'</span><span class="token punctuation">,</span> df<span class="token punctuation">)</span><span class="token keyword">del</span> df<span class="token punctuation">[</span><span class="token string">'First'</span><span class="token punctuation">]</span>df<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token string">'Third'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'列删除：\n'</span><span class="token punctuation">,</span> df<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 属性或方法</span>dict <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'Name'</span><span class="token punctuation">:</span>pd<span class="token punctuation">.</span>Series<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'Tom'</span><span class="token punctuation">,</span><span class="token string">'James'</span><span class="token punctuation">,</span><span class="token string">'Ricky'</span><span class="token punctuation">,</span><span class="token string">'Vin'</span><span class="token punctuation">,</span><span class="token string">'Steve'</span><span class="token punctuation">,</span><span class="token string">'Minsu'</span><span class="token punctuation">,</span><span class="token string">'Jack'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>   <span class="token string">'Age'</span><span class="token punctuation">:</span>pd<span class="token punctuation">.</span>Series<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">25</span><span class="token punctuation">,</span><span class="token number">26</span><span class="token punctuation">,</span><span class="token number">25</span><span class="token punctuation">,</span><span class="token number">23</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">,</span><span class="token number">29</span><span class="token punctuation">,</span><span class="token number">23</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>   <span class="token string">'Rating'</span><span class="token punctuation">:</span>pd<span class="token punctuation">.</span>Series<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">4.23</span><span class="token punctuation">,</span><span class="token number">3.24</span><span class="token punctuation">,</span><span class="token number">3.98</span><span class="token punctuation">,</span><span class="token number">2.56</span><span class="token punctuation">,</span><span class="token number">3.20</span><span class="token punctuation">,</span><span class="token number">4.6</span><span class="token punctuation">,</span><span class="token number">3.8</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">}</span>dataFrame <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span>dict<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 1、axes，返回行轴标签列表</span>dataFrame <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span>np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>randn<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'axes:\n'</span><span class="token punctuation">,</span> dataFrame<span class="token punctuation">.</span>axes<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 2、dtypes，返回对象数据类型</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'dtype:\n'</span><span class="token punctuation">,</span> dataFrame<span class="token punctuation">.</span>dtypes<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 3、empty，若系列为空，返回True</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'empty:\n'</span><span class="token punctuation">,</span> dataFrame<span class="token punctuation">.</span>empty<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 4、ndim，返回底层数据的维数</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'ndim:\n'</span><span class="token punctuation">,</span> dataFrame<span class="token punctuation">.</span>ndim<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 5、size，返回基础数据中的元素数</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'size:\n'</span><span class="token punctuation">,</span> dataFrame<span class="token punctuation">.</span>size<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 6、values，将系列作为ndarray返回</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'values:\n'</span><span class="token punctuation">,</span> dataFrame<span class="token punctuation">.</span>values<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 7、head(n),返回前n行</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'head:\n'</span><span class="token punctuation">,</span> dataFrame<span class="token punctuation">.</span>head<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 8、tail(n),返回后n行</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'tail:\n'</span><span class="token punctuation">,</span> dataFrame<span class="token punctuation">.</span>tail<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 9、T，转置</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'T:\n'</span><span class="token punctuation">,</span> dataFrame<span class="token punctuation">.</span>T<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 10、shape，返回表示DataFrame的维度的元祖</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'shape:\n'</span><span class="token punctuation">,</span> dataFrame<span class="token punctuation">.</span>shape<span class="token punctuation">)</span><span class="token triple-quoted-string string">"""Panel"""</span><span class="token comment" spellcheck="true"># pandas.Panel(data,items,major_axis,minor_axis,dtype,copy)</span><span class="token comment" spellcheck="true"># 创建面板</span><span class="token comment" spellcheck="true"># 创建一个空面板</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Null Panel:\n'</span><span class="token punctuation">,</span> pd<span class="token punctuation">.</span>Panel<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 从3D ndarray创建</span>data <span class="token operator">=</span> np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>rand<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'3D narray:\n'</span><span class="token punctuation">,</span> pd<span class="token punctuation">.</span>Panel<span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 从DataFrame对象的dict创建面板</span>data <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'Item1'</span> <span class="token punctuation">:</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span>np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>randn<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token string">'Item2'</span> <span class="token punctuation">:</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span>np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>randn<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'DataFrame的Dict:\n'</span><span class="token punctuation">,</span> pd<span class="token punctuation">.</span>Panel<span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token triple-quoted-string string">"""描述性统计"""</span>dict <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'Name'</span><span class="token punctuation">:</span>pd<span class="token punctuation">.</span>Series<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'Tom'</span><span class="token punctuation">,</span><span class="token string">'James'</span><span class="token punctuation">,</span><span class="token string">'Ricky'</span><span class="token punctuation">,</span><span class="token string">'Vin'</span><span class="token punctuation">,</span><span class="token string">'Steve'</span><span class="token punctuation">,</span><span class="token string">'Minsu'</span><span class="token punctuation">,</span><span class="token string">'Jack'</span><span class="token punctuation">,</span>   <span class="token string">'Lee'</span><span class="token punctuation">,</span><span class="token string">'David'</span><span class="token punctuation">,</span><span class="token string">'Gasper'</span><span class="token punctuation">,</span><span class="token string">'Betina'</span><span class="token punctuation">,</span><span class="token string">'Andres'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>   <span class="token string">'Age'</span><span class="token punctuation">:</span>pd<span class="token punctuation">.</span>Series<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">25</span><span class="token punctuation">,</span><span class="token number">26</span><span class="token punctuation">,</span><span class="token number">25</span><span class="token punctuation">,</span><span class="token number">23</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">,</span><span class="token number">29</span><span class="token punctuation">,</span><span class="token number">23</span><span class="token punctuation">,</span><span class="token number">34</span><span class="token punctuation">,</span><span class="token number">40</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">,</span><span class="token number">51</span><span class="token punctuation">,</span><span class="token number">46</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>   <span class="token string">'Rating'</span><span class="token punctuation">:</span>pd<span class="token punctuation">.</span>Series<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">4.23</span><span class="token punctuation">,</span><span class="token number">3.24</span><span class="token punctuation">,</span><span class="token number">3.98</span><span class="token punctuation">,</span><span class="token number">2.56</span><span class="token punctuation">,</span><span class="token number">3.20</span><span class="token punctuation">,</span><span class="token number">4.6</span><span class="token punctuation">,</span><span class="token number">3.8</span><span class="token punctuation">,</span><span class="token number">3.78</span><span class="token punctuation">,</span><span class="token number">2.98</span><span class="token punctuation">,</span><span class="token number">4.80</span><span class="token punctuation">,</span><span class="token number">4.10</span><span class="token punctuation">,</span><span class="token number">3.65</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">}</span>dataFrame <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span>dict<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 求和</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'sum:\n'</span><span class="token punctuation">,</span> dataFrame<span class="token punctuation">.</span>sum<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 均值</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'avg:\n'</span><span class="token punctuation">,</span> dataFrame<span class="token punctuation">.</span>mean<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 标准差</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'std:\n'</span><span class="token punctuation">,</span> dataFrame<span class="token punctuation">.</span>std<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 非空观测数量</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'count:\n'</span><span class="token punctuation">,</span> dataFrame<span class="token punctuation">.</span>count<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 中位数</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'median:\n'</span><span class="token punctuation">,</span> dataFrame<span class="token punctuation">.</span>median<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 模值</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'mode:\n'</span><span class="token punctuation">,</span> dataFrame<span class="token punctuation">.</span>mode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 累计总和</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'cumsum:\n'</span><span class="token punctuation">,</span> dataFrame<span class="token punctuation">.</span>cumsum<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 累计乘积</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'cumprod:\n'</span><span class="token punctuation">,</span> dataFrame<span class="token punctuation">[</span><span class="token string">'Age'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>cumprod<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 统计信息摘要</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'describe:\n'</span><span class="token punctuation">,</span> dataFrame<span class="token punctuation">.</span>describe<span class="token punctuation">(</span>include<span class="token operator">=</span><span class="token string">'all'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token triple-quoted-string string">"""函数应用"""</span><span class="token comment" spellcheck="true"># 表格函数应用：pipe()</span><span class="token keyword">def</span> <span class="token function">adder</span><span class="token punctuation">(</span>elem1<span class="token punctuation">,</span> elem2<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> elem1<span class="token operator">+</span>elem2dataFrame <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span>np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>randn<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span>columns<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'col1'</span><span class="token punctuation">,</span><span class="token string">'col2'</span><span class="token punctuation">,</span><span class="token string">'col3'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>dataFrame<span class="token punctuation">.</span>pipe<span class="token punctuation">(</span>adder<span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'pipe:\n'</span><span class="token punctuation">,</span> dataFrame<span class="token punctuation">.</span>pipe<span class="token punctuation">(</span>adder<span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 行或列函数应用：apply()</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'apply:\n'</span><span class="token punctuation">,</span> dataFrame<span class="token punctuation">.</span>apply<span class="token punctuation">(</span>np<span class="token punctuation">.</span>median<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 元素函数应用：applymap()</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'map:\n'</span><span class="token punctuation">,</span> dataFrame<span class="token punctuation">[</span><span class="token string">'col1'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>map<span class="token punctuation">(</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span>x<span class="token operator">*</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'applymap:\n'</span><span class="token punctuation">,</span> dataFrame<span class="token punctuation">.</span>apply<span class="token punctuation">(</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span>x<span class="token operator">*</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token triple-quoted-string string">"""重建索引"""</span>df1 <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span>np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>randn<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span>columns<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'col1'</span><span class="token punctuation">,</span><span class="token string">'col2'</span><span class="token punctuation">,</span><span class="token string">'col3'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>df2 <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span>np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>randn<span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span>columns<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'col1'</span><span class="token punctuation">,</span><span class="token string">'col2'</span><span class="token punctuation">,</span><span class="token string">'col3'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 重建索引与其他对象对齐，reindx_like,填充方法：pad/ffill-前向填充、bfill/backfill-向后填充值、nearest-从最近索引值填充</span>df1 <span class="token operator">=</span> df1<span class="token punctuation">.</span>reindex_like<span class="token punctuation">(</span>df2<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'reindex_like:\n'</span><span class="token punctuation">,</span> df1<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'ffill:\n'</span><span class="token punctuation">,</span> df2<span class="token punctuation">.</span>reindex_like<span class="token punctuation">(</span>df1<span class="token punctuation">,</span> method<span class="token operator">=</span><span class="token string">'ffill'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 重建索引时的填充限制</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'limit:\n'</span><span class="token punctuation">,</span> df2<span class="token punctuation">.</span>reindex_like<span class="token punctuation">(</span>df1<span class="token punctuation">,</span> method<span class="token operator">=</span><span class="token string">'nearest'</span><span class="token punctuation">,</span> limit<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 重命名</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'rename:\n'</span><span class="token punctuation">,</span> df1<span class="token punctuation">.</span>rename<span class="token punctuation">(</span>columns<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">'col1'</span><span class="token punctuation">:</span><span class="token string">'c1'</span><span class="token punctuation">,</span> <span class="token string">'col2'</span><span class="token punctuation">:</span><span class="token string">'c2'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token triple-quoted-string string">"""迭代"""</span>SIZE<span class="token operator">=</span><span class="token number">20</span>dataFrame <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span><span class="token punctuation">{</span>    <span class="token string">'A'</span><span class="token punctuation">:</span> pd<span class="token punctuation">.</span>date_range<span class="token punctuation">(</span>start<span class="token operator">=</span><span class="token string">'2016-01-01'</span><span class="token punctuation">,</span>periods<span class="token operator">=</span>SIZE<span class="token punctuation">,</span>freq<span class="token operator">=</span><span class="token string">'D'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token string">'x'</span><span class="token punctuation">:</span> np<span class="token punctuation">.</span>linspace<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>stop<span class="token operator">=</span>SIZE<span class="token number">-1</span><span class="token punctuation">,</span>num<span class="token operator">=</span>SIZE<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token string">'y'</span><span class="token punctuation">:</span> np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>rand<span class="token punctuation">(</span>SIZE<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token string">'C'</span><span class="token punctuation">:</span> np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>choice<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'Low'</span><span class="token punctuation">,</span><span class="token string">'Medium'</span><span class="token punctuation">,</span><span class="token string">'High'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>SIZE<span class="token punctuation">)</span><span class="token punctuation">.</span>tolist<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token string">'D'</span><span class="token punctuation">:</span> np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>normal<span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> size<span class="token operator">=</span><span class="token punctuation">(</span>SIZE<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>tolist<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># iteritems()，每个列作为键，将值与值作为键和列值迭代为Series对象</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'iteritems:'</span><span class="token punctuation">)</span><span class="token keyword">for</span> key<span class="token punctuation">,</span> value <span class="token keyword">in</span> dataFrame<span class="token punctuation">.</span>iteritems<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span>value<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># iterrow()，返回迭代器，产生每个索引值及每行数据的序列</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'iterrow:'</span><span class="token punctuation">)</span>dataFramea <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span>np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>randn<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span>columns <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'col1'</span><span class="token punctuation">,</span><span class="token string">'col2'</span><span class="token punctuation">,</span><span class="token string">'col3'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">for</span> row_index<span class="token punctuation">,</span> row <span class="token keyword">in</span> dataFrame<span class="token punctuation">.</span>iterrows<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>row_index<span class="token punctuation">,</span> row<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># intertuples(),为DataFrame中的每一行返回一个产生一个命名元祖的迭代器，元祖的第一个元素将是行的相应索引值，剩余的值是行值</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'itertuples:'</span><span class="token punctuation">)</span><span class="token keyword">for</span> row <span class="token keyword">in</span> dataFrame<span class="token punctuation">.</span>itertuples<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>row<span class="token punctuation">)</span><span class="token triple-quoted-string string">"""排序"""</span>unsorted_df<span class="token operator">=</span>pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span>np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>randn<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span>index<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                         columns<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'col2'</span><span class="token punctuation">,</span><span class="token string">'col1'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>unsorted_df<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># sort_index(),按标签排序</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'sort_index:\n'</span><span class="token punctuation">,</span> unsorted_df<span class="token punctuation">.</span>sort_index<span class="token punctuation">(</span>ascending<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># sort_values,按值排序</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'sort_values:\n'</span><span class="token punctuation">,</span> unsorted_df<span class="token punctuation">.</span>sort_values<span class="token punctuation">(</span>by<span class="token operator">=</span><span class="token string">'col2'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 排序算法:mergesort(唯一稳定)、heapsort、quicksort</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'sort algorithm:\n'</span><span class="token punctuation">,</span> unsorted_df<span class="token punctuation">.</span>sort_index<span class="token punctuation">(</span>kind<span class="token operator">=</span><span class="token string">'heapsort'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token triple-quoted-string string">"""字符串和文本数据"""</span><span class="token comment" spellcheck="true"># 1、lower()    将Series/Index中的字符串转换为小写。</span><span class="token comment" spellcheck="true"># 2、upper()    将Series/Index中的字符串转换为大写。</span><span class="token comment" spellcheck="true"># 3、len()    计算字符串长度。</span><span class="token comment" spellcheck="true"># 4、strip()    帮助从两侧的系列/索引中的每个字符串中删除空格(包括换行符)。</span><span class="token comment" spellcheck="true"># 5、split(' ')    用给定的模式拆分每个字符串。</span><span class="token comment" spellcheck="true"># 6、cat(sep=' ')    使用给定的分隔符连接系列/索引元素。</span><span class="token comment" spellcheck="true"># 7、get_dummies()    返回具有单热编码值的数据帧(DataFrame)。</span>strings <span class="token operator">=</span> pd<span class="token punctuation">.</span>Series<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'Tim '</span><span class="token punctuation">,</span> <span class="token string">' Rick'</span><span class="token punctuation">,</span> <span class="token string">'Joson'</span><span class="token punctuation">,</span> <span class="token string">'Albert'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">'get_dummies:\n'</span><span class="token punctuation">,</span> strings<span class="token punctuation">.</span>str<span class="token punctuation">.</span>get_dummies<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 8、contains(pattern)    如果元素中包含子字符串，则返回每个元素的布尔值True，否则为False。</span><span class="token comment" spellcheck="true"># 9、replace(a,b)    将值a替换为值b。</span><span class="token comment" spellcheck="true"># 10、repeat(value)    重复每个元素指定的次数。</span><span class="token comment" spellcheck="true"># 11、count(pattern)    返回模式中每个元素的出现总数。</span><span class="token comment" spellcheck="true"># 12、startswith(pattern)    如果系列/索引中的元素以模式开始，则返回true。</span><span class="token comment" spellcheck="true"># 13、endswith(pattern)    如果系列/索引中的元素以模式结束，则返回true。</span><span class="token comment" spellcheck="true"># 14、find(pattern)    返回模式第一次出现的位置。</span><span class="token comment" spellcheck="true"># 15、findall(pattern)    返回模式的所有出现的列表。</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'findall:\n'</span><span class="token punctuation">,</span> strings<span class="token punctuation">.</span>str<span class="token punctuation">.</span>findall<span class="token punctuation">(</span><span class="token string">'e'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 16、swapcase    变换字母大小写。</span><span class="token comment" spellcheck="true"># 17、islower()    检查系列/索引中每个字符串中的所有字符是否小写，返回布尔值</span><span class="token comment" spellcheck="true"># 18、isupper()    检查系列/索引中每个字符串中的所有字符是否大写，返回布尔值</span><span class="token comment" spellcheck="true"># 19、isnumeric() 检查系列/索引中每个字符串中的所有字符是否为数字，返回布尔值。</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'isnumeric:\n'</span><span class="token punctuation">,</span> strings<span class="token punctuation">.</span>str<span class="token punctuation">.</span>isnumeric<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token triple-quoted-string string">"""选项和自定义"""</span><span class="token comment" spellcheck="true"># get_option(param)，一个参数，获取属性值</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'display max rows:'</span><span class="token punctuation">,</span> pd<span class="token punctuation">.</span>get_option<span class="token punctuation">(</span><span class="token string">'display.max_rows'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'display max columns:'</span><span class="token punctuation">,</span> pd<span class="token punctuation">.</span>get_option<span class="token punctuation">(</span><span class="token string">'display.max_columns'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># set_option(param, value)，两个参数，将该值设置为指定的参数值</span>pd<span class="token punctuation">.</span>set_option<span class="token punctuation">(</span><span class="token string">'display.max_rows'</span><span class="token punctuation">,</span> <span class="token number">90</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'display max rows: '</span><span class="token punctuation">,</span> pd<span class="token punctuation">.</span>get_option<span class="token punctuation">(</span><span class="token string">'display.max_rows'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># reset_option(param)，接受一个参数，并将该值设置为默认值</span>pd<span class="token punctuation">.</span>reset_option<span class="token punctuation">(</span><span class="token string">'display.max_rows'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'display max rows: '</span><span class="token punctuation">,</span> pd<span class="token punctuation">.</span>get_option<span class="token punctuation">(</span><span class="token string">'display.max_rows'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># describe_option(param)，打印参数的描述</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'description:'</span><span class="token punctuation">)</span>pd<span class="token punctuation">.</span>describe_option<span class="token punctuation">(</span><span class="token string">'display.max_rows'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># option_context()，上下文管理器用于临时设置语句中的选项</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'option_context:'</span><span class="token punctuation">)</span><span class="token keyword">with</span> pd<span class="token punctuation">.</span>option_context<span class="token punctuation">(</span><span class="token string">'display.max_rows'</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>pd<span class="token punctuation">.</span>get_option<span class="token punctuation">(</span><span class="token string">'display.max_rows'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 最大行数</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>pd<span class="token punctuation">.</span>get_option<span class="token punctuation">(</span><span class="token string">'display.max_columns'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 最大列数</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>pd<span class="token punctuation">.</span>get_option<span class="token punctuation">(</span><span class="token string">'display.max_colwidth'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 最大列宽</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>pd<span class="token punctuation">.</span>get_option<span class="token punctuation">(</span><span class="token string">'display.precision'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 十进制的精度</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>pd<span class="token punctuation">.</span>get_option<span class="token punctuation">(</span><span class="token string">'display.expand_frame_repr'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 数据帧以拉伸页面</span><span class="token triple-quoted-string string">"""索引与数据选择"""</span><span class="token comment" spellcheck="true"># 1、.loc(),基于标签</span><span class="token comment" spellcheck="true"># 2、.iloc(),基于整数</span><span class="token comment" spellcheck="true"># 3、.ix(),基于标签和数据</span>dataFrame <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span>np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>randn<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">,</span> columns <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'A'</span><span class="token punctuation">,</span> <span class="token string">'B'</span><span class="token punctuation">,</span> <span class="token string">'C'</span><span class="token punctuation">,</span> <span class="token string">'D'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>dataFrame<span class="token punctuation">.</span>ix<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token triple-quoted-string string">"""统计函数"""</span><span class="token comment" spellcheck="true"># pct_change(),将每个元素与前一个元素进行比较，并计算变化百分比</span>df <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span>np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>randn<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">'pct_change:\n'</span><span class="token punctuation">,</span> df<span class="token punctuation">.</span>pct_change<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 协方差</span>seri1 <span class="token operator">=</span> pd<span class="token punctuation">.</span>Series<span class="token punctuation">(</span>np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>randn<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span>seri2 <span class="token operator">=</span> pd<span class="token punctuation">.</span>Series<span class="token punctuation">(</span>np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>randn<span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'cov:\n'</span><span class="token punctuation">,</span> seri1<span class="token punctuation">.</span>cov<span class="token punctuation">(</span>seri2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 相关性</span>frame <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span>np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>randn<span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">,</span> columns<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">,</span> <span class="token string">'d'</span><span class="token punctuation">,</span> <span class="token string">'e'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'相关性：\n'</span><span class="token punctuation">,</span> frame<span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>corr<span class="token punctuation">(</span>frame<span class="token punctuation">[</span><span class="token string">'c'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 数据排名</span>s <span class="token operator">=</span> pd<span class="token punctuation">.</span>Series<span class="token punctuation">(</span>np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>randn<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">,</span> index<span class="token operator">=</span>list<span class="token punctuation">(</span><span class="token string">'abcde'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>s<span class="token punctuation">[</span><span class="token string">'d'</span><span class="token punctuation">]</span> <span class="token operator">=</span> s<span class="token punctuation">[</span><span class="token string">'e'</span><span class="token punctuation">]</span><span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">'rank:\n'</span><span class="token punctuation">,</span> s<span class="token punctuation">.</span>rank<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token triple-quoted-string string">"""合并/连接"""</span>left <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span><span class="token punctuation">{</span>         <span class="token string">'id'</span><span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">,</span>         <span class="token string">'Name'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Alex'</span><span class="token punctuation">,</span> <span class="token string">'Amy'</span><span class="token punctuation">,</span> <span class="token string">'Allen'</span><span class="token punctuation">,</span> <span class="token string">'Alice'</span><span class="token punctuation">,</span> <span class="token string">'Ayoung'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>         <span class="token string">'subject_id'</span><span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token string">'sub1'</span><span class="token punctuation">,</span><span class="token string">'sub2'</span><span class="token punctuation">,</span><span class="token string">'sub4'</span><span class="token punctuation">,</span><span class="token string">'sub6'</span><span class="token punctuation">,</span><span class="token string">'sub5'</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">)</span>right <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span>         <span class="token punctuation">{</span><span class="token string">'id'</span><span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">,</span>         <span class="token string">'Name'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Billy'</span><span class="token punctuation">,</span> <span class="token string">'Brian'</span><span class="token punctuation">,</span> <span class="token string">'Bran'</span><span class="token punctuation">,</span> <span class="token string">'Bryce'</span><span class="token punctuation">,</span> <span class="token string">'Betty'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>         <span class="token string">'subject_id'</span><span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token string">'sub2'</span><span class="token punctuation">,</span><span class="token string">'sub4'</span><span class="token punctuation">,</span><span class="token string">'sub3'</span><span class="token punctuation">,</span><span class="token string">'sub6'</span><span class="token punctuation">,</span><span class="token string">'sub5'</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">)</span>left_merge <span class="token operator">=</span> pd<span class="token punctuation">.</span>merge<span class="token punctuation">(</span>left<span class="token punctuation">,</span> right<span class="token punctuation">,</span> on<span class="token operator">=</span><span class="token string">'subject_id'</span><span class="token punctuation">,</span> how<span class="token operator">=</span><span class="token string">'left'</span><span class="token punctuation">)</span>right_merge <span class="token operator">=</span> pd<span class="token punctuation">.</span>merge<span class="token punctuation">(</span>left<span class="token punctuation">,</span> right<span class="token punctuation">,</span> on<span class="token operator">=</span><span class="token string">'subject_id'</span><span class="token punctuation">,</span> how<span class="token operator">=</span><span class="token string">'right'</span><span class="token punctuation">)</span>outer_merge <span class="token operator">=</span> pd<span class="token punctuation">.</span>merge<span class="token punctuation">(</span>left<span class="token punctuation">,</span> right<span class="token punctuation">,</span> on<span class="token operator">=</span><span class="token string">'subject_id'</span><span class="token punctuation">,</span> how<span class="token operator">=</span><span class="token string">'outer'</span><span class="token punctuation">)</span>inner_merge <span class="token operator">=</span> pd<span class="token punctuation">.</span>merge<span class="token punctuation">(</span>left<span class="token punctuation">,</span> right<span class="token punctuation">,</span> on<span class="token operator">=</span><span class="token string">'subject_id'</span><span class="token punctuation">,</span> how<span class="token operator">=</span><span class="token string">'inner'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'left:\t'</span><span class="token punctuation">,</span> left_merge<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'right:\t'</span><span class="token punctuation">,</span> right_merge<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'outer:\t'</span><span class="token punctuation">,</span> outer_merge<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'inner:\t'</span><span class="token punctuation">,</span> inner_merge<span class="token punctuation">)</span><span class="token triple-quoted-string string">"""级联"""</span><span class="token comment" spellcheck="true"># concat(objs, axis, join, join_axes, ignore_index)</span>one <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span><span class="token punctuation">{</span>         <span class="token string">'Name'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Alex'</span><span class="token punctuation">,</span> <span class="token string">'Amy'</span><span class="token punctuation">,</span> <span class="token string">'Allen'</span><span class="token punctuation">,</span> <span class="token string">'Alice'</span><span class="token punctuation">,</span> <span class="token string">'Ayoung'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>         <span class="token string">'subject_id'</span><span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token string">'sub1'</span><span class="token punctuation">,</span><span class="token string">'sub2'</span><span class="token punctuation">,</span><span class="token string">'sub4'</span><span class="token punctuation">,</span><span class="token string">'sub6'</span><span class="token punctuation">,</span><span class="token string">'sub5'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>         <span class="token string">'Marks_scored'</span><span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token number">98</span><span class="token punctuation">,</span><span class="token number">90</span><span class="token punctuation">,</span><span class="token number">87</span><span class="token punctuation">,</span><span class="token number">69</span><span class="token punctuation">,</span><span class="token number">78</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">,</span>         index<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span>two <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span><span class="token punctuation">{</span>         <span class="token string">'Name'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Billy'</span><span class="token punctuation">,</span> <span class="token string">'Brian'</span><span class="token punctuation">,</span> <span class="token string">'Bran'</span><span class="token punctuation">,</span> <span class="token string">'Bryce'</span><span class="token punctuation">,</span> <span class="token string">'Betty'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>         <span class="token string">'subject_id'</span><span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token string">'sub2'</span><span class="token punctuation">,</span><span class="token string">'sub4'</span><span class="token punctuation">,</span><span class="token string">'sub3'</span><span class="token punctuation">,</span><span class="token string">'sub6'</span><span class="token punctuation">,</span><span class="token string">'sub5'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>         <span class="token string">'Marks_scored'</span><span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token number">89</span><span class="token punctuation">,</span><span class="token number">80</span><span class="token punctuation">,</span><span class="token number">79</span><span class="token punctuation">,</span><span class="token number">97</span><span class="token punctuation">,</span><span class="token number">88</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">,</span>         index<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span>str_concat <span class="token operator">=</span> pd<span class="token punctuation">.</span>concat<span class="token punctuation">(</span><span class="token punctuation">[</span>one<span class="token punctuation">,</span>two<span class="token punctuation">]</span><span class="token punctuation">,</span> ignore_index<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'级联:\n'</span><span class="token punctuation">,</span> str_concat<span class="token punctuation">)</span><span class="token triple-quoted-string string">""""时间序列"""</span><span class="token comment" spellcheck="true"># 获取当前时间</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'time now:\n'</span><span class="token punctuation">,</span> pd<span class="token punctuation">.</span>datetime<span class="token punctuation">.</span>now<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 创建时间戳</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'创建时间戳：\n'</span><span class="token punctuation">,</span> pd<span class="token punctuation">.</span>Timestamp<span class="token punctuation">(</span><span class="token string">'2018-11-11'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 转换为时间戳</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'转换时间戳：\n'</span><span class="token punctuation">,</span> pd<span class="token punctuation">.</span>to_datetime<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'2018/11/23'</span><span class="token punctuation">,</span> <span class="token string">'2010.12.31'</span><span class="token punctuation">,</span> None<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 改变时间频率</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'改变频率：\n'</span><span class="token punctuation">,</span> pd<span class="token punctuation">.</span>date_range<span class="token punctuation">(</span><span class="token string">"12:00"</span><span class="token punctuation">,</span> <span class="token string">"19:59"</span><span class="token punctuation">,</span> freq<span class="token operator">=</span><span class="token string">"H"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>time<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 时间差</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'时间差:\n'</span><span class="token punctuation">,</span> pd<span class="token punctuation">.</span>Timedelta<span class="token punctuation">(</span><span class="token string">'60 days 11 hours 33 minutes 30 seconds'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token triple-quoted-string string">"""绘图"""</span>df <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span>np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>randn<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">,</span>index<span class="token operator">=</span>pd<span class="token punctuation">.</span>date_range<span class="token punctuation">(</span><span class="token string">'2018/12/16'</span><span class="token punctuation">,</span>   periods<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">,</span> columns<span class="token operator">=</span>list<span class="token punctuation">(</span><span class="token string">'ABCDE'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>df<span class="token punctuation">.</span>plot<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 条形图</span>df<span class="token punctuation">.</span>plot<span class="token punctuation">.</span>bar<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 直方图</span>df<span class="token punctuation">.</span>plot<span class="token punctuation">.</span>hist<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 盒型图</span>df<span class="token punctuation">.</span>boxplot<span class="token punctuation">(</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token triple-quoted-string string">""""IO工具"""</span><span class="token comment" spellcheck="true"># pandas.read_csv(filepath_or_buffer, sep=',', delimiter=None, header='infer',names=None, index_col=None, usecols=None)</span><span class="token comment" spellcheck="true"># 读取文件</span>file <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_csv<span class="token punctuation">(</span><span class="token string">'read.csv'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 编程语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Pandas </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Matplotlib使用笔记</title>
      <link href="/2019/10/02/matplotlib-shi-yong-bi-ji/"/>
      <url>/2019/10/02/matplotlib-shi-yong-bi-ji/</url>
      
        <content type="html"><![CDATA[<h1 id="什么是Matplotlib"><a href="#什么是Matplotlib" class="headerlink" title="什么是Matplotlib"></a>什么是Matplotlib</h1><p>引用维基百科中的定义，Matplotlib是Python编程语言及其数学扩展包Numpy的可视化操作界面。通过利用Tkinter、wxPython、QT、GTK+等通用图形用户界面工具包，为应用程序嵌入式绘图提供了API。此外，它还有一个基于图像处理库的pylab接口，其设计与Matlab十分相似；</p><h1 id="如何使用Matplotlib"><a href="#如何使用Matplotlib" class="headerlink" title="如何使用Matplotlib"></a>如何使用Matplotlib</h1><p>我将通过代码实例的形式给出Matplotlib的使用方法，具体情况如下：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/env python</span><span class="token comment" spellcheck="true"># -*- coding: utf-8 -*-</span><span class="token comment" spellcheck="true"># @Time    : 2018/12/21 9:59</span><span class="token comment" spellcheck="true"># @Author  : Cunyu</span><span class="token comment" spellcheck="true"># @Site    : cunyu1943.github.io</span><span class="token comment" spellcheck="true"># @File    : matplotlib_examples.py</span><span class="token comment" spellcheck="true"># @Software: PyCharm</span><span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> plt<span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">from</span> mpl_toolkits<span class="token punctuation">.</span>mplot3d <span class="token keyword">import</span> Axes3D<span class="token triple-quoted-string string">"""基本使用"""</span>x <span class="token operator">=</span> np<span class="token punctuation">.</span>linspace<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span>y1 <span class="token operator">=</span> <span class="token number">2</span> <span class="token operator">*</span> x <span class="token operator">+</span><span class="token number">5</span>y2 <span class="token operator">=</span> x <span class="token operator">**</span> <span class="token number">2</span><span class="token comment" spellcheck="true"># 定义一个图像窗口，并画出图像</span>plt<span class="token punctuation">.</span>figure<span class="token punctuation">(</span>num<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> figsize<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>x<span class="token punctuation">,</span> y1<span class="token punctuation">,</span> label <span class="token operator">=</span> <span class="token string">'linear'</span><span class="token punctuation">,</span> color <span class="token operator">=</span> <span class="token string">'red'</span><span class="token punctuation">,</span> linestyle<span class="token operator">=</span><span class="token string">'--'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>x<span class="token punctuation">,</span> y2<span class="token punctuation">,</span> label <span class="token operator">=</span> <span class="token string">'square'</span><span class="token punctuation">,</span> color <span class="token operator">=</span> <span class="token string">'blue'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 调整坐标轴名字及其间隔</span>plt<span class="token punctuation">.</span>ylim<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>xlim<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>xlabel<span class="token punctuation">(</span><span class="token string">'x'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>ylabel<span class="token punctuation">(</span><span class="token string">'y'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 设置坐标轴刻度及对应名</span>new_ticks <span class="token operator">=</span> np<span class="token punctuation">.</span>linspace<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>new_ticks<span class="token punctuation">)</span>plt<span class="token punctuation">.</span>xticks<span class="token punctuation">(</span>new_ticks<span class="token punctuation">)</span>plt<span class="token punctuation">.</span>yticks<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span>r<span class="token string">'$really\ bad$'</span><span class="token punctuation">,</span> r<span class="token string">'$bad$'</span><span class="token punctuation">,</span> r<span class="token string">'$normal$'</span><span class="token punctuation">,</span> r<span class="token string">'$good$'</span><span class="token punctuation">,</span> r<span class="token string">'$really\ good$'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 获取坐标轴信息</span>ax <span class="token operator">=</span> plt<span class="token punctuation">.</span>gca<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 设置边框信息,将上边框和右边框设置为不同颜色，默认是白色</span>ax<span class="token punctuation">.</span>spines<span class="token punctuation">[</span><span class="token string">'right'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>set_color<span class="token punctuation">(</span><span class="token string">'green'</span><span class="token punctuation">)</span>ax<span class="token punctuation">.</span>spines<span class="token punctuation">[</span><span class="token string">'top'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>set_color<span class="token punctuation">(</span><span class="token string">'purple'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 调整坐标轴位置</span>ax<span class="token punctuation">.</span>spines<span class="token punctuation">[</span><span class="token string">'left'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>set_position<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">'data'</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>ax<span class="token punctuation">.</span>spines<span class="token punctuation">[</span><span class="token string">'bottom'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>set_position<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">'data'</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token triple-quoted-string string">"""Legend图例，添加图例添加位置参数： 'best' : 0,           'upper right'  : 1, 'upper left'   : 2, 'lower left'   : 3, 'lower right'  : 4, 'right'        : 5, 'center left'  : 6, 'center right' : 7, 'lower center' : 8, 'upper center' : 9, 'center'       : 10,"""</span>plt<span class="token punctuation">.</span>legend<span class="token punctuation">(</span>loc <span class="token operator">=</span> <span class="token string">'upper right'</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 显示在右上角</span><span class="token comment" spellcheck="true"># 添加注释</span>plt<span class="token punctuation">.</span>text<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> r<span class="token string">'This is (0, 0).'</span><span class="token punctuation">,</span> fontdict<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">'size'</span><span class="token punctuation">:</span><span class="token number">14</span><span class="token punctuation">,</span> <span class="token string">'color'</span><span class="token punctuation">:</span><span class="token string">'red'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 显示图像</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token triple-quoted-string string">"""画图种类"""</span><span class="token comment" spellcheck="true"># 散点图</span>SIZE <span class="token operator">=</span> <span class="token number">1024</span>x <span class="token operator">=</span> np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>normal<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> SIZE<span class="token punctuation">)</span>y <span class="token operator">=</span> np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>normal<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> SIZE<span class="token punctuation">)</span>T <span class="token operator">=</span> np<span class="token punctuation">.</span>arctan2<span class="token punctuation">(</span>y<span class="token punctuation">,</span> x<span class="token punctuation">)</span>plt<span class="token punctuation">.</span>scatter<span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> s<span class="token operator">=</span><span class="token number">75</span><span class="token punctuation">,</span> c<span class="token operator">=</span>T<span class="token punctuation">,</span> alpha<span class="token operator">=</span><span class="token punctuation">.</span><span class="token number">5</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># bar柱状图</span>x <span class="token operator">=</span> np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token number">15</span><span class="token punctuation">)</span>Y1 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">-</span> x <span class="token operator">/</span> float<span class="token punctuation">(</span><span class="token number">15</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>uniform<span class="token punctuation">(</span><span class="token number">0.5</span><span class="token punctuation">,</span> <span class="token number">1.0</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">)</span>Y2 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">-</span> x <span class="token operator">/</span> float<span class="token punctuation">(</span><span class="token number">15</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>uniform<span class="token punctuation">(</span><span class="token number">0.5</span><span class="token punctuation">,</span> <span class="token number">1.0</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>bar<span class="token punctuation">(</span>x<span class="token punctuation">,</span> Y1<span class="token punctuation">,</span> edgecolor <span class="token operator">=</span><span class="token string">'black'</span><span class="token punctuation">,</span>facecolor<span class="token operator">=</span><span class="token string">'red'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>bar<span class="token punctuation">(</span>x<span class="token punctuation">,</span> <span class="token operator">-</span>Y2<span class="token punctuation">,</span> edgecolor <span class="token operator">=</span><span class="token string">'yellow'</span><span class="token punctuation">,</span>facecolor<span class="token operator">=</span><span class="token string">'blue'</span><span class="token punctuation">)</span><span class="token keyword">for</span> x<span class="token punctuation">,</span> y <span class="token keyword">in</span> zip<span class="token punctuation">(</span>x<span class="token punctuation">,</span>Y1<span class="token punctuation">)</span><span class="token punctuation">:</span>    plt<span class="token punctuation">.</span>text<span class="token punctuation">(</span>x<span class="token operator">+</span><span class="token number">0.1</span><span class="token punctuation">,</span>y<span class="token operator">+</span><span class="token number">0.1</span><span class="token punctuation">,</span><span class="token string">'%.2f'</span> <span class="token operator">%</span> y<span class="token punctuation">,</span> ha<span class="token operator">=</span><span class="token string">'center'</span><span class="token punctuation">,</span>va<span class="token operator">=</span><span class="token string">'bottom'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 随机矩阵画图</span>a<span class="token operator">=</span>np<span class="token punctuation">.</span>array<span class="token punctuation">(</span>np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>rand<span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>reshape<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>imshow<span class="token punctuation">(</span>a<span class="token punctuation">,</span> interpolation<span class="token operator">=</span><span class="token string">'none'</span><span class="token punctuation">,</span> cmap<span class="token operator">=</span><span class="token string">'bone'</span><span class="token punctuation">,</span> origin<span class="token operator">=</span><span class="token string">'lower'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>colorbar<span class="token punctuation">(</span>shrink<span class="token operator">=</span><span class="token punctuation">.</span><span class="token number">1</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>xticks<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>yticks<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 3D图</span>fig <span class="token operator">=</span> plt<span class="token punctuation">.</span>figure<span class="token punctuation">(</span><span class="token punctuation">)</span>ax <span class="token operator">=</span> Axes3D<span class="token punctuation">(</span>fig<span class="token punctuation">)</span>x <span class="token operator">=</span> np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token number">5</span><span class="token punctuation">)</span>y <span class="token operator">=</span> np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token number">25</span><span class="token punctuation">)</span>x<span class="token punctuation">,</span>y <span class="token operator">=</span> np<span class="token punctuation">.</span>meshgrid<span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span>r <span class="token operator">=</span> np<span class="token punctuation">.</span>sqrt<span class="token punctuation">(</span>x<span class="token operator">**</span><span class="token number">2</span><span class="token punctuation">,</span>y<span class="token operator">**</span><span class="token number">2</span><span class="token punctuation">)</span>z<span class="token operator">=</span>np<span class="token punctuation">.</span>sin<span class="token punctuation">(</span>r<span class="token punctuation">)</span>ax<span class="token punctuation">.</span>plot_surface<span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">,</span>z<span class="token punctuation">,</span>cmap<span class="token operator">=</span>plt<span class="token punctuation">.</span>get_cmap<span class="token punctuation">(</span><span class="token string">'rainbow'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>rstride<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>cstride<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 投影</span>ax<span class="token punctuation">.</span>contourf<span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">,</span>z<span class="token punctuation">,</span>zdir<span class="token operator">=</span><span class="token string">'y'</span><span class="token punctuation">,</span>offset<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span>cmap<span class="token operator">=</span>plt<span class="token punctuation">.</span>get_cmap<span class="token punctuation">(</span><span class="token string">'rainbow'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token triple-quoted-string string">"""多图合并显示"""</span><span class="token comment" spellcheck="true"># 1、subplot多合一显示</span>plt<span class="token punctuation">.</span>figure<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 将整个图像窗口均匀分为2行2列</span>plt<span class="token punctuation">.</span>subplot<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>subplot<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>subplot<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>subplot<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">15</span><span class="token punctuation">]</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 将整个图像窗口不均匀划分</span>plt<span class="token punctuation">.</span>subplot<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>subplot<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>subplot<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>subplot<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">15</span><span class="token punctuation">]</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>gridspec <span class="token keyword">as</span> gridspec<span class="token comment" spellcheck="true"># 2、subplot分格显示</span>plt<span class="token punctuation">.</span>figure<span class="token punctuation">(</span><span class="token punctuation">)</span>gs <span class="token operator">=</span> gridspec<span class="token punctuation">.</span>GridSpec<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span>ax1 <span class="token operator">=</span> plt<span class="token punctuation">.</span>subplot<span class="token punctuation">(</span>gs<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span>ax2 <span class="token operator">=</span> plt<span class="token punctuation">.</span>subplot<span class="token punctuation">(</span>gs<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span>ax3 <span class="token operator">=</span> plt<span class="token punctuation">.</span>subplot<span class="token punctuation">(</span>gs<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span>ax4 <span class="token operator">=</span> plt<span class="token punctuation">.</span>subplot<span class="token punctuation">(</span>gs<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>ax5 <span class="token operator">=</span> plt<span class="token punctuation">.</span>subplot<span class="token punctuation">(</span>gs<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 3、图中图</span><span class="token comment" spellcheck="true"># 数据准备</span>fig <span class="token operator">=</span> plt<span class="token punctuation">.</span>figure<span class="token punctuation">(</span><span class="token punctuation">)</span>x <span class="token operator">=</span> np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span>y <span class="token operator">=</span> x<span class="token operator">**</span><span class="token number">2</span><span class="token keyword">print</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 大图</span>ax1 <span class="token operator">=</span> fig<span class="token punctuation">.</span>add_axes<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">.</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">)</span>ax1<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">,</span><span class="token string">'r'</span><span class="token punctuation">)</span>ax1<span class="token punctuation">.</span>set_xlabel<span class="token punctuation">(</span><span class="token string">'x'</span><span class="token punctuation">)</span>ax1<span class="token punctuation">.</span>set_ylabel<span class="token punctuation">(</span><span class="token string">'y'</span><span class="token punctuation">)</span>ax1<span class="token punctuation">.</span>set_title<span class="token punctuation">(</span><span class="token string">'title'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 小图</span>ax2 <span class="token operator">=</span> fig<span class="token punctuation">.</span>add_axes<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">.</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token number">25</span><span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token number">25</span><span class="token punctuation">]</span><span class="token punctuation">)</span>ax2<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>y<span class="token punctuation">,</span>x<span class="token punctuation">,</span><span class="token string">'b'</span><span class="token punctuation">)</span>ax2<span class="token punctuation">.</span>set_xlabel<span class="token punctuation">(</span><span class="token string">'x'</span><span class="token punctuation">)</span>ax2<span class="token punctuation">.</span>set_ylabel<span class="token punctuation">(</span><span class="token string">'y'</span><span class="token punctuation">)</span>ax2<span class="token punctuation">.</span>set_title<span class="token punctuation">(</span><span class="token string">'title inside 1'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 4、次坐标轴</span><span class="token comment" spellcheck="true"># 第一个坐标轴y</span>x <span class="token operator">=</span> np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">0.1</span><span class="token punctuation">)</span>y1 <span class="token operator">=</span> x<span class="token operator">**</span><span class="token number">2</span>y2 <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">*</span> y1fig<span class="token punctuation">,</span> ax1 <span class="token operator">=</span> plt<span class="token punctuation">.</span>subplots<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 第二个坐标轴</span>ax2 <span class="token operator">=</span> ax1<span class="token punctuation">.</span>twinx<span class="token punctuation">(</span><span class="token punctuation">)</span>ax1<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>x<span class="token punctuation">,</span> y1<span class="token punctuation">,</span> <span class="token string">'g-'</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true"># green, solid line</span>ax1<span class="token punctuation">.</span>set_xlabel<span class="token punctuation">(</span><span class="token string">'X data'</span><span class="token punctuation">)</span>ax1<span class="token punctuation">.</span>set_ylabel<span class="token punctuation">(</span><span class="token string">'Y1 data'</span><span class="token punctuation">,</span> color<span class="token operator">=</span><span class="token string">'g'</span><span class="token punctuation">)</span>ax2<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>x<span class="token punctuation">,</span> y2<span class="token punctuation">,</span> <span class="token string">'b-'</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># blue</span>ax2<span class="token punctuation">.</span>set_ylabel<span class="token punctuation">(</span><span class="token string">'Y2 data'</span><span class="token punctuation">,</span> color<span class="token operator">=</span><span class="token string">'b'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 编程语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Matplotlib </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Jupyter Notebook使用笔记</title>
      <link href="/2019/10/02/jupyter-notebook-shi-yong-bi-ji/"/>
      <url>/2019/10/02/jupyter-notebook-shi-yong-bi-ji/</url>
      
        <content type="html"><![CDATA[<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><ul><li>使用pip安装</li></ul><pre class="line-numbers language-shell"><code class="language-shell">pip install jupyter<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>使用Anaconda安装</li></ul><pre class="line-numbers language-shell"><code class="language-shell">conda install jupyter notebook<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><ul><li>获取Jupyter Notebook使用帮助</li></ul><pre class="line-numbers language-shell"><code class="language-shell"># 两者选其一jupter notebook --helpjupter notebook -h<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>启动</li></ul><pre class="line-numbers language-shell"><code class="language-shell"># 默认端口启动jupyter notebook# 指定端口启动jupyter notebook --port <port_number># 启动服务器但不打开浏览器jupyter notebook --no-browser<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="http://upload-images.jianshu.io/upload_images/9747350-e68e177e1ac6e0ef?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Jupyter Notebook主页面"></p><ul><li>文件重命名</li></ul><p><img src="http://upload-images.jianshu.io/upload_images/9747350-8b8f0a4c82136756?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><p><img src="http://upload-images.jianshu.io/upload_images/9747350-cd4955741e54f863?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><ul><li>编辑模式与命令模式切换</li></ul><p>ESC键进入命令模式，此模式下，单元格边框为灰色，且左侧边框线为蓝色粗线条；</p><p><img src="http://upload-images.jianshu.io/upload_images/9747350-694dc0506152aa08.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><p>Enter键进入编辑模式，此模式下，单元格边框和左边框线均为绿色；</p><p><img src="http://upload-images.jianshu.io/upload_images/9747350-f0f03c43da97660b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><ul><li>命令模式下快捷键</li></ul><table><thead><tr><th>快捷键</th><th>用途</th></tr></thead><tbody><tr><td>F</td><td>查找和替换</td></tr><tr><td>Enter</td><td>进入编辑模式</td></tr><tr><td>ctrl+shift+F/P</td><td>打开命令选项板</td></tr><tr><td>shift+Enter</td><td>执行当前单元格并选中下一单元格</td></tr><tr><td>Y</td><td>单元格切换至code状态</td></tr><tr><td>M</td><td>单元格切换至Markdown状态</td></tr><tr><td>1~6</td><td>将单元格分别设置为一到六级标题</td></tr><tr><td>K</td><td>选中上方单元格</td></tr><tr><td>J</td><td>选中下方单元格</td></tr><tr><td>X</td><td>剪切选中单元格</td></tr><tr><td>C</td><td>复制选中单元格</td></tr><tr><td>V</td><td>粘贴到下方单元格</td></tr><tr><td>D,D</td><td>删除选中单元格</td></tr><tr><td>S</td><td>保存</td></tr><tr><td>L</td><td>转换行号</td></tr><tr><td>O</td><td>转换输出</td></tr><tr><td>H</td><td>显示快捷键帮助</td></tr></tbody></table><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> tools </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Jupyter Notebook </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python爬虫实践--网易科技滚动新闻爬取</title>
      <link href="/2019/10/02/python-pa-chong-shi-jian-wang-yi-ke-ji-gun-dong-xin-wen-pa-qu/"/>
      <url>/2019/10/02/python-pa-chong-shi-jian-wang-yi-ke-ji-gun-dong-xin-wen-pa-qu/</url>
      
        <content type="html"><![CDATA[<h2 id="背景需求"><a href="#背景需求" class="headerlink" title="背景需求"></a>背景需求</h2><p>完成作业的同时练习爬虫，利用Xpath匹配出需要爬取的内容；</p><h2 id="需要爬取的新闻界面"><a href="#需要爬取的新闻界面" class="headerlink" title="需要爬取的新闻界面"></a>需要爬取的新闻界面</h2><p><img src="http://upload-images.jianshu.io/upload_images/9747350-e68ea59e00f46460?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><h2 id="需要爬取的信息"><a href="#需要爬取的信息" class="headerlink" title="需要爬取的信息"></a>需要爬取的信息</h2><p><img src="http://upload-images.jianshu.io/upload_images/9747350-a5861c888315a7cb?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><h2 id="实现代码"><a href="#实现代码" class="headerlink" title="实现代码"></a>实现代码</h2><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/env python</span><span class="token comment" spellcheck="true"># -*- coding: utf-8 -*-</span><span class="token comment" spellcheck="true"># @Time    : 2019/3/13 13:08</span><span class="token comment" spellcheck="true"># @Author  : cunyu</span><span class="token comment" spellcheck="true"># @Site    : cunyu1943.github.io</span><span class="token comment" spellcheck="true"># @File    : NetaseNewsSpider.py</span><span class="token comment" spellcheck="true"># @Software: PyCharm</span><span class="token keyword">import</span> requests<span class="token keyword">from</span> lxml <span class="token keyword">import</span> etree<span class="token keyword">import</span> xlwtheaders <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token string">"User-Agent"</span><span class="token punctuation">:</span><span class="token string">"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/73.0.3683.75 Safari/537.36"</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true"># 根据url获取刚网页中的新闻详情页的网址列表</span><span class="token keyword">def</span> <span class="token function">getNewsDetailUrlList</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    :param url: 每页的URL    :return newDetailList:每页包含的新闻详情URL    """</span>    response <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">,</span> headers<span class="token operator">=</span>headers<span class="token punctuation">)</span>    html <span class="token operator">=</span> response<span class="token punctuation">.</span>content<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'gbk'</span><span class="token punctuation">)</span>    selector <span class="token operator">=</span> etree<span class="token punctuation">.</span>HTML<span class="token punctuation">(</span>html<span class="token punctuation">)</span>    newsDetailList <span class="token operator">=</span> selector<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'//ul[@id="news-flow-content"]//li//div[@class="titleBar clearfix"]//h3//a/@href'</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> newsDetailList<span class="token comment" spellcheck="true"># 获取新闻标题</span><span class="token keyword">def</span> <span class="token function">getNewsTitle</span><span class="token punctuation">(</span>detailUrl<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    :param detailUrl:新闻详情url    :return newsTitle:新闻标题    """</span>    response <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>detailUrl<span class="token punctuation">,</span> headers<span class="token operator">=</span>headers<span class="token punctuation">)</span>    html <span class="token operator">=</span> response<span class="token punctuation">.</span>content<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'gbk'</span><span class="token punctuation">)</span>    selector <span class="token operator">=</span> etree<span class="token punctuation">.</span>HTML<span class="token punctuation">(</span>html<span class="token punctuation">)</span>    newsTitle <span class="token operator">=</span> selector<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'//div[@class="post_content_main"]//h1/text()'</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> newsTitle<span class="token comment" spellcheck="true"># 获取新闻详情内容</span><span class="token keyword">def</span> <span class="token function">getNewsContent</span><span class="token punctuation">(</span>detailUrl<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    :param detailUrl: 新闻详情url    :return newsContent: 新闻内容详情    """</span>    response <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>detailUrl<span class="token punctuation">,</span> headers<span class="token operator">=</span>headers<span class="token punctuation">)</span>    html <span class="token operator">=</span> response<span class="token punctuation">.</span>content<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'gbk'</span><span class="token punctuation">)</span>    selector <span class="token operator">=</span> etree<span class="token punctuation">.</span>HTML<span class="token punctuation">(</span>html<span class="token punctuation">)</span>    newsContent <span class="token operator">=</span> selector<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'//div[@class="post_text"]//p/text()'</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> newsContent<span class="token comment" spellcheck="true"># 将新闻标题和内容写入文件</span>    TODO<span class="token comment" spellcheck="true"># 获取翻页网址列表</span><span class="token keyword">def</span> <span class="token function">getUrlList</span><span class="token punctuation">(</span>baseUrl<span class="token punctuation">,</span> num<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    :param baseUrl:基础网址    :param num: 翻到第几页    :return urlList: 翻页网址列表    """</span>    urlList <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    urlList<span class="token punctuation">.</span>append<span class="token punctuation">(</span>baseUrl<span class="token punctuation">)</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> num<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        urlList<span class="token punctuation">.</span>append<span class="token punctuation">(</span>baseUrl <span class="token operator">+</span> <span class="token string">"_"</span> <span class="token operator">+</span> str<span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">.</span>zfill<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> urlList<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    baseUrl <span class="token operator">=</span> <span class="token string">"http://tech.163.com/special/gd2016"</span>    num <span class="token operator">=</span> int<span class="token punctuation">(</span>input<span class="token punctuation">(</span><span class="token string">'输入你要爬取的页数: '</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    urlList <span class="token operator">=</span> getUrlList<span class="token punctuation">(</span>baseUrl<span class="token punctuation">,</span> num<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>urlList<span class="token punctuation">)</span>    detailUrl <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> url <span class="token keyword">in</span> urlList<span class="token punctuation">:</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> getNewsDetailUrlList<span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">:</span>            detailUrl<span class="token punctuation">.</span>append<span class="token punctuation">(</span>i<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>detailUrl<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>getNewsTitle<span class="token punctuation">(</span>detailUrl<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>getNewsContent<span class="token punctuation">(</span>detailUrl<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># # 将爬取的文本存入文本文件</span>    <span class="token comment" spellcheck="true"># with open('news.txt', 'w', encoding='utf-8') as f, open('newsTitle.txt', 'w', encoding='utf-8') as titleFile,\</span>    <span class="token comment" spellcheck="true">#         open('newsContent.txt', 'w', encoding='utf-8') as contentFile:</span>    <span class="token comment" spellcheck="true">#     print('正在爬取中。。。')</span>    <span class="token comment" spellcheck="true">#     for i in detailUrl:</span>    <span class="token comment" spellcheck="true">#         f.write(''.join(getNewsTitle(i)))</span>    <span class="token comment" spellcheck="true">#         f.write('\n')</span>    <span class="token comment" spellcheck="true">#         f.write(''.join(getNewsContent(i)))</span>    <span class="token comment" spellcheck="true">#         f.write('\n')</span>    <span class="token comment" spellcheck="true"># </span>    <span class="token comment" spellcheck="true">#         titleFile.write(''.join(getNewsTitle(i)))</span>    <span class="token comment" spellcheck="true">#         titleFile.write('\n')</span>    <span class="token comment" spellcheck="true"># </span>    <span class="token comment" spellcheck="true">#         contentFile.write(''.join(getNewsContent(i)))</span>    <span class="token comment" spellcheck="true">#         contentFile.write('\n')</span>    <span class="token comment" spellcheck="true"># </span>    <span class="token comment" spellcheck="true"># print('文件写入成功')</span>    <span class="token comment" spellcheck="true"># 将爬取得文本存入excel文件</span>    <span class="token comment" spellcheck="true"># 创建一个Excel文件</span>    workbook <span class="token operator">=</span> xlwt<span class="token punctuation">.</span>Workbook<span class="token punctuation">(</span>encoding<span class="token operator">=</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span>    news_sheet <span class="token operator">=</span> workbook<span class="token punctuation">.</span>add_sheet<span class="token punctuation">(</span><span class="token string">'news'</span><span class="token punctuation">)</span>    news_sheet<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">'Title'</span><span class="token punctuation">)</span>    news_sheet<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'Content'</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'正在爬取中。。。'</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>detailUrl<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># print(detailUrl[i])</span>        news_sheet<span class="token punctuation">.</span>write<span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> getNewsTitle<span class="token punctuation">(</span>detailUrl<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        news_sheet<span class="token punctuation">.</span>write<span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> getNewsContent<span class="token punctuation">(</span>detailUrl<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 将写入操作保存到指定Excel文件中</span>    workbook<span class="token punctuation">.</span>save<span class="token punctuation">(</span><span class="token string">'网易新闻.xls'</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'文件写入成功'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h2><ul><li>代码运行结果</li></ul><p><img src="http://upload-images.jianshu.io/upload_images/9747350-1916234d4078c84b?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><ul><li>保存的文件</li></ul><p><img src="http://upload-images.jianshu.io/upload_images/9747350-3b5eff58f784cbcc?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>总体来说比较简单，代码也存在需要改进的地方，后续会改进更新，有其他想法的也可以相互交流！</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 编程语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python去除文本文件中的空行</title>
      <link href="/2019/10/02/python-qu-chu-wen-ben-wen-jian-zhong-de-kong-xing/"/>
      <url>/2019/10/02/python-qu-chu-wen-ben-wen-jian-zhong-de-kong-xing/</url>
      
        <content type="html"><![CDATA[<h2 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h2><p>读取存在空行的文件，删除其中的空行，并将其保存到新的文件中；</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/env python</span><span class="token comment" spellcheck="true"># -*- coding: utf-8 -*-</span><span class="token comment" spellcheck="true"># @Time    : 2019/3/18 21:41</span><span class="token comment" spellcheck="true"># @Author  : cunyu</span><span class="token comment" spellcheck="true"># @Site    : cunyu1943.github.io</span><span class="token comment" spellcheck="true"># @File    : deleteBlankLines.py</span><span class="token comment" spellcheck="true"># @Software: PyCharm</span><span class="token triple-quoted-string string">"""读取存在空行的文件，删除其中的空行，并将其保存到新的文件中"""</span><span class="token keyword">with</span> open<span class="token punctuation">(</span><span class="token string">'old.txt'</span><span class="token punctuation">,</span><span class="token string">'r'</span><span class="token punctuation">,</span>encoding <span class="token operator">=</span> <span class="token string">'utf-8'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> fr<span class="token punctuation">,</span>open<span class="token punctuation">(</span><span class="token string">'new.txt'</span><span class="token punctuation">,</span><span class="token string">'w'</span><span class="token punctuation">,</span>encoding <span class="token operator">=</span> <span class="token string">'utf-8'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> fd<span class="token punctuation">:</span>        <span class="token keyword">for</span> text <span class="token keyword">in</span> fr<span class="token punctuation">.</span>readlines<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">if</span> text<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                        fd<span class="token punctuation">.</span>write<span class="token punctuation">(</span>text<span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'输出成功....'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 编程语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python读取Excel中符合特定条件的数据，并写入新的表格中</title>
      <link href="/2019/10/02/python-du-qu-excel-zhong-fu-he-te-ding-tiao-jian-de-shu-ju-bing-xie-ru-xin-de-biao-ge-zhong/"/>
      <url>/2019/10/02/python-du-qu-excel-zhong-fu-he-te-ding-tiao-jian-de-shu-ju-bing-xie-ru-xin-de-biao-ge-zhong/</url>
      
        <content type="html"><![CDATA[<h1 id="原始表格"><a href="#原始表格" class="headerlink" title="原始表格"></a>原始表格</h1><p><img src="https://upload-images.jianshu.io/upload_images/9747350-6d59c5fe15e06e8c?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/env python</span><span class="token comment" spellcheck="true"># -*- coding: utf-8 -*-</span><span class="token comment" spellcheck="true"># @Time    : 2019/3/20 21:24</span><span class="token comment" spellcheck="true"># @Author  : cunyu</span><span class="token comment" spellcheck="true"># @Site    : cunyu1943.github.io</span><span class="token comment" spellcheck="true"># @File    : LimitedInfo.py</span><span class="token comment" spellcheck="true"># @Software: PyCharm</span><span class="token keyword">import</span> xlrd<span class="token keyword">import</span> xlwtfile <span class="token operator">=</span> <span class="token string">'网易新闻.xls'</span>data <span class="token operator">=</span> xlrd<span class="token punctuation">.</span>open_workbook<span class="token punctuation">(</span>file<span class="token punctuation">)</span>table <span class="token operator">=</span> data<span class="token punctuation">.</span>sheets<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>nrows <span class="token operator">=</span> table<span class="token punctuation">.</span>nrowsncols <span class="token operator">=</span> table<span class="token punctuation">.</span>ncols<span class="token keyword">print</span><span class="token punctuation">(</span>nrows<span class="token punctuation">,</span> ncols<span class="token punctuation">)</span>workbook <span class="token operator">=</span> xlwt<span class="token punctuation">.</span>Workbook<span class="token punctuation">(</span>encoding<span class="token operator">=</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span>news_sheet <span class="token operator">=</span> workbook<span class="token punctuation">.</span>add_sheet<span class="token punctuation">(</span><span class="token string">'news'</span><span class="token punctuation">)</span>news_sheet<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">'Title'</span><span class="token punctuation">)</span>news_sheet<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'Content'</span><span class="token punctuation">)</span>data <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token string">'Input the Date,format(2019-03-19:)\n'</span><span class="token punctuation">)</span>rank_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> nrows<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> table<span class="token punctuation">.</span>row_values<span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> data<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>table<span class="token punctuation">.</span>row_values<span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>        rank_list<span class="token punctuation">.</span>append<span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>rank_list<span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>rank_list<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    news_sheet<span class="token punctuation">.</span>write<span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> table<span class="token punctuation">.</span>row_values<span class="token punctuation">(</span>int<span class="token punctuation">(</span>rank_list<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    news_sheet<span class="token punctuation">.</span>write<span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> table<span class="token punctuation">.</span>row_values<span class="token punctuation">(</span>int<span class="token punctuation">(</span>rank_list<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>workbook<span class="token punctuation">.</span>save<span class="token punctuation">(</span><span class="token string">'%s-网易新闻.xls'</span> <span class="token operator">%</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="写入符合条件数据后新的表格"><a href="#写入符合条件数据后新的表格" class="headerlink" title="写入符合条件数据后新的表格"></a>写入符合条件数据后新的表格</h1><p><img src="https://upload-images.jianshu.io/upload_images/9747350-52857adfbb5fdc27?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 编程语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python实现jieba对文本分词并写入新的文本文件，然后提取出文本中的关键词</title>
      <link href="/2019/10/02/python-shi-xian-jieba-dui-wen-ben-fen-ci-bing-xie-ru-xin-de-wen-ben-wen-jian-ran-hou-ti-qu-chu-wen-ben-zhong-de-guan-jian-ci/"/>
      <url>/2019/10/02/python-shi-xian-jieba-dui-wen-ben-fen-ci-bing-xie-ru-xin-de-wen-ben-wen-jian-ran-hou-ti-qu-chu-wen-ben-zhong-de-guan-jian-ci/</url>
      
        <content type="html"><![CDATA[<h1 id="Python实现jieba对文本分词并写入新的文本文件，然后提取出文本中的关键词"><a href="#Python实现jieba对文本分词并写入新的文本文件，然后提取出文本中的关键词" class="headerlink" title="Python实现jieba对文本分词并写入新的文本文件，然后提取出文本中的关键词"></a>Python实现jieba对文本分词并写入新的文本文件，然后提取出文本中的关键词</h1><ul><li>思想<br>先对文本进行读写操作，利用jieba分词对待分词的文本进行分词，然后将分开的词之间用空格隔断；然后调用extract_tags()函数提取文本关键词；</li></ul><p><img src="https://pv4h305kt.bkt.clouddn.com/test.png?imageslim" alt=""></p><ul><li>代码</li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/env python</span><span class="token comment" spellcheck="true"># -*- coding: utf-8 -*-</span><span class="token comment" spellcheck="true"># @Time    : 2019/5/19 19:10</span><span class="token comment" spellcheck="true"># @Author  : cunyu</span><span class="token comment" spellcheck="true"># @Site    : cunyu1943.github.io</span><span class="token comment" spellcheck="true"># @File    : Seg.py</span><span class="token comment" spellcheck="true"># @Software: PyCharm</span><span class="token keyword">import</span> jieba<span class="token keyword">import</span> jieba<span class="token punctuation">.</span>analyse<span class="token comment" spellcheck="true"># 待分词的文本路径</span>sourceTxt <span class="token operator">=</span> <span class="token string">'./source.txt'</span><span class="token comment" spellcheck="true"># 分好词后的文本路径</span>targetTxt <span class="token operator">=</span> <span class="token string">'./target.txt'</span><span class="token comment" spellcheck="true"># 对文本进行操作</span><span class="token keyword">with</span> open<span class="token punctuation">(</span>sourceTxt<span class="token punctuation">,</span> <span class="token string">'r'</span><span class="token punctuation">,</span> encoding <span class="token operator">=</span> <span class="token string">'utf-8'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> sourceFile<span class="token punctuation">,</span> open<span class="token punctuation">(</span>targetTxt<span class="token punctuation">,</span> <span class="token string">'a+'</span><span class="token punctuation">,</span> encoding <span class="token operator">=</span> <span class="token string">'utf-8'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> targetFile<span class="token punctuation">:</span>    <span class="token keyword">for</span> line <span class="token keyword">in</span> sourceFile<span class="token punctuation">:</span>        seg <span class="token operator">=</span> jieba<span class="token punctuation">.</span>cut<span class="token punctuation">(</span>line<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> cut_all <span class="token operator">=</span> <span class="token boolean">False</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 分好词之后之间用空格隔断</span>        output <span class="token operator">=</span> <span class="token string">' '</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>seg<span class="token punctuation">)</span>        f<span class="token punctuation">.</span>write<span class="token punctuation">(</span>output<span class="token punctuation">)</span>        f<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">'\n'</span><span class="token punctuation">)</span>    prinf<span class="token punctuation">(</span><span class="token string">'写入成功！'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 提取关键词</span><span class="token keyword">with</span> open<span class="token punctuation">(</span>targetTxt<span class="token punctuation">,</span> <span class="token string">'r'</span><span class="token punctuation">,</span> encoding <span class="token operator">=</span> <span class="token string">'utf-8'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> file<span class="token punctuation">:</span>    text <span class="token operator">=</span> file<span class="token punctuation">.</span>readlines<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token triple-quoted-string string">"""    几个参数解释：        * text : 待提取的字符串类型文本        * topK : 返回TF-IDF权重最大的关键词的个数，默认为20个        * withWeight : 是否返回关键词的权重值，默认为False        * allowPOS : 包含指定词性的词，默认为空    """</span>    keywords <span class="token operator">=</span> jieba<span class="token punctuation">.</span>analyse<span class="token punctuation">.</span>extract_tags<span class="token punctuation">(</span>str<span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token punctuation">,</span> topK <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">,</span> withWeight<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> allowPOS<span class="token operator">=</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>keywords<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'提取完毕！'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 编程语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> jieba </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>自然语言处理NLP(四)</title>
      <link href="/2019/10/02/zi-ran-yu-yan-chu-li-nlp-si/"/>
      <url>/2019/10/02/zi-ran-yu-yan-chu-li-nlp-si/</url>
      
        <content type="html"><![CDATA[<h1 id="实体识别"><a href="#实体识别" class="headerlink" title="实体识别"></a>实体识别</h1><h5 id="实体识别–分块类型："><a href="#实体识别–分块类型：" class="headerlink" title="实体识别–分块类型："></a>实体识别–分块类型：</h5><ul><li>名词短语分块；</li><li>标记模式分块；</li><li>正则表达式分块；</li></ul><h5 id="分块的表示方法：标记和树状图；"><a href="#分块的表示方法：标记和树状图；" class="headerlink" title="分块的表示方法：标记和树状图；"></a>分块的表示方法：标记和树状图；</h5><h5 id="分块器评估；"><a href="#分块器评估；" class="headerlink" title="分块器评估；"></a>分块器评估；</h5><h5 id="命名实体识别；"><a href="#命名实体识别；" class="headerlink" title="命名实体识别；"></a>命名实体识别；</h5><ul><li>命名实体定义：指特定类型的个体，是一些确切的名词短语，如组织、人、日期等；</li><li>命名实体识别定义：指通过识别文字中所提及的命名实体，然后确定<code>NE</code>的边界和类型；</li></ul><h5 id="命名实体关系提取；"><a href="#命名实体关系提取；" class="headerlink" title="命名实体关系提取；"></a>命名实体关系提取；</h5><h1 id="文法分析"><a href="#文法分析" class="headerlink" title="文法分析"></a>文法分析</h1><ul><li>文法定义： 即就是文章的书写规则，一般用来指以文字、词语、短句、句子编排而成的完整语句和文章的合理性组织；</li><li>文法用途：<ul><li>1、性能超越n-grams；</li><li>2、确定句子成分结构；</li></ul></li></ul><h5 id="形式语法：一个四元组G-N-∑-P-S-，各个符号代表的意义如下："><a href="#形式语法：一个四元组G-N-∑-P-S-，各个符号代表的意义如下：" class="headerlink" title="形式语法：一个四元组G=(N, ∑, P, S)，各个符号代表的意义如下："></a>形式语法：一个四元组G=(N, ∑, P, S)，各个符号代表的意义如下：</h5><ul><li>N：非终结符的有限集合（有事也称为变量级戒句法种类集）；</li><li>∑：终结符号的有限集合；</li><li>V：总词汇表，N∪∑；</li><li>P：一组重写规则的有限集合，P=｛α→β｝，其中α，β是V种元素所构成的串，α种至少应该含有一个非终结符号；</li><li>S：S∈N，叫做句子的符戒初始符；</li></ul><h5 id="上下文无关文法："><a href="#上下文无关文法：" class="headerlink" title="上下文无关文法："></a>上下文无关文法：</h5><ul><li>解析器：<ul><li>定义：根据文法产生式处理输入的矩阵，同时建立一个或多个符号文法的组成结构；</li><li>分类：<ul><li>递归下降解析器：自上而下模式；</li><li>移近-规约解析器：自下而上模式；</li><li>左角落解析器：自上而下和自下而上两种模式相结合；</li></ul></li><li>递归下降和左角落解析都存在一定的缺陷，因此可以才用动态规划的方法进行解析；</li></ul></li></ul><h5 id="依存关系与依存文法："><a href="#依存关系与依存文法：" class="headerlink" title="依存关系与依存文法："></a>依存关系与依存文法：</h5><ul><li>依存文法：关注词与其他词之间的关系；</li><li>依存关系：中心词与其他从属直接的二元非对称关系；</li></ul><h1 id="当前的一些语法困境"><a href="#当前的一些语法困境" class="headerlink" title="当前的一些语法困境"></a>当前的一些语法困境</h1><ul><li>语言数据与无限可能性；</li><li>句子构造；</li><li>句子歧义问题；</li></ul><h1 id="自然语言理解"><a href="#自然语言理解" class="headerlink" title="自然语言理解"></a>自然语言理解</h1><ul><li>智能问答系统；</li><li>一阶逻辑；</li><li>补充运算；</li><li>句子语义理解；</li><li>段落语义理解；</li></ul><h1 id="图灵测试"><a href="#图灵测试" class="headerlink" title="图灵测试"></a>图灵测试</h1><p>阿兰·图灵与1950年提出，测试在测试者和被测试者相互隔开的情况下，通过一些简单的装置向被测试者随意提问。通过一些问题之后，若被测试者的答复有超过30%的部分无法让测试者确认出是人还是机器的回答，则此时这台机器通过测试，    且被认为具有人工智能；</p><h1 id="命题逻辑"><a href="#命题逻辑" class="headerlink" title="命题逻辑"></a>命题逻辑</h1><h5 id="一阶逻辑"><a href="#一阶逻辑" class="headerlink" title="一阶逻辑"></a>一阶逻辑</h5><ul><li>语法<ul><li>独立变量；</li><li>独立常量；</li><li>带不同参数的谓词；</li><li>非逻辑常量；</li><li>逻辑常量；</li><li>存在量词；</li><li>全称量词；</li></ul></li><li>采取约定：&lt;en，t&gt;是由n个e类型的参数所组成而产生一个类型为t的表达式的谓词的类型，此类情况下，则称n为谓词元数；</li></ul><h1 id="语句的语义"><a href="#语句的语义" class="headerlink" title="语句的语义"></a>语句的语义</h1><ul><li>组合原则：整体含义是部分含义与他们的句法相结合方式的函数；</li></ul><h1 id="语料库结构"><a href="#语料库结构" class="headerlink" title="语料库结构"></a>语料库结构</h1><h5 id="TIMIT的结构"><a href="#TIMIT的结构" class="headerlink" title="TIMIT的结构"></a>TIMIT的结构</h5><ul><li>内容覆盖：方言，说话者，材料；</li></ul><h5 id="TIMIT的设计特点"><a href="#TIMIT的设计特点" class="headerlink" title="TIMIT的设计特点"></a>TIMIT的设计特点</h5><ul><li>包含语音与字形标注层；</li><li>在多个维度的变化与方言地区和二元音覆盖范围中找到一个平衡点；</li><li>将原始语音学时间作为录音来捕捉和标注来捕捉之间的区别；</li><li>层次结构清晰，结构是树状结构，使用时目的性；</li></ul><h5 id="TIMIT的基本数据类型"><a href="#TIMIT的基本数据类型" class="headerlink" title="TIMIT的基本数据类型"></a>TIMIT的基本数据类型</h5><ul><li>词典</li><li>文本</li></ul><h1 id="语料库的生命周期"><a href="#语料库的生命周期" class="headerlink" title="语料库的生命周期"></a>语料库的生命周期</h1><ul><li>创建语料库的方案<ul><li>研究过程中逐步形成；</li><li>实验研究过程中收集；</li><li>特定语音的参考语料；</li></ul></li><li>质量控制<ul><li>Kappa系数：衡量两个人的判断类别，然后修正其期望一致性，越大一致性越好；</li><li>windowdiff打分器：衡量两个句子分词的一致性；</li></ul></li><li>维护与演变</li></ul><h1 id="数据采集"><a href="#数据采集" class="headerlink" title="数据采集"></a>数据采集</h1><h5 id="采集方式"><a href="#采集方式" class="headerlink" title="采集方式"></a>采集方式</h5><ul><li>网上获取；</li><li>文字处理器文件获取；</li><li>电子表格和数据库中获取；</li><li>通过数据格式转换获取；</li><li>使用Toolbox数据；</li></ul><h5 id="标注层"><a href="#标注层" class="headerlink" title="标注层"></a>标注层</h5><ul><li>分词；</li><li>断句；</li><li>分段；</li><li>词性；</li><li>句法结构；</li><li>浅层语义；</li><li>对话与段落；</li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> NLP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> NLP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>自然语言处理NLP(三)</title>
      <link href="/2019/10/02/zi-ran-yu-yan-chu-li-nlp-san/"/>
      <url>/2019/10/02/zi-ran-yu-yan-chu-li-nlp-san/</url>
      
        <content type="html"><![CDATA[<h1 id="样本点中的关键度量指标：距离"><a href="#样本点中的关键度量指标：距离" class="headerlink" title="样本点中的关键度量指标：距离"></a>样本点中的关键度量指标：距离</h1><ul><li>欧氏距离，euclidean–通常意义下的距离；</li></ul><p><img src="http://upload-images.jianshu.io/upload_images/9747350-12dd6ddeb6bed2f5?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><ul><li>马氏距离，manhattan–考虑到变量间的相关性，且与变量单位无关；</li></ul><p><img src="http://upload-images.jianshu.io/upload_images/9747350-54220f1a482a905c?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><ul><li>余弦距离，cosine–衡量变量相似性；</li></ul><p><img src="http://upload-images.jianshu.io/upload_images/9747350-9df8d007023cbdad?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><h1 id="TF-IDF矩阵"><a href="#TF-IDF矩阵" class="headerlink" title="TF-IDF矩阵"></a>TF-IDF矩阵</h1><ul><li>一种用于资讯检索和勘察的一种加权技术，是一种统计方法，用于评估词语或字对文件集与语料库中的重要程度；</li><li>TF-IDF:TF(词频)和IDF(倒文档频率)的乘积，其中TF表示某个关键词出现的频率，IDF为所有文档数目除以包含该词语的文档数目的对数值，|D|表示所有文档的数目，|wεd|表示包含词语w的文档数目；</li></ul><p><img src="http://upload-images.jianshu.io/upload_images/9747350-7299abcd667132e2?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><p><img src="http://upload-images.jianshu.io/upload_images/9747350-807395a40d3acc40?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><h1 id="聚类算法"><a href="#聚类算法" class="headerlink" title="聚类算法"></a>聚类算法</h1><h4 id="层次聚类"><a href="#层次聚类" class="headerlink" title="层次聚类"></a>层次聚类</h4><ul><li>对给定的对象集合进行层次分解，分为凝聚（自下而上）和分裂（自上而下）；</li></ul><p>1、开始时每个样本各自作为一类；<br>2、规定某种度量作为样本间距及类与类之间的距离，并计算；<br>3、将距离最短的两个类聚为一个新类；<br>4、重复2-3，不断聚集最近的两个类，每次减少一个类，直到所有样本被聚为一类；</p><h4 id="动态聚类：k-means"><a href="#动态聚类：k-means" class="headerlink" title="动态聚类：k-means"></a>动态聚类：k-means</h4><p>1、选择K个点作为初始质心；<br>2、将每个点指派到最近的质心，形成K个簇(聚类)<br>3、重新计算每个簇的质心；<br>4、重复2-3直至质心基本不变，此时算法达到稳定状态；<br>需要多次运行，然后比较各次运行结果，然后选取最优解，K值使用肘部法则进行确定；</p><h4 id="K-means算法的优缺点"><a href="#K-means算法的优缺点" class="headerlink" title="K-means算法的优缺点"></a>K-means算法的优缺点</h4><ul><li>效率高，且不易受初始值选择的影响；</li><li>不能处理非球形的簇；</li><li>不能处理不同尺寸、密度的簇；</li><li>要先剔除离群值，因为它可能存在较大干扰；</li></ul><h4 id="基于密度的方法：DBSCAN"><a href="#基于密度的方法：DBSCAN" class="headerlink" title="基于密度的方法：DBSCAN"></a>基于密度的方法：DBSCAN</h4><ul><li>算法将具有足够高密度的区域划分为簇，并可以发现任何形状的聚类；</li><li>r-邻域：给定点半径r内的区域；</li><li>核心点：若一个点的r-邻域至少包含最少数目M个点，则称该点为核心点；</li><li>直接密度可达：若p点在核心点q的r-邻域内，则p是从q出发可以直接密度可达；</li><li>若存在点链P1,P2,…,Pn,P1=q,Pn=P,Pi+1是从Pi关于r和M直接密度可达，则称点P是从q关于r和M密度可达的；</li><li>若样本集D中存在点o，使得p，q是从o关于r和M密度可达的，那么点p、q是关于r和M密度相连的；</li><li>算法基本思想：<br>1、指定合适的r和M；<br>2、计算所有样本点，若点p的r邻域中有超过M个点，则创建一个以p为核心点的新簇；<br>3、反复查找这些核心点直接密度可达(之后为密度可达)的点，将其加入到相应的簇，对于核心点发生“密度相连”状况的簇，进行合并；<br>4、当无新的点可以被添加到任何簇时，算法完成；</li></ul><h1 id="类相互之间的距离的计算方法"><a href="#类相互之间的距离的计算方法" class="headerlink" title="类相互之间的距离的计算方法"></a>类相互之间的距离的计算方法</h1><ul><li><p>离差平方和法–ward<br>计算两个类别之间的离差平方和，找出最小的离差平方和，然后将这两个类别聚为一类；</p></li><li><p>类平均法–average<br>通过计算两个类别之间的所有点的相互距离，求其均值，然后作为这两个类之间距离均值，找出最小的距离均值，然后将这两个类聚为一类；</p></li><li><p>最大距离法–complete<br>让两个类之间相距最远的点作为两个类之间的距离，然后找出最大距离中最小的两个类，将他们聚为一类；</p></li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> NLP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> NLP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>自然语言处理NLP(二)</title>
      <link href="/2019/10/02/zi-ran-yu-yan-chu-li-nlp-er/"/>
      <url>/2019/10/02/zi-ran-yu-yan-chu-li-nlp-er/</url>
      
        <content type="html"><![CDATA[<h2 id="词性标注"><a href="#词性标注" class="headerlink" title="词性标注"></a>词性标注</h2><ul><li>标注语料库；<ul><li>各词性标注及其含义</li></ul></li></ul><p><img src="http://upload-images.jianshu.io/upload_images/9747350-f002588466bd4e84?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><p><img src="http://upload-images.jianshu.io/upload_images/9747350-71719bc78d6e6a0e?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><ul><li>自动标注器；<ul><li>默认标注器；</li><li>正则表达式标注器；</li><li>查询标注器；</li></ul></li><li>N-gram标注器；<ul><li>一元标注器；</li><li>分离训练和测试数据；</li><li>一般的N-gram的标注；</li><li>组合标注器；</li><li>标注生词；</li><li>储存标注器；</li><li>性能限制；</li><li>跨句子边界标注；</li></ul></li><li>隐马尔科夫标注器；<ul><li>生成模式；<ul><li>确定模式；</li><li>非确定模式；</li></ul></li><li>隐藏模式；</li></ul></li></ul><h2 id="隐马尔科夫模型HMM"><a href="#隐马尔科夫模型HMM" class="headerlink" title="隐马尔科夫模型HMM"></a>隐马尔科夫模型HMM</h2><ul><li>是一种统计模型，用于描述一个含有隐含未知参数的马尔科夫过程，难点在于从可观察的参数中确定此过程的隐含参数，然后利用这些参数进行下一步的分析，可当做一种转移矩阵；</li><li>一个隐马尔科夫模型是一个三元组(pi, A, B);</li></ul><p><img src="http://upload-images.jianshu.io/upload_images/9747350-5aa375e20c70a8b0?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><ul><li>隐马尔科夫模型的三大基本问题与解决方案包括：<ul><li>对于一个观察序列匹配最可能的系统一一评估，使用前向算法(forward algorithm)解决；</li><li>对于已生成的一个观察序列，确定最可能的隐藏状态序列一一解码，使用维特比算法(Viterbi algorithm)解决；</li><li>对于已生成的观察序列，决定最可能的模型参数一一学习，使用前向-后向算法(forward backward algorithm)解决；</li></ul></li></ul><h2 id="文本分类"><a href="#文本分类" class="headerlink" title="文本分类"></a>文本分类</h2><h4 id="分类的使用"><a href="#分类的使用" class="headerlink" title="分类的使用"></a>分类的使用</h4><ul><li>根据名字判别性别；</li><li>文本分类；</li><li>词性分类；</li><li>句子分割；</li><li>识别对话行为；</li></ul><h4 id="分类算法"><a href="#分类算法" class="headerlink" title="分类算法"></a>分类算法</h4><ul><li>朴素贝叶斯分类器；</li><li>决策树</li><li><h4 id="建立分类器的步骤："><a href="#建立分类器的步骤：" class="headerlink" title="建立分类器的步骤："></a>建立分类器的步骤：</h4></li><li>确定输入特征—特征提取器；</li><li>划分数据集；</li><li>使用训练集构建分类器；</li><li>使用测试集测试分类器效果；</li></ul><h4 id="分类的类别"><a href="#分类的类别" class="headerlink" title="分类的类别"></a>分类的类别</h4><ul><li>文档分类<ul><li>特征提取器：关键字是否在文档中；</li><li>分类器训练；</li></ul></li><li>词性判断<ul><li>特征提取器：词后缀</li><li>分类器训练：决策树分类器</li><li>基于上下文的词性判断；</li></ul></li><li>序列分类<ul><li>贪婪序列分类；</li><li>隐马尔科夫模型；</li></ul></li><li>句子分割：标点符号的分类任务</li><li>识别对话行为类型；</li></ul><h2 id="评估"><a href="#评估" class="headerlink" title="评估"></a>评估</h2><ul><li>训练集与测试集的划分</li><li>准确度<ul><li>正确分类数目/待分类数目</li></ul></li><li>精确度(precision)<ul><li>TP/(TP+FP)</li></ul></li><li>召回率(recall)<ul><li>TP/(TP+FN)</li></ul></li><li>F-度量值(F-score)<ul><li>(2*Precison*Recall)/(Precison + Recall)</li></ul></li></ul><h2 id="文本聚类"><a href="#文本聚类" class="headerlink" title="文本聚类"></a>文本聚类</h2><ul><li>特征选择(feature selection)</li><li>近邻测度(proximity measure)</li><li>聚类准则(clustering criterion)</li><li>聚类算法(clustering algorithm)</li><li>结果验证(valida of the results))</li><li>结果解释(interpretation of the results)</li></ul><h2 id="聚类与分类的区别"><a href="#聚类与分类的区别" class="headerlink" title="聚类与分类的区别"></a>聚类与分类的区别</h2><ul><li>聚类：通过把相似对象通过静态分类方法分成不同组别或子集的过程；</li><li>聚类分析的是研究事先在没有训练的条件下如何把样本划分为若干类的问题；</li><li>而在分类中，对于目标数据库中存在哪些类是事先知道的，需要做的是将每一条记录分别属于的类别标记出来；</li><li>聚类需要解决的问题是将给定的若干无标记的模式聚集起来让它们成为有意义的聚类，聚类是在预先不知道目标数据库到底有多少泪的情况下，希望将所有记录组成不同的类或聚类，并在这种分类情况下，以某种度量为标准的相似度，在同一聚类之间最小化，而在不同聚类之间最大化；</li><li>与分类不同，无监督学习不依赖预先定义的类或带类标记的训练实例，需要由聚类学习算法自动确定标记，而分类学习的实例或数据样本有类别标记；</li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> NLP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> NLP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>自然语言处理NLP(一)</title>
      <link href="/2019/10/02/zi-ran-yu-yan-chu-li-nlp-yi/"/>
      <url>/2019/10/02/zi-ran-yu-yan-chu-li-nlp-yi/</url>
      
        <content type="html"><![CDATA[<h2 id="NLP"><a href="#NLP" class="headerlink" title="NLP"></a>NLP</h2><ul><li><p>自然语言：指一种随着社会发展而自然演化的语言，即人们日常交流所使用的语言；</p></li><li><p>自然语言处理：通过技术手段，使用计算机对自然语言进行各种操作的一个学科；</p></li></ul><h2 id="NLP研究的内容"><a href="#NLP研究的内容" class="headerlink" title="NLP研究的内容"></a>NLP研究的内容</h2><ul><li>词意消歧；</li><li>指代理解；</li><li>自动生成语言；</li><li>机器翻译；</li><li>人机对话系统；</li><li>文本含义识别；</li></ul><h2 id="NLP处理"><a href="#NLP处理" class="headerlink" title="NLP处理"></a>NLP处理</h2><ul><li>语料读入<ul><li>网络</li><li>本地</li></ul></li><li>分词</li></ul><p><img src="http://upload-images.jianshu.io/upload_images/9747350-c0a0373cbdb8be12?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/env python</span><span class="token comment" spellcheck="true"># -*- coding: utf-8 -*-</span><span class="token comment" spellcheck="true"># @Time    : 2018-9-28 22:21</span><span class="token comment" spellcheck="true"># @Author  : Manu</span><span class="token comment" spellcheck="true"># @Site    : </span><span class="token comment" spellcheck="true"># @File    : python_base.py</span><span class="token comment" spellcheck="true"># @Software: PyCharm</span><span class="token keyword">import</span> urllib<span class="token keyword">from</span> nltk <span class="token keyword">import</span> word_tokenize<span class="token keyword">from</span> bs4 <span class="token keyword">import</span> BeautifulSoup<span class="token comment" spellcheck="true"># 在线文档下载</span>url <span class="token operator">=</span> <span class="token string">'http://www.gutenberg.org/files/2554/2554-0.txt'</span>res <span class="token operator">=</span> urllib<span class="token punctuation">.</span>request<span class="token punctuation">.</span>urlopen<span class="token punctuation">(</span>url<span class="token punctuation">)</span>raw <span class="token operator">=</span> res<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'utf8'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'length'</span><span class="token punctuation">,</span> len<span class="token punctuation">(</span>raw<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'type'</span><span class="token punctuation">,</span> type<span class="token punctuation">(</span>raw<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>raw<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 分词</span>tokens <span class="token operator">=</span> word_tokenize<span class="token punctuation">(</span>raw<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>tokens<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">50</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'length:'</span> <span class="token operator">+</span> str<span class="token punctuation">(</span>len<span class="token punctuation">(</span>tokens<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'type:'</span><span class="token punctuation">,</span> type<span class="token punctuation">(</span>tokens<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 创建文本</span>text <span class="token operator">=</span> nltk<span class="token punctuation">.</span>Text<span class="token punctuation">(</span>tokens<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'type'</span><span class="token punctuation">,</span> type<span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'length'</span><span class="token punctuation">,</span> len<span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>基于此单位的文本分析<ul><li>正则表达式</li></ul></li></ul><p><img src="http://upload-images.jianshu.io/upload_images/9747350-316dcc17540bb89f?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><ul><li>分割<ul><li>断句</li><li>分词</li></ul></li><li>规范化输出</li></ul><h2 id="中文分词及相应算法"><a href="#中文分词及相应算法" class="headerlink" title="中文分词及相应算法"></a>中文分词及相应算法</h2><ul><li>基于字典、词库匹配；<ul><li>正向最大匹配；</li><li>逆向最大匹配；</li><li>双向最大匹配；</li><li>设立切分表执法；</li><li>最佳匹配；</li></ul></li><li>基于词频度统计；<ul><li>N-gram模型；</li><li>隐马尔科夫模型；</li><li>基于字标注的中文分词方法；</li></ul></li><li>基于知识理解；</li></ul><h2 id="分词方法比较"><a href="#分词方法比较" class="headerlink" title="分词方法比较"></a>分词方法比较</h2><p><img src="http://upload-images.jianshu.io/upload_images/9747350-039dc7448d713b0e?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><h2 id="结巴分词"><a href="#结巴分词" class="headerlink" title="结巴分词"></a>结巴分词</h2><ul><li>安装<br>在控制台使用<code>pip install jieba</code>即可安装；</li></ul><p><img src="http://upload-images.jianshu.io/upload_images/9747350-1b72e98a07253d32?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><ul><li>功能<ul><li>分词；<ul><li><code>jieba.cut</code>、<code>jieba.cut_for_search</code>；</li></ul></li><li>添加自定义词典；<ul><li><code>jieba.load_userdict(file_name)</code>、<code>add_word(word, freq=None, tag=None)</code>、<code>jieba.del_word(word)</code>、<code>jieba.suggest_freq(segmen, tune=True)</code>；</li></ul></li><li>关键词提取；<ul><li><code>jieba.analyse.extract_tags(sentence, topK=20, withWeight=False, allowPOS=())</code>；</li><li><code>jieba.analyse.set_idf_path(file_name)</code>；</li><li><code>jieba.analuse.set_stop_words(file_name)</code>；</li></ul></li><li>词性标注；<ul><li><code>jieba.tokenize()</code>；</li><li><code>jieba.posseg.cut()</code>；</li></ul></li><li>并行分词；</li><li>词汇搜索；</li></ul></li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> NLP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> NLP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>NLP基础之分词、向量化、词性标注</title>
      <link href="/2019/10/02/nlp-ji-chu-zhi-fen-ci-xiang-liang-hua-ci-xing-biao-zhu/"/>
      <url>/2019/10/02/nlp-ji-chu-zhi-fen-ci-xiang-liang-hua-ci-xing-biao-zhu/</url>
      
        <content type="html"><![CDATA[<h1 id="分词"><a href="#分词" class="headerlink" title="分词"></a>分词</h1><h3 id="基于HMM（隐马尔可夫模型）的分词方法"><a href="#基于HMM（隐马尔可夫模型）的分词方法" class="headerlink" title="基于HMM（隐马尔可夫模型）的分词方法"></a>基于HMM（隐马尔可夫模型）的分词方法</h3><ul><li>状态值序列<br>B：Begin；<br>M：Middle；<br>E：End；<br>S：Single；</li><li>观察值序列<br>待切分的词；</li><li>初始化概率<br>BMES这四种状态在第一个字的概率分布情况；</li><li>状态转移矩阵<br>HMM中，假设当前状态只与上一状态相关，则此关系可用转移矩阵表示；</li><li>条件概率矩阵<br>HMM中，观察值只取决与当前状态值（假设条件），条件概率矩阵主要建模在BMES下各个词的不同概率，和初始化概率、状态转移矩阵一样，需要在语料中计算得到对应的数据；</li></ul><h3 id="概率分词模型：CRF（条件随机场）"><a href="#概率分词模型：CRF（条件随机场）" class="headerlink" title="概率分词模型：CRF（条件随机场）"></a>概率分词模型：CRF（条件随机场）</h3><p>HMM描述的是已知量和未知量的一个联合概率分布，属于generative model，而CRF则是建模条件概率，属于discriminative model；且CRF特征更加丰富，可通过自定义特征函数来增加特征信息，CRF能建模的信息应该包括HMM的状态转移、数据初始化的特征；主要包括两部分特征：</p><ul><li>简单特征<br>只涉及当前状态特征；</li><li>转移特征<br>涉及两种状态间的特征；、</li></ul><h3 id="基于深度学习的分词"><a href="#基于深度学习的分词" class="headerlink" title="基于深度学习的分词"></a>基于深度学习的分词</h3><p><img src="http://upload-images.jianshu.io/upload_images/9747350-3964f47d7d9c5167?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><p>基本步骤：</p><ul><li>首先，训练字向量，使用word2vec对语料的字训练50维的向量；</li><li>然后，接入一个bi-LSTM，用于建模整个句子本身的语义信息；</li><li>最后，接入一个CFR完成序列标注；</li></ul><h1 id="词向量"><a href="#词向量" class="headerlink" title="词向量"></a>词向量</h1><h3 id="one-hot编码"><a href="#one-hot编码" class="headerlink" title="one-hot编码"></a>one-hot编码</h3><p>每个词只在对应的index置1，其他位置均为0，难点在于做相似度计算；</p><h3 id="LSA（矩阵分解方法）"><a href="#LSA（矩阵分解方法）" class="headerlink" title="LSA（矩阵分解方法）"></a>LSA（矩阵分解方法）</h3><p> LSA使用词-文档矩阵，矩阵常为系数矩阵，行代表词语，列代表文档；词-文档矩阵表示中的值表示词在文章中出现的次数；难点在于当语料库过大时，计算很耗费资源，且对未登录词或新文档不友好；</p><h3 id="Word2Vec"><a href="#Word2Vec" class="headerlink" title="Word2Vec"></a>Word2Vec</h3><p><img src="http://upload-images.jianshu.io/upload_images/9747350-872b8ff8a61eca4d?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><h4 id="结构"><a href="#结构" class="headerlink" title="结构"></a>结构</h4><p>包括CBOW和Skip-gram模型；CBOW的输入为上下文的表示，然后对目标词进行预测；Skip-gram每次从目标词w的上下文c中选择一个词，将其词向量作为模型输入；<br>Skip-gram主要结构：</p><ul><li>输入one-hot编码；</li><li>隐藏层大小为次维度大小；</li><li>对常见词或词组，常将其作为当个word处理；</li><li>对高频词进行抽样减少训练样本数目；</li><li>对优化目标采用negative sampling，每个样本训练时只更新部分网络权重；</li></ul><h1 id="词性标注"><a href="#词性标注" class="headerlink" title="词性标注"></a>词性标注</h1><ul><li>基于最大熵的词性标注；</li><li>基于统计最大概率输出词性；</li><li>基于HMM词性标注；</li><li>基于CRF的词性标注；</li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> NLP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> NLP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>NLP之NLTK相关知识</title>
      <link href="/2019/10/02/nlp-zhi-nltk-xiang-guan-zhi-shi/"/>
      <url>/2019/10/02/nlp-zhi-nltk-xiang-guan-zhi-shi/</url>
      
        <content type="html"><![CDATA[<h2 id="什么是NLTK"><a href="#什么是NLTK" class="headerlink" title="什么是NLTK"></a>什么是NLTK</h2><p><code>NLTK</code>，全称<code>Natural Language Toolkit</code>，自然语言处理工具包，是NLP研究领域常用的一个<code>Python</code>库，由宾夕法尼亚大学的<code>Steven Bird</code>和<code>Edward Loper</code>在<code>Python</code>的基础上开发的一个模块，至今已有超过十万行的代码。这是一个开源项目，包含数据集、<code>Python</code>模块、教程等；</p><h2 id="怎样安装"><a href="#怎样安装" class="headerlink" title="怎样安装"></a>怎样安装</h2><p>详情可以参见我的另一篇博客<a href="https://blog.csdn.net/github_39655029/article/details/80994706" target="_blank" rel="noopener">NLP的开发环境搭建</a>，通过这篇博客，你将学会<code>Python</code>环境的安装以及<code>NLTK</code>模块的下载；</p><h2 id="常见模块及用途"><a href="#常见模块及用途" class="headerlink" title="常见模块及用途"></a>常见模块及用途</h2><p><img src="http://upload-images.jianshu.io/upload_images/9747350-6685cb12076327ff?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><h2 id="NLTK能干啥？"><a href="#NLTK能干啥？" class="headerlink" title="NLTK能干啥？"></a>NLTK能干啥？</h2><ul><li><input disabled="" type="checkbox"> 搜索文本<ul><li>单词搜索：</li><li>相似词搜索；</li><li>相似关键词识别；</li><li>词汇分布图；</li><li>生成文本；</li></ul></li><li><input disabled="" type="checkbox"> 计数词汇</li></ul><p><img src="http://upload-images.jianshu.io/upload_images/9747350-efef82de90c24c15?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><p><img src="http://upload-images.jianshu.io/upload_images/9747350-156c6404c5240a08?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/env python</span><span class="token comment" spellcheck="true"># -*- coding: utf-8 -*-</span><span class="token comment" spellcheck="true"># @Time    : 2018-9-28 22:21</span><span class="token comment" spellcheck="true"># @Author  : Manu</span><span class="token comment" spellcheck="true"># @Site    : </span><span class="token comment" spellcheck="true"># @File    : python_base.py</span><span class="token comment" spellcheck="true"># @Software: PyCharm</span><span class="token keyword">from</span> __future__ <span class="token keyword">import</span> division<span class="token keyword">import</span> nltk<span class="token keyword">import</span> matplotlib<span class="token keyword">from</span> nltk<span class="token punctuation">.</span>book <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">from</span> nltk<span class="token punctuation">.</span>util <span class="token keyword">import</span> bigrams<span class="token comment" spellcheck="true"># 单词搜索</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'单词搜索'</span><span class="token punctuation">)</span>text1<span class="token punctuation">.</span>concordance<span class="token punctuation">(</span><span class="token string">'boy'</span><span class="token punctuation">)</span>text2<span class="token punctuation">.</span>concordance<span class="token punctuation">(</span><span class="token string">'friends'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 相似词搜索</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'相似词搜索'</span><span class="token punctuation">)</span>text3<span class="token punctuation">.</span>similar<span class="token punctuation">(</span><span class="token string">'time'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#共同上下文搜索</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'共同上下文搜索'</span><span class="token punctuation">)</span>text2<span class="token punctuation">.</span>common_contexts<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'monstrous'</span><span class="token punctuation">,</span><span class="token string">'very'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 词汇分布表</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'词汇分布表'</span><span class="token punctuation">)</span>text4<span class="token punctuation">.</span>dispersion_plot<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'citizens'</span><span class="token punctuation">,</span> <span class="token string">'American'</span><span class="token punctuation">,</span> <span class="token string">'freedom'</span><span class="token punctuation">,</span> <span class="token string">'duties'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 词汇计数</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'词汇计数'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>len<span class="token punctuation">(</span>text5<span class="token punctuation">)</span><span class="token punctuation">)</span>sorted<span class="token punctuation">(</span>set<span class="token punctuation">(</span>text5<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>len<span class="token punctuation">(</span>set<span class="token punctuation">(</span>text5<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 重复词密度</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'重复词密度'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>len<span class="token punctuation">(</span>text8<span class="token punctuation">)</span> <span class="token operator">/</span> len<span class="token punctuation">(</span>set<span class="token punctuation">(</span>text8<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 关键词密度</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'关键词密度'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>text9<span class="token punctuation">.</span>count<span class="token punctuation">(</span><span class="token string">'girl'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>text9<span class="token punctuation">.</span>count<span class="token punctuation">(</span><span class="token string">'girl'</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">100</span> <span class="token operator">/</span> len<span class="token punctuation">(</span>text9<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 频率分布</span>fdist <span class="token operator">=</span> FreqDist<span class="token punctuation">(</span>text1<span class="token punctuation">)</span>vocabulary <span class="token operator">=</span> fdist<span class="token punctuation">.</span>keys<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> vocabulary<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 高频前20</span>fdist<span class="token punctuation">.</span>plot<span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">,</span> cumulative <span class="token operator">=</span> <span class="token boolean">True</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 低频词</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'低频词：'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>fdist<span class="token punctuation">.</span>hapaxes<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 词语搭配</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'词语搭配'</span><span class="token punctuation">)</span>words <span class="token operator">=</span> list<span class="token punctuation">(</span>bigrams<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'louder'</span><span class="token punctuation">,</span> <span class="token string">'words'</span><span class="token punctuation">,</span> <span class="token string">'speak'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>words<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="NLTK设计目标"><a href="#NLTK设计目标" class="headerlink" title="NLTK设计目标"></a>NLTK设计目标</h2><ul><li>简易性；</li><li>一致性；</li><li>可扩展性；</li><li>模块化；</li></ul><h2 id="NLTK中的语料库"><a href="#NLTK中的语料库" class="headerlink" title="NLTK中的语料库"></a>NLTK中的语料库</h2><ul><li>古腾堡语料库：<code>gutenberg</code>；</li><li>网络聊天语料库：<code>webtext</code>、<code>nps_chat</code>；</li><li>布朗语料库：<code>brown</code>；</li><li>路透社语料库：<code>reuters</code>；</li><li>就职演说语料库：<code>inaugural</code>；</li><li>其他语料库；</li></ul><h2 id="文本语料库结构"><a href="#文本语料库结构" class="headerlink" title="文本语料库结构"></a>文本语料库结构</h2><ul><li>isolated： 独立型；</li><li>categorized：分类型；</li><li>overlapping：重叠型；</li><li>temporal：暂时型；</li></ul><h2 id="基本语料库函数"><a href="#基本语料库函数" class="headerlink" title="基本语料库函数"></a>基本语料库函数</h2><p><img src="http://upload-images.jianshu.io/upload_images/9747350-f9a3620856f96848?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><h2 id="条件频率分布"><a href="#条件频率分布" class="headerlink" title="条件频率分布"></a>条件频率分布</h2><p><img src="http://upload-images.jianshu.io/upload_images/9747350-b434d98ae45a8dcd?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>以上就是自然语言处理<code>NLP</code>中<code>NLTK</code>模块的相关知识介绍了，希望通过本文能解决你对<code>NLTK</code>的相关疑惑，欢迎评论互相交流！！！</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> NLP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> NLP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript笔记</title>
      <link href="/2019/10/02/javascript-bi-ji/"/>
      <url>/2019/10/02/javascript-bi-ji/</url>
      
        <content type="html"><![CDATA[<h1 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h1><ol><li>严格区分大小写；</li><li>数据类型：<ul><li><code>Number</code>：不区分整数与浮点数；</li><li>字符串：</li><li>布尔值：</li></ul></li><li>相等运算符：<ul><li><code>==</code>：会自动转换数据类型再比较；</li><li><code>===</code>：不会自动转换数据类型，数据类型不一致则返回false；</li><li><code>NaN</code>，表示<code>Not a Number</code>与所有其他值都不相等，包括自己；</li></ul></li><li><code>null</code>：表示一个空的值，与0和空字符串<code>''</code>不同，0是一个数值，<code>''</code>表示长度为0的字符串，而<code>null</code>表示”空”；</li><li><code>undefined</code>：表示”未定义”；</li><li>数组定义方式, 索引起始值为0：<ul><li><code>new Array(1, 2, 3)</code>;</li><li>直接使用<code>[]</code>, <code>[1, 2, 4]</code>;</li></ul></li><li>对象都是一组由<strong><em>键-值</em></strong>组成的无序集合，键都是字符串类型，如果键中含特殊字符，就必须用<strong>‘’</strong>括起来，访问时用<code>['xxx']</code>方式，值可以是任意数据类型，获取对象属性方式：<strong>对象变量.属性名</strong>；</li><li>多行字符串：用反引号`…`表示；</li><li>模版字符串：自动替换字符串中变量，<code>message = 'hello， ${name}, your age is ${age}'</code>；</li><li>字符串是不可变的，对字符串的某个索引赋值既不会引起错误，也不会改变字符串；</li><li>直接给<code>Array</code>的<code>length</code>赋新值会导致<code>Array</code>大小的变化，可以通过索引改变对应元素的值，索引超过范围时同样引起<code>Array</code>大小的变化；</li><li><code>push()</code>向Array末尾添加若干元素，<code>pop()</code>把最后一个元素删除；</li><li><code>unshift()</code>向<code>Array</code>头部添加若干元素，<code>shift()</code>删除第一个元素；</li><li><code>splice()</code>：从指定索引开始删除若干元素，然后再从该位置添加若干元素；</li><li><code>concat()</code>：将两个Array连接起来，返回一个新的<code>Array</code>，<code>join()</code>将<code>Array</code>的每个元素都用指定字符串连接起来，再返回连接后的字符串；</li><li>判断一个属性是否为对象自身所有，而不是继承得到，可用<code>hasOwnProperty()</code>方法;</li><li><code>JS</code>中把<code>null</code>、<code>undefined</code>、<code>0</code>、<code>NaN</code>和空字符串’’视为<code>false</code>，其他都视为<code>true</code>；</li><li><code>Set</code>是一组<code>key</code>的集合，不存储<code>value</code>，由于<code>key</code>不能重复，所以<code>Set</code>中没有重复的<code>key</code>，常用方法：<code>add</code>、<code>delete</code>；</li><li><code>Map</code>是一组键值对的结构，具有极快的查找速度，初始化时需要一个二维数组，或者直接初始化一个空<code>Map</code>，常用方法：<code>set</code>、<code>has</code>、<code>delete</code>、<code>get</code>；</li><li>遍历<code>Array</code>可用下标循环，遍历<code>Map</code>和<code>Set</code>则无法使用下标，引入<code>inerable</code>类型(<code>Array</code>、<code>Map</code>、<code>Set</code>都属于)通过<code>for...of</code>循环来遍历；</li><li><code>for...in</code>遍历的是对象的属性名称，<code>for...of</code>循环的是集合本身的元素，更好的方式是使用内置的<code>forEach</code>方法，接受一个函数，每次迭代自动回调函数；</li><li><code>let</code>代替<code>var</code>可以申明一个块级作用域的变量；</li><li>对数组元素进行解析赋值时，多个变量要用<code>[...]</code>括起来，eg：<code>let [x, [y, z]] = ['k', ['cunyu', 'chuzihang']]</code>；</li><li>指定函数的this指向哪个对象可用函数本身的<code>apply</code>方法，接受两个参数，第一个是需要绑定的this变量，第二个是<code>Array</code>，表示参数本身的参数；</li><li><code>apply()</code>把参数打包成<code>Array</code>再传入，<code>call()</code>把参数顺序传入；</li><li><code>filter</code>用于把<code>Array</code>的某些元素过滤调，然后返回剩下的元素；</li><li>自带<code>sort</code>函数是按照<code>ASCII</code>的大小比较的；</li><li>返回闭包时，返回函数不要引用任何循环变量或者后续会发生变化的变量；</li><li>箭头函数，相当于匿名函数，含多个参数时，要用<code>（）</code>括起来；</li></ol><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 编程语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>牛客网-Linux刷题知识点总结</title>
      <link href="/2019/10/02/niu-ke-wang-linux-shua-ti-zhi-shi-dian-zong-jie/"/>
      <url>/2019/10/02/niu-ke-wang-linux-shua-ti-zhi-shi-dian-zong-jie/</url>
      
        <content type="html"><![CDATA[<ul><li>Linux crontab中<code>* * * * */usr/local/run.sh</code>中的5个<code>*</code>号代表<code>分钟 小时 日 月 星期</code>；</li></ul><p><img src="https://upload-images.jianshu.io/upload_images/9747350-e64da5d7e10632e4?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="crond用于执行周期性人物进程"></p><ul><li><strong>hosts文件</strong>是一个存储计算机网络中各节点信息的计算机文件，这个文件负责将主机名称映射到相应的IP地址，hosts文件通常用于补充或替换网络中DNS的功能，和DNS不同的是计算机中用户可以直接对hosts文件进行控制；</li><li><strong>MMU</strong>是<strong>Memory Manage Unit</strong>的缩写，即是存储管理单元，其功能是和物理内存之间进行地址转换 在CPU和物理内存之间进行地址转换，将地址从逻辑空间映映射到物理地址空间；</li><li>UFS在Linux2.6.*下默认不支持，需要重新编译内核获得支持；</li><li>Linux中，当所需访问虚拟内存未被装载时，会发生<code>page fault</code>；</li><li>硬链接和软链接<ul><li>硬链接<br>只能引用同一文件系统中的文件，引用的是文件在文件系统中的物理索引（也称inode）。当移动或删除原始文件时，硬链接被破坏，因为它引用的是文件的物理数据而不是文件在文件结构中的位置。硬链接的文件不需要用户有访问原始文件的权限，也不会显示原始文件所在目录，有助于文件安全性。若删除的文件有相应硬链接，则文件依然会保留，知道所有对它的引用都被删除；</li><li>软链接<br>其实就是新建立一个文件，这个文件就是专门用来执行别的文件的（相当一Windows中的快捷方式）。所产生的是一个新的文件，但这个文件的作用就是专门指向某个文件的，删除这个软链接文件，就相当于不需要这个链接，和原来存在的实体原文件没有任何关系，但删除原来的文件，则相应的软链接不可用；</li><li>两者区别<br>硬链接不会建立inode，只是在文件原来的inode link count域再增加1，因此硬链接是不可跨文件系统的；而软链接会重建一个inode，其结构与其他的不一样，只是一个指明源文件的字符串信息。源文件一旦删除，软链接将毫无意义；软链接可以跨文件系统，硬链接不可以；软链接可以对一个不存在的文件名进行链接，硬链接不可以；软链接可以对目录进行连接，硬链接不可以；<code>ln</code>默认创建的是硬链接，使用<code>-s</code>可以创建软链接；</li></ul></li><li>swapon：启动交换文件的指令；mkswap：设置交换区，将磁盘分区或文件设为Linux的交换区；swapoff：关闭系统交换分区；</li><li>dchp.conf中用于向某个客户主机分配固定IP地址的参数时<code>fixed-address</code>；</li><li>vsftpd服务流量控制的参数：<ul><li><code>anon_max_rate=0</code>：设置匿名登入者使用的最大传输速度，单位为B/s，0表示不限制速度，默认值为0；</li><li><code>local_max_rate=0</code>：本地用户使用的最大传输速度，单位为B/s，0表示不限制速度，预设值为0；</li></ul></li><li>进程相关操作命令：<ul><li><code>ps</code>：列出系统中当前运行的那些进程；</li><li><code>pg</code>：提供一次性的查看进程结果，所提供的查看结果不是动态连续的；</li><li><code>jobs</code>：查看后台进程作业；</li></ul></li><li>文件I/O中，要从一个文件读取数据，应用程序先要调用操作系统函数并传送文件名，并选一个到该文件的路径来打开文件。该函数取回一个顺序号，即文件句柄（file handle），该文件句柄对打开的文件是唯一的识别依据；</li><li>Unix系统中，以下都可用于进程通信：<ul><li>Socket；</li><li>共享内存；</li><li>命名管道；</li><li>消息队列；</li><li>信号量；</li></ul></li><li>用于合并代码的git命令：<ul><li><code>git pull --rebase</code>；</li><li><code>git cherry-pick</code>；</li><li><code>git merge</code>；</li></ul></li><li>DVM指dalivk的虚拟机，每个Android应用程序都在它自己的进程中运行，都拥有一个独立的Dalivk虚拟机实例，而每个DVM都是在Linux中的一种进程，所以可以认为是同一个概念；</li><li>Linux中用户磁盘配额配置文件<code>aquota.user</code>的默认访问权限是：<code>600</code>；</li><li>函数库调用时语言或应用程序的一部分，而系统调用是操作系统的一部分（C.pwrite属于系统调用）；</li><li>Unix系统中，目录结构采用带链接树形目录结构，又称为非循环图目录结构，指访问一个文件（或目录）可以有多条路径；</li><li>命令行操作符：<ul><li><code>&gt;</code> ：输出重定向到一个文件或设备，覆盖原有文件；</li><li><code>&gt;&gt;</code>：输出重定向到一个文件或设备，追加原有文件；</li><li><code>&gt;!</code>：输出重定向到一个文件或设备，强制覆盖原有文件；</li><li><code>&lt;</code>：输出重定向到一个程序；</li></ul></li><li>文件描述符：<ul><li>0：标准输入，stdin；</li><li>1：标准输出，stdout；</li><li>2：标准报错输出，stderr；</li></ul></li><li>查看计算机CPU、SWAP分区信息、硬盘信息等内容；<ul><li><code>cat /proc/cpuinfo</code>：查看一台Linux机器的CPU信息；</li><li><code>du</code>：查看该目录占用文件系统数据块的情况；</li><li><code>cat /proc/swaps</code>：查看SWAP分区信息；</li><li><code>df -lh</code>：查看硬盘信息；</li></ul></li><li>子进程继承父进程后所共有属性：<ul><li>用户号UIDs和用户组号GIDs；</li><li>环境Environment；</li><li>堆栈；</li><li>共享内存；</li><li>打开文件的描述符；</li><li>执行时关闭（close-on-exec）标志；</li><li>信号（signal）控制设定；</li><li>进程组号；</li><li>当前工作目录；</li><li>根目录；</li><li>文件方式创建屏蔽字；</li><li>资源限制；</li><li>控制终端；</li></ul></li><li>子进程独有：<ul><li>进程号PID；</li><li>不同的父进程号；</li><li>自己的文件描述符和目录流的拷贝；</li><li>子进程不继承父进程的进程正文（text），数据和其他锁定内存（memory locks）；</li><li>不继承异步输入和输出；</li></ul></li><li>bash环境中，挂起当前进程的方式：<code>ctrl+z</code>，中断当前进程：<code>ctrl+c</code>；</li><li>用于进程间通讯（IPC）的四种不同技术：<ul><li>消息传递（管道，FIFO，Posix和System V消息队列）；</li><li>同步（互斥锁，条件变量，读写锁，文件和记录锁，Posix和System V信号灯）；</li><li>共享内存区（匿名共享内存区，有名Posix共享内存区，有名System V共享内存区）；</li><li>过程调用（Solaris门，Sun RPC）；</li></ul></li><li>修改账号名称使用格式：<code>usermod -l new_name old_name</code>；</li><li>关于Linux系统的负载，可以通过TOP命令查看，也可以通过uptime查看；</li><li>动态链接库和静态链接库的优缺点：<ul><li>静态链接库的优点：<ul><li>代码转载速度快，执行速度略比动态链接库快；</li><li>只需保证在开发者的计算机中有正确的LIB文件，在以二进制形式发布程序时不需要考虑在用户计算机上LIB文件是否存在及版本问题，可避免DLL地狱等问题；</li></ul></li><li>动态链接库的优点：<ul><li>更加节省内存并减少页面交换；</li><li>DLL文件与exe文件独立，只需输出接口不变（即名称、参数、返回值类型和调用约定不变），更换DLL文件不会对exe文件造成任何影响，因而极大提高可维护性和可扩展性；</li><li>不同编程语言编写的程序只要按照函数调用约定就可以调用同一个DLL函数；</li><li>适用于大规模的软件开发，使开发过程独立、耦合度小，便于不同开发者和开发组织之间进行开发和测试；</li></ul></li><li>不足之处：<ul><li>使用静态链接生成的可执行文件体积较大，包含相同的公共代码，造成浪费；</li><li>使用动态链接库的应用程序不是自完备的，依赖的DLL模块也要存在，若使用载入时动态链接，程序启动时发现DLL不存在，系统将终止程序并给出错误信息，而使用运行时动态链接，系统不会终止，但由于DLL中的导出函数不可用，程序会加载失败；速度比静态链接慢。当某个模块更新后，若新模块与旧模块不兼容，则需要该模块才能运行的程序将崩溃；</li></ul></li></ul></li><li>Linux中要找出某一文件属于哪个RPM软件包的命令：<code>rpm -qf filename</code>；</li><li>Linux系统进程类型：<ul><li>交互进程：由一个shell启动的进程，交互进程既可以在前台，也可以在后台运行；</li><li>批处理进程：与终端无联系，是一个进程序列；</li><li>监控进程（守护进程）：Linux系统启动时启动的进程，在后台运行；</li></ul></li><li>fatab是用于存放文件系统的静态信息的文件，位于/etc/目录下；</li><li>Linux系统中的内存段：<ul><li>BSS（Block Started by Symbol）：常指用于存放程序中未初始化的全局变量和静态变量的一块内存区域，特点是：可读写，在程序执行前BSS段会自动清0；</li><li>Data Segment：数据段，用来存放程序中已经初始化的全局变量的一块内存区域，属于静态内存分配；</li><li>Code/Text segment：指用于存放程序执行代码的一块内存区域，区域大小在程序运行前就已经确定，且内存区域常属于只读，某些架构也允许代码段为可写（即允许修改程序），代码段中也可能包含一些只读的常数变量如字符串常量等；</li><li>Heap：堆，用于存放进程运行中被动态分配的内存段，大小不固定，可动态扩张或缩减。当进程调用malloc等函数分配内存是，新分配的内存就被动态添加到堆上（堆被扩张）；当利用free等函数释放内存是，被释放的内存从堆中被剔除，堆被缩减；</li><li>Stack：栈，又称堆栈，是用户存放程序临时创建的局部变量。除此之外，函数被调用时的参数也会被压入发起调用的进程栈中，到调用结束后，函数返回值也会存放回栈中。由于栈是先进后出的，所以特别适合用于保存恢复调用现场。从而可以把堆栈看做一个寄存、交换临时数据的内存区； </li></ul></li><li>Linux主机完全安装RHEL5后，系统将默认安装DHCP服务器软件包，DHCP服务器的配置文件为<code>/etc/dhcpd.conf</code>，其配置文件默认是不存在的，需要手工创建；</li><li>死锁发生的必要条件：<ul><li>互斥条件；</li><li>请求和保持；</li><li>不可剥夺；</li><li>循环等待；</li></ul></li><li>进程的三种基本状态：<ul><li><strong>运行态（Running）</strong>：占有CPU，并在CPU上运行；</li><li><strong>就绪态（Ready）</strong>：已具备运行条件，但由于没有空闲CPU，而暂时不能运行；</li><li><strong>等待态（Waiting/Blocked）</strong>：因等待某一时间而暂时不能运行，如等待读盘结果；</li></ul></li><li><code>fork()</code>创建的新进程被称为子进程（child process），<code>fork()</code>给子进程返回一个0值，而给父进程返回一个非0值。继承的子进程从父进程继承了整个进程的地址空间，包括：上下文、进程堆栈、内存信息、打开的文件描述符、信号控制设置、进程优先级、进程组号、当前工作目录、根目录、资源限制、控制终端等；</li><li>对Linux下mysqldump备份命令及参数：<code>mysqldump -h ip -u -p DBNAME &gt;bak.sql</code>:<ul><li><code>-h</code>：目标IP地址；</li><li><code>-u</code>：跟上用户名；</li><li><code>-p</code>：用户秘密；</li><li><code>DBNAME</code>：数据库名；</li></ul></li><li>UNIX系统组成：<ul><li>内核；</li><li>shell；</li><li>文件系统；</li><li>应用程序；</li></ul></li><li><code>makefike</code>文件博爱存了编译器和连接器的参数选项，还表述了所有源文件间的关系（源文件需要的特定的包含文件，可执行文件要求包含的目标文件模块及库等），创建程序首先读取makefile文件，然后再激活编译器、汇编器、资源编译器和连接器以便产生最后的输出，最后输出并生成的文件为可执行文件。makefile中主要包含以下5个内容：<ul><li>显示规则；</li><li>隐晦规则；</li><li>变量的定义；</li><li>文件指示；</li><li>注释；</li></ul></li><li>常见网络操作系统：<ul><li>Unix；</li><li>Linux；</li><li>Windows NT；</li><li>Netware 4.11；</li><li>Lan Manger 4.0；</li></ul></li><li>卸载设备的三种方式，通过设备名、挂载点或者设备名和挂载点，如<code>umount /dev/hdc、 umount /mnt/cdrom、umount /mnt/cdrom /dev/hdc</code>；</li><li>内存屏障主要分为以下几种，其中前三种均隐含了优化屏障的功能：<ul><li>读屏障：用于保证读操作有序；</li><li>写屏障：用于限制写操作；</li><li>通用屏障：对读写操作都有作用；</li><li>优化屏障：用于限制编译器的指令重拍，不区分读写；</li></ul></li><li><code>dhcpd.conf</code>中用于某个客户主机分配固定IP地址的参数：<code>fixed-address</code>；</li><li><code>setuid</code>的用途是允许普通用户完成一些任务，而完成这些任务需要特权和通常被禁止的访问权限；</li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 系统 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> nowcoder </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>牛客网-Python专项训练知识点总结</title>
      <link href="/2019/10/02/niu-ke-wang-python-zhuan-xiang-xun-lian-zhi-shi-dian-zong-jie/"/>
      <url>/2019/10/02/niu-ke-wang-python-zhuan-xiang-xun-lian-zhi-shi-dian-zong-jie/</url>
      
        <content type="html"><![CDATA[<ul><li>映射是一种关联式的容器类型，存储了对象与对象之间的映射关系，字典是Python中为一个映射类型，它存储了键值对的关联，是由键到键值的映射关系；</li><li>Python2中除法默认向下取整，如1 / 2=0，Python3中除法为正常除法，如1 / 2 = 0.5，1 // 2 = 0；</li><li><code>__new__</code>和<code>__init__</code>：<ul><li><code>__new__</code>是一个静态方法，<code>__init__</code>是一个实例方法；</li><li><code>__new__</code>返回一个创建的实例，<code>__init__</code>什么都不返回；</li><li>只有在<code>__new__</code>返回一个cls的实例时，后面的<code>__init__</code>才能被调用；</li><li>当创建一个新实例时调用<code>__new__</code>，初始化一个实例时用<code>__init__</code>；</li></ul></li><li>C语言中字符串使用<code>\0</code>作为结束符防止越界，但Python中字符串是一个固定长度的字符数组，不需要结束符；</li><li>引用、深拷贝与浅拷贝：<ul><li>引用时，父对象变则子对象也跟着变；</li><li>浅拷贝，只会拷贝父对象，不会拷贝父对象中的子对象，所以如父对象中的子对象改变，则拷贝的对象也变，但父对象变，拷贝的对象也不会变；</li><li>深拷贝，也叫完全拷贝，完全独立于原对象，原对象变，拷贝的对象也不变； </li></ul></li><li>判断是否相等的几种条件：<ul><li>is：指地址相同（字符串为不可变类型，所以指向地址相同）；</li><li>==：指内容相同；</li><li>===：指内容和格式相同；</li></ul></li><li>语言动态与非动态、类型强弱分类：</li></ul><p><img src="http://upload-images.jianshu.io/upload_images/9747350-da9e87bfd019f376?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><ul><li><p>线程由操作系统控制，协程由程序自身控制；</p></li><li><p>四种命名方式：</p><ul><li><code>object</code>：# 公用方式；</li><li><code>_object</code>：# 半保护，被看做“protect”，只有类对象和子类对象自己能够访问这些变量，在模块或类外不可以使用，不能用<code>from module import *</code>导入，实际名字为<code>_classname_methodname</code>；</li><li><code>__object</code>：# 全私有，全保护，私有成员“private”，只有类对象自己能访问，连子类对象也不能访问，不能用<code>from module import *</code>导入，可用<code>_classname_methodname</code>来代替以区别和其他类相同的命名；</li><li><code>__object__</code>：# 内建方法，用户一般无需这样定义；</li></ul></li><li><p>对于一个Python命令运行脚本，<code>sys.argv</code>是传递给Python脚本的命令行参数[字符串列表]，<code>argv[0]</code>为脚本自身路径，其他均为命令行参数；</p></li><li><p>Python逻辑运算符</p></li></ul><p><img src="http://upload-images.jianshu.io/upload_images/9747350-97f723832a87b24b?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 编程语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> nowcoder </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>牛客网-C/C++专项训练知识点总结</title>
      <link href="/2019/10/02/niu-ke-wang-c-c-zhuan-xiang-xun-lian-zhi-shi-dian-zong-jie/"/>
      <url>/2019/10/02/niu-ke-wang-c-c-zhuan-xiang-xun-lian-zhi-shi-dian-zong-jie/</url>
      
        <content type="html"><![CDATA[<ul><li>C与C++结构体的区别：<ul><li>C中结构体无函数，但C++的结构体可以有函数；</li><li>C++的结构体可以被类取代，因为类相对于结构体具有封装性等优势；</li></ul></li><li>C++中结构体与类的区别：结构体中的成员访问权限不声明时默认是公开的，但是类确实私有的；</li><li>vector与list的区别：<ul><li>vector拥有一段连续的内存空间，因此支持随机存取，如果需要高效的随即存取；</li><li>list拥有一段不连续的内存空间，如果需要大量的插入和删除，应该使用list；</li><li>vector<int>::iterator支持“+”、“+=”、“&lt;”等操作符；</int></li><li>list<int>::iterator不支持[]运算符；</int></li></ul></li><li>构造函数的执行先执行父类，再执行子类，析构函数则相反；</li><li>指针是个变量，地址是个常量，指针的值是地址，指针能进行加减操作，但地址必须通过赋值操作后才可以；</li><li>程序在编译前由预处理器对预处理命令进行处理；</li><li><code>X&amp;(X-1)</code>：统计X的二进制中1的个数；<code>X|(X+1)</code>：统计X的二进制中0的个数；</li><li><code>unordered_map</code>：所谓的哈希map，其底层数据结构为<code>hashtablle</code>；<code>priority_queue</code>：优先级队列，即二叉树，其底层数据结构是heap；</li><li>const修饰类的成员函数形式为：<code>int Function() const</code>，该函数不能修改任何的成员变量，不能调用非const成员函数（非const成员函数可以修改成员变量）；</li><li>C++的虚函数必须是类的一个成员，而不允许是类的友元；</li><li>纯虚函数是在基类中没有实现的函数，虚函数在基类中实现了，但在派生类中可能有不同版本的函数；纯虚函数是在基类中等于0的函数；抽象类是含有纯虚函数的类；抽象类指针可以指向不同的派生类；</li><li>静态局部变量特点：<ul><li>变量在全局数据区分配内存；</li><li>静态局部变量在程序执行到该对象的声明处是被首次初始化，以后的函数调用不用再进行初始化；</li><li>静态局部变量一般在声明处初始化，若没有显式初始化，则会被程序自动初始化为0；</li><li>是总驻留在全局数据区，知道程序运行结束。但其作用与为局部作用于，当定义它的函数或语句块结束时，其作用域随之结束；</li></ul></li><li>访问vector中的数据的两种方法：<ul><li><code>vector::at()</code>：做边界检查，若是访问越界，将抛出异常；</li><li><code>vector::operator()</code>：为了与C语言进行兼容，不用做边界检查；</li></ul></li><li>指针指向字符串时，字符串是常量，存储在常量区，而指针存储在栈区，不能对其操作修改；</li><li>Nagle算法的规则;<ul><li>若包长度达到MSS，则允许发送；</li><li>若包含有FIN，则允许发送；</li><li>设置了TCP_NODELAY，则允许发送；</li><li>未设置TCP_CORK选项时，若所有发出去的小数据包（包长度小于MSS）均被确认，则允许发送；</li><li>上述条件均不满足，但发生了超时（一般为200ms），则立即发送；</li></ul></li><li>C++中，多文件结果的程序中，通常把类的定义单独存放在头文件中；</li><li>当基类构造函数需要外部传递参数才能够进行初始化时，派生类必须显式定义构造函数，为基类传递参数；基类如果不需要传递或可以不传递参数时，派生类可以不用显式定义构造函数；</li></ul><h3 id="未完待续。。。"><a href="#未完待续。。。" class="headerlink" title="未完待续。。。"></a>未完待续。。。</h3><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 编程语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C/C++ </tag>
            
            <tag> nowcoder </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>提高工作效率的神器推荐之Windows</title>
      <link href="/2019/10/02/ti-gao-gong-zuo-xiao-lu-de-shen-qi-tui-jian-zhi-windows/"/>
      <url>/2019/10/02/ti-gao-gong-zuo-xiao-lu-de-shen-qi-tui-jian-zhi-windows/</url>
      
        <content type="html"><![CDATA[<h2 id="Everything"><a href="#Everything" class="headerlink" title="Everything"></a>Everything</h2><ul><li><p>下载地址：<a href="http://www.voidtools.com/" target="_blank" rel="noopener">http://www.voidtools.com/</a></p></li><li><p>功能：硬盘文件搜索，比起电脑自带的文件搜索，效率提高不是一丁半点。而且Everything还支持正则表达式，小巧而快速；</p><p><img src="http://upload-images.jianshu.io/upload_images/9747350-aef338a949cb09fc?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p></li></ul><h2 id="Clover"><a href="#Clover" class="headerlink" title="Clover"></a>Clover</h2><ul><li>下载地址：<a href="http://cn.ejie.me/" target="_blank" rel="noopener">http://cn.ejie.me/</a></li><li>功能：类似于Chrome浏览器方便的Tab页功能，以插件的方式集成到Windows Explore中，使用方便习惯，而且拥有书签功能，能够让访问文件更加方便快捷；</li></ul><p><img src="http://upload-images.jianshu.io/upload_images/9747350-2cae7c163f00b946?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><h2 id="f-lux"><a href="#f-lux" class="headerlink" title="f.lux"></a>f.lux</h2><ul><li>下载地址：<a href="https://justgetflux.com/" target="_blank" rel="noopener">https://justgetflux.com/</a></li><li>功能：根据用户定义的经纬度、城市名地址信息所在位置自动根据时间来调节电脑显示器的色温，既能视力，也能够减少夜间使用电脑所带来的失眠和睡觉紊乱的现象；</li></ul><p><img src="http://upload-images.jianshu.io/upload_images/9747350-03be328cb55fcc36?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><h2 id="Listary"><a href="#Listary" class="headerlink" title="Listary"></a>Listary</h2><ul><li>下载地址：<a href="http://www.listary.com/" target="_blank" rel="noopener">http://www.listary.com/</a></li><li>功能：类似于Everything的文件搜索软件，但Listary主要解决了Windows文件的浏览和保存不方便的情况；</li></ul><p><img src="http://upload-images.jianshu.io/upload_images/9747350-4bdb49f4d7e8fcca?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><h2 id="火柴"><a href="#火柴" class="headerlink" title="火柴"></a>火柴</h2><ul><li>下载地址：<a href="http://huochaipro.com/" target="_blank" rel="noopener">http://huochaipro.com/</a></li><li>功能：用于快速查找文件、打开应用程序、局域网传文件、局域网聊天等；</li></ul><p><img src="https://upload-images.jianshu.io/upload_images/9747350-9117fa405b5617e0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="火柴"></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> tools </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Windows </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>实用网站推荐</title>
      <link href="/2019/10/02/shi-yong-wang-zhan-tui-jian/"/>
      <url>/2019/10/02/shi-yong-wang-zhan-tui-jian/</url>
      
        <content type="html"><![CDATA[<h1 id="视频网站篇"><a href="#视频网站篇" class="headerlink" title="视频网站篇"></a>视频网站篇</h1><ul><li>种子下载网站：<a href="http://www.hao6v.com/" target="_blank" rel="noopener">http://www.hao6v.com/</a></li></ul><p><img src="https://upload-images.jianshu.io/upload_images/9747350-6d44e3c41d302b0f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/620" alt=""></p><ul><li>在线视频观看：<a href="http://www.94aw.com/" target="_blank" rel="noopener">http://www.94aw.com/</a></li></ul><p><img src="https://upload-images.jianshu.io/upload_images/9747350-78f14ebd2ccbcd3f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/620" alt=""></p><ul><li>NBA体育赛事观看：<a href="http://www.lanqiutv.com/" target="_blank" rel="noopener">http://www.lanqiutv.com/</a></li></ul><p><img src="https://upload-images.jianshu.io/upload_images/9747350-83885d04d09451fe.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/620" alt=""></p><ul><li>美剧天堂：<a href="http://www.meijutt.com/" target="_blank" rel="noopener">http://www.meijutt.com/</a></li></ul><p><img src="https://upload-images.jianshu.io/upload_images/9747350-1a3468ff58573da9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/620" alt=""></p><h1 id="软件下载篇"><a href="#软件下载篇" class="headerlink" title="软件下载篇"></a>软件下载篇</h1><ul><li>常用软件及破解版软件：<a href="http://www.zdfans.com/" target="_blank" rel="noopener">http://www.zdfans.com/</a></li></ul><p><img src="https://upload-images.jianshu.io/upload_images/9747350-73bd1e965c93d89f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/620" alt=""></p><ul><li>常用软件及破解版软件：<a href="http://www.ccav1.com/" target="_blank" rel="noopener">http://www.ccav1.com/</a></li></ul><p><img src="https://upload-images.jianshu.io/upload_images/9747350-bec690ad28281f62.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/620" alt=""></p><ul><li>Chrome插件：<a href="http://getcrx.cn/#/" target="_blank" rel="noopener">http://getcrx.cn/#/</a></li></ul><p><img src="https://upload-images.jianshu.io/upload_images/9747350-ec18f8755e0d666a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/620" alt=""></p><ul><li>系统镜像下载：<a href="https://msdn.itellyou.cn/" target="_blank" rel="noopener">https://msdn.itellyou.cn/</a></li></ul><p><img src="https://upload-images.jianshu.io/upload_images/9747350-001c66f99d26b090.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/620" alt=""></p><h1 id="动漫篇"><a href="#动漫篇" class="headerlink" title="动漫篇"></a>动漫篇</h1><ul><li>动漫之家：<a href="https://manhua.dmzj.com/" target="_blank" rel="noopener">https://manhua.dmzj.com/</a></li></ul><p><img src="https://upload-images.jianshu.io/upload_images/9747350-0cdce20cf006d504.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/620" alt=""></p><ul><li>嘀哩嘀哩：<a href="http://www.dilidili.wang/" target="_blank" rel="noopener">http://www.dilidili.wang/</a></li></ul><p><img src="https://upload-images.jianshu.io/upload_images/9747350-c9258d35bb8203e8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/620" alt=""></p><ul><li>新世界动漫：<a href="http://www.x4jdm.com/" target="_blank" rel="noopener">http://www.x4jdm.com/</a></li></ul><p><img src="https://upload-images.jianshu.io/upload_images/9747350-188ffe70e91ebf4a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/620" alt=""></p><ul><li>风车动漫：<a href="http://www.fengchedm.com/" target="_blank" rel="noopener">http://www.fengchedm.com/</a></li></ul><p><img src="https://upload-images.jianshu.io/upload_images/9747350-f0e2445c2f955dc0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/620" alt=""></p><h1 id="实用篇"><a href="#实用篇" class="headerlink" title="实用篇"></a>实用篇</h1><ul><li>图片压缩网站：<a href="http://www.gaitubao.com/" target="_blank" rel="noopener">http://www.gaitubao.com/</a></li></ul><p><img src="https://upload-images.jianshu.io/upload_images/9747350-98c740b005356cad.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/620" alt=""></p><ul><li>百度脑图：<a href="http://naotu.baidu.com/" target="_blank" rel="noopener">http://naotu.baidu.com/</a></li></ul><p><img src="https://upload-images.jianshu.io/upload_images/9747350-8eb9a2013752c12d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/620" alt=""></p><ul><li>在线流程图、思维导图、原型图、UML、网络拓扑图等制作：<a href="http://v3.processon.com/" target="_blank" rel="noopener">http://v3.processon.com/</a></li></ul><p><img src="https://upload-images.jianshu.io/upload_images/9747350-bc7c73f6584fa920.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/620" alt=""></p><ul><li>虫部落快搜：<a href="http://search.chongbuluo.com/" target="_blank" rel="noopener">http://search.chongbuluo.com/</a></li></ul><p><img src="https://upload-images.jianshu.io/upload_images/9747350-9465f0b2748678e4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/620" alt=""></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> tools </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>使用U盘安装Windows系统</title>
      <link href="/2019/10/02/shi-yong-u-pan-an-zhuang-windows-xi-tong/"/>
      <url>/2019/10/02/shi-yong-u-pan-an-zhuang-windows-xi-tong/</url>
      
        <content type="html"><![CDATA[<h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><ul><li>一个8G及以上的U盘；</li><li>软碟通UltraISO，<a href="https://cn.ultraiso.net/xiazai.html" target="_blank" rel="noopener">下载地址</a>，非免费，但试用就够了；</li><li>系统镜像，推荐去<a href="https://msdn.itellyou.cn/" target="_blank" rel="noopener">MSDN</a>下载，选择你需要安装的系统进行下载；</li></ul><p><img src="http://upload-images.jianshu.io/upload_images/9747350-351a128a86ea701a?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><h2 id="安装过程（以Windows10为例）"><a href="#安装过程（以Windows10为例）" class="headerlink" title="安装过程（以Windows10为例）"></a>安装过程（以Windows10为例）</h2><ul><li><p>利用U盘制作启动盘，准备好上述的东西，然后开始制作启动盘：</p><p> <img src="http://upload-images.jianshu.io/upload_images/9747350-baa6b765ca16821d?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><p> <img src="http://upload-images.jianshu.io/upload_images/9747350-ded172644e954f14?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><p> <img src="http://upload-images.jianshu.io/upload_images/9747350-c661cd11f09b766f?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p></li></ul><p><strong>注意：制作之前请确保自己U盘中的数据已经备份好，否则U盘数据会被擦除</strong>；</p><p><img src="http://upload-images.jianshu.io/upload_images/9747350-4b57edc9353b6dd0?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><ul><li>进入BIOS设置U盘启动，详情见<a href="http://www.udashi.com/jc/2.html" target="_blank" rel="noopener">BIOS设置U盘启动</a>；</li><li>设置好BIOS后重启机器，开始系统的安装：</li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> tools </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Windows </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Anaconda简单使用手册</title>
      <link href="/2019/10/02/anaconda-jian-dan-shi-yong-shou-ce/"/>
      <url>/2019/10/02/anaconda-jian-dan-shi-yong-shou-ce/</url>
      
        <content type="html"><![CDATA[<h2 id="安装部分"><a href="#安装部分" class="headerlink" title="安装部分"></a>安装部分</h2><h3 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h3><p>下载各平台对应的安装包，各平台安装包下载链接如下：</p><ul><li><a href="https://www.anaconda.com/download/#windows" target="_blank" rel="noopener">Windows</a></li><li><a href="https://www.anaconda.com/download/#macos" target="_blank" rel="noopener">macOs</a></li><li><a href="https://www.anaconda.com/download/#linux" target="_blank" rel="noopener">Linux</a></li></ul><h3 id="安装过程"><a href="#安装过程" class="headerlink" title="安装过程"></a>安装过程</h3><p>安装过程在此不给出具体过程，可参照官方给出教程，各平台对应教程如下：</p><ul><li><p><a href="http://docs.anaconda.com/anaconda/install/windows/" target="_blank" rel="noopener">Windows中Anaconda安装教程</a></p></li><li><p><a href="http://docs.anaconda.com/anaconda/install/mac-os/" target="_blank" rel="noopener">macOS中Anaconda安装教程</a></p></li><li><p><a href="http://docs.anaconda.com/anaconda/install/linux/" target="_blank" rel="noopener">Linux中Anconda安装教程</a></p><h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2></li><li><p>查看安装版本</p></li></ul><pre class="line-numbers language-shell"><code class="language-shell">conda --version<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>查看帮助信息</li></ul><pre class="line-numbers language-shell"><code class="language-shell">conda --helpconda -h<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>卸载conda</li></ul><pre class="line-numbers language-shell"><code class="language-shell"># Linux/macOSconda -rc ~/anaconda3<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>查看已创建的环境</li></ul><pre class="line-numbers language-shell"><code class="language-shell"># 下列命令三选一conda info --envsconda info -econda env list<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>创建新环境</li></ul><pre class="line-numbers language-shell"><code class="language-shell">conda --create -n '新环境名' '安装包名'eg:# 创建了一个名为'python3.5'，环境中默认安装版本为3.5的pythonconda --create -n python3.5 python=3.5 <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>切换环境</li></ul><pre class="line-numbers language-shell"><code class="language-shell"># Linux/macOSsource activate '环境名'# Windowsactivate '环境名'<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>退出环境</li></ul><pre class="line-numbers language-shell"><code class="language-shell"># Linux/macOSsource deactivate# Windowsdeactivate<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>复制环境</li></ul><pre class="line-numbers language-shell"><code class="language-shell">conda create --name '新环境名' --clone '被复制的环境名'<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>删除环境</li></ul><pre class="line-numbers language-shell"><code class="language-shell">conda remove --name '环境名' --all<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>设置Anaconda仓库的清华镜像</li></ul><pre class="line-numbers language-shell"><code class="language-shell">conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free/conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/main/conda config --set show_channel_urls yes<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>查找可供安装的包版本</li></ul><pre class="line-numbers language-shell"><code class="language-shell"># 1、精确查找conda search --full-name '包全名'# 2、模糊查找# 查找包含字段的包有哪些版本可供安装conda search '字段'<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>安装包</li></ul><pre class="line-numbers language-shell"><code class="language-shell">conda install '包名'<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>卸载包</li></ul><pre class="line-numbers language-shell"><code class="language-shell">conda remove'包名'<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>更新包</li></ul><pre class="line-numbers language-shell"><code class="language-shell"># 更新所有包conda update --all# 更新指定包conda update '包名'<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>好了，Anaconda的安装以及简单的使用教程到此结束了。相信你通过上面的内容，一定能够对你的学习有所帮助。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> tools </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Anaconda </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>强大的编辑器 - Vim</title>
      <link href="/2019/10/02/qiang-da-de-bian-ji-qi-vim/"/>
      <url>/2019/10/02/qiang-da-de-bian-ji-qi-vim/</url>
      
        <content type="html"><![CDATA[<h3 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h3><ul><li>无图形界面；</li><li>只能编辑文本内容，不能进行排版；</li><li>不支持鼠标操作；</li><li>无菜单、只有命令；</li></ul><h3 id="工作模式"><a href="#工作模式" class="headerlink" title="工作模式"></a>工作模式</h3><ul><li>命令模式：对文件进行常规编辑操作，如定位、翻页、复制等，是<code>vim</code>的入口；</li><li>末行模式：执行保存、退出等功能，是<code>vim</code>的出口；</li><li>编辑模式：正常的文字编辑功能；</li></ul><h3 id="命令及对应功能"><a href="#命令及对应功能" class="headerlink" title="命令及对应功能"></a>命令及对应功能</h3><table><thead><tr><th align="right">功能</th><th align="left">命令</th></tr></thead><tbody><tr><td align="right">打开文件并定位行</td><td align="left"><code>vim fileName + row</code></td></tr><tr><td align="right">保存</td><td align="left"><code>w</code></td></tr><tr><td align="right">退出，未保存不许退出</td><td align="left"><code>q</code></td></tr><tr><td align="right">强制退出</td><td align="left"><code>q!</code></td></tr><tr><td align="right">保存并退出</td><td align="left"><code>x</code></td></tr><tr><td align="right">重复命令多次</td><td align="left">先输入一个数字，再跟上一个命令</td></tr><tr><td align="right">向上</td><td align="left"><code>h</code></td></tr><tr><td align="right">向下</td><td align="left"><code>j</code></td></tr><tr><td align="right">向左</td><td align="left"><code>h</code></td></tr><tr><td align="right">向右</td><td align="left"><code>l</code></td></tr><tr><td align="right">向后移动一个单词</td><td align="left"><code>w</code></td></tr><tr><td align="right">向前移动一个单词</td><td align="left"><code>b</code></td></tr><tr><td align="right">行首</td><td align="left"><code>0</code></td></tr><tr><td align="right">行首，第一个非空白字符的位置</td><td align="left"><code>^</code></td></tr><tr><td align="right">行尾</td><td align="left"><code>$</code></td></tr><tr><td align="right">文件顶部</td><td align="left"><code>gg</code></td></tr><tr><td align="right">文件末尾</td><td align="left"><code>G</code></td></tr><tr><td align="right">移动到<code>row</code>对应行数</td><td align="left"><code>row gg</code>、<code>row G</code>、<code>：row</code></td></tr><tr><td align="right">向上翻页</td><td align="left"><code>ctrl + b</code></td></tr><tr><td align="right">向下翻页</td><td align="left"><code>ctrl + f</code></td></tr><tr><td align="right">屏幕顶部</td><td align="left"><code>H</code></td></tr><tr><td align="right">屏幕中间</td><td align="left"><code>M</code></td></tr><tr><td align="right">屏幕底部</td><td align="left"><code>L</code></td></tr><tr><td align="right">上一段</td><td align="left"><code>{</code></td></tr><tr><td align="right">下一段</td><td align="left"><code>}</code></td></tr><tr><td align="right">括号匹配及切换</td><td align="left"><code>%</code></td></tr><tr><td align="right">添加标记<code>x</code></td><td align="left"><code>mx</code></td></tr><tr><td align="right">定位到标记<code>x</code>所在位置</td><td align="left">‘<code>x</code></td></tr><tr><td align="right">从光标位置开始选择文本</td><td align="left"><code>v</code></td></tr><tr><td align="right">选中光标经过的完整行</td><td align="left"><code>V</code></td></tr><tr><td align="right">垂直方向选中文本</td><td align="left"><code>ctrl + v</code></td></tr><tr><td align="right">撤销</td><td align="left"><code>u</code></td></tr><tr><td align="right">恢复撤销</td><td align="left"><code>ctrl + r</code></td></tr><tr><td align="right">删除光标所在字符或选中文字</td><td align="left"><code>x</code></td></tr><tr><td align="right">删除移动命令对应内容</td><td align="left"><code>d</code></td></tr><tr><td align="right">删除光标所在行，<code>ndd</code>复制多行</td><td align="left"><code>dd</code></td></tr><tr><td align="right">删除至行尾</td><td align="left"><code>D</code></td></tr><tr><td align="right">复制</td><td align="left"><code>y</code></td></tr><tr><td align="right">复制一行，<code>nyy</code>复制多行</td><td align="left"><code>yy</code></td></tr><tr><td align="right">粘贴</td><td align="left"><code>p</code></td></tr><tr><td align="right">替换当前字符</td><td align="left"><code>r</code></td></tr><tr><td align="right">替换当前行光标后的字符</td><td align="left"><code>R</code></td></tr><tr><td align="right">向右增加缩进</td><td align="left"><code>&gt;&gt;</code></td></tr><tr><td align="right">向左减少缩进</td><td align="left"><code>&lt;&lt;</code></td></tr><tr><td align="right">重复上次命令</td><td align="left"><code>.</code></td></tr><tr><td align="right">查找<code>str</code>，<code>n</code>查找下一个，<code>N</code>查找上一个</td><td align="left"><code>/str</code></td></tr><tr><td align="right">向后查找当前光标所在单词</td><td align="left"><code>*</code></td></tr><tr><td align="right">向前查找当前光标所在单词</td><td align="left"><code>#</code></td></tr><tr><td align="right">全局替换</td><td align="left"><code>：%s/旧文本/新文本/g</code></td></tr><tr><td align="right">可视区域替换</td><td align="left"><code>：s/旧文本/新文本/g</code></td></tr><tr><td align="right">确认替换</td><td align="left"><code>：%s/旧文本/新文本/gc</code></td></tr><tr><td align="right">当前字符前插入文本</td><td align="left"><code>i</code></td></tr><tr><td align="right">行首插入文本</td><td align="left"><code>I</code></td></tr><tr><td align="right">当前字符后添加文本</td><td align="left"><code>a</code></td></tr><tr><td align="right">行末添加文本</td><td align="left"><code>A</code></td></tr><tr><td align="right">当前行后插入一空行</td><td align="left"><code>o</code></td></tr><tr><td align="right">当前行前插入一空行</td><td align="left"><code>O</code></td></tr><tr><td align="right">打开内置文件浏览器，浏览当前目录下文件</td><td align="left"><code>:e .</code></td></tr><tr><td align="right">新建文件</td><td align="left"><code>:n</code></td></tr><tr><td align="right">横向增加分屏</td><td align="left"><code>：sp [fileName]</code></td></tr><tr><td align="right">纵向增加分屏</td><td align="left"><code>：vsp [fileName]</code></td></tr></tbody></table><h3 id="常用配置"><a href="#常用配置" class="headerlink" title="常用配置"></a>常用配置</h3><p>一般而言，想要配置Vim的相关设置，需要在root用户的权限下修改<code>/etc/vim/vimrc或/etc/vimrc</code>文件相关内容。常用的配置如下：</p><pre class="line-numbers language-shell"><code class="language-shell">set autoindent                  " 按下回车后，下一行缩进格式与上一行保持一直set tabstop=4                   " 设置Tab键显示的空格数set spell spelllang=en_us       "英语单词拼写检查set number                      " 设置行号set nocompatible                " 设置是否与Vi兼容syntax on                       " 语法高亮set showmode                    " 显示当前属于命令模式还是插入模式set encoding=utf-8              " 设置utf-8编码set t_Co=256                    " 启用256色filetype indent on              " 文件类型检查set noerrorbells                "出错时不要发出响声警告set mouse=a                     " 支持鼠标<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>以上就是对与Linux中编辑器Vim的相关介绍以及基本操作的详细内容了，Vim这款编辑器在Vi的基础上又进一步，增加了新的功能，大大提高了开发效率。但同时，Vim对于新手而言是一个不太友好的编辑器，因为需要记住许多命令。所以我们作为一个新手想要快速掌握Vim的使用技巧，唯一的方法就是多去实践，在不断使用它的过程中我们就会发现我们对它的使用越来越熟练。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> tools </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vim </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux文件系统分层标准（FHS）</title>
      <link href="/2019/10/02/linux-wen-jian-xi-tong-fen-ceng-biao-zhun-fhs/"/>
      <url>/2019/10/02/linux-wen-jian-xi-tong-fen-ceng-biao-zhun-fhs/</url>
      
        <content type="html"><![CDATA[<p>对于刚接触Linux系统的我们来说，时常被Linux的系统结构搞得晕头转向，下面这张图介绍了Linux的文件系统分层标准，希望对你有所帮助。</p><p><img src="http://upload-images.jianshu.io/upload_images/9747350-1cd2eb2a77ddadb0?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 系统 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>修改Ubuntu默认root用户密码及更改用户密码</title>
      <link href="/2019/10/02/xiu-gai-ubuntu-mo-ren-root-yong-hu-mi-ma-ji-geng-gai-yong-hu-mi-ma/"/>
      <url>/2019/10/02/xiu-gai-ubuntu-mo-ren-root-yong-hu-mi-ma-ji-geng-gai-yong-hu-mi-ma/</url>
      
        <content type="html"><![CDATA[<h2 id="新安装的Ubuntu系统中默认的root用户密码是多少？该怎么修改？"><a href="#新安装的Ubuntu系统中默认的root用户密码是多少？该怎么修改？" class="headerlink" title="新安装的Ubuntu系统中默认的root用户密码是多少？该怎么修改？"></a>新安装的Ubuntu系统中默认的root用户密码是多少？该怎么修改？</h2><p> 如题，相信许多刚接触Ubuntu系统的新手大多会遇到这个问题，那么我们该如何解决这个问题呢？Ubuntu在安装过程中并没有让我们设置root用户密码，但当我们需要获取root用户的权限时，就会让我们输入root用户的密码，如下图：</p><p><img src="http://upload-images.jianshu.io/upload_images/9747350-dcd9a2c58cbfeabf?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><p>这就搞得我们一头雾水了。当初我们安装系统的时候只是设置好了一个用户名和用户的密码，并没有设置root用户密码啊，该怎么输入呢？你可能会抱着试一试的心态，输入自己创建的用户的密码，结果当然是密码错误了！！！</p><ul><li><p>原因：未设置之前，Ubuntu中默认的root密码是随机的，即每次开机都会有一个新的root密码，所以此时的root用户密码并不确定；</p></li><li><p>解决方法：Ubuntu中打开终端(ctrl + alt + t)，输入<code>sudo passwd</code>，如下图，然后重复两次你要设置的root密码，然后就会提示密码已更新了；</p><p> <img src="http://upload-images.jianshu.io/upload_images/9747350-970dc994741994dd?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p></li><li><p>测试是否设置成功：控制台中输入<code>su root</code>，然后输入刚才设置好的root密码，测试是否修改成功，成功后如下图所示；</p><p> <img src="http://upload-images.jianshu.io/upload_images/9747350-003ce7f59a6c7689?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p></li></ul><h2 id="修改指定用户的密码"><a href="#修改指定用户的密码" class="headerlink" title="修改指定用户的密码"></a>修改指定用户的密码</h2><ul><li><p>首先需要切换到<code>root</code>用户下，输入<code>sudo su</code>，然后输入上面改好的root用户密码即可切换到<code>root</code>用户；</p><p>  <img src="http://upload-images.jianshu.io/upload_images/9747350-6a43f514913fa140?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p></li><li><p>然后输入<code>passwd 用户名</code>，输入需要修改的新密码，重复两次即可，此时变回提示用户身份验证令牌已成功更新；</p><p>  <img src="http://upload-images.jianshu.io/upload_images/9747350-6240ab05865065c6?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p></li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 系统 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Ubuntu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VMware安装Ubuntu18.04</title>
      <link href="/2019/10/02/vmware-an-zhuang-ubuntu18-04/"/>
      <url>/2019/10/02/vmware-an-zhuang-ubuntu18-04/</url>
      
        <content type="html"><![CDATA[<h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><h4 id="Ubuntu"><a href="#Ubuntu" class="headerlink" title="Ubuntu"></a>Ubuntu</h4><ul><li><p>获取地址：</p><ul><li><p><a href="https://www.ubuntu.com/download/desktop?utm_expid=.t_P3dGHLTjiXbkBPgMHsUw.0&amp;utm_referrer=https%3A%2F%2Fwww.ubuntu.com%2Fdesktop" target="_blank" rel="noopener">官网</a></p><p><img src="http://upload-images.jianshu.io/upload_images/9747350-963b73f433292ce0?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p></li><li><p><a href="https://mirrors.tuna.tsinghua.edu.cn/ubuntu-releases/18.04/" target="_blank" rel="noopener">清华镜像站</a></p><p><img src="http://upload-images.jianshu.io/upload_images/9747350-51761975c46761c2?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p></li></ul></li></ul><h4 id="VMware"><a href="#VMware" class="headerlink" title="VMware"></a>VMware</h4><ul><li><p>获取地址<a href="https://pan.baidu.com/s/1dzmawpqmK5PuCBipIwLXoA#list/path=%2F%E8%99%9A%E6%8B%9F%E6%9C%BA%2FVMware%20Workstation%20%26%20%20KeyGen&amp;parentPath=%2F%E8%99%9A%E6%8B%9F%E6%9C%BA" target="_blank" rel="noopener">链接</a></p><p>  <img src="http://upload-images.jianshu.io/upload_images/9747350-5b85994cec8c1496?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p></li></ul><h2 id="安装过程"><a href="#安装过程" class="headerlink" title="安装过程"></a>安装过程</h2><ul><li><p>Vmware的安装过程此处不在赘述，不清楚如何安装的请自行百度，参见<a href="https://jingyan.baidu.com/article/9f7e7ec09da5906f281554d6.html" target="_blank" rel="noopener">VMware14安装教程</a></p></li><li><p>然后就是Vmware中安装Ubuntu18.04的过程如下：</p><p>  <img src="http://upload-images.jianshu.io/upload_images/9747350-fe983d70ceeaec3b?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><p>  <img src="http://upload-images.jianshu.io/upload_images/9747350-3a2758738f4edbc9?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><p>  <img src="http://upload-images.jianshu.io/upload_images/9747350-5119d64afff7d110?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><p>  <img src="http://upload-images.jianshu.io/upload_images/9747350-7598cdb1498ccb47?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><p>  <img src="http://upload-images.jianshu.io/upload_images/9747350-b3c9212e5d85e732?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><p>  <img src="http://upload-images.jianshu.io/upload_images/9747350-6a92ad5a578b8dd9?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><p>  <img src="http://upload-images.jianshu.io/upload_images/9747350-ddac8cf24d36ab2c?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><p>  <img src="http://upload-images.jianshu.io/upload_images/9747350-4db68f693b3c5f24?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><p>  <img src="http://upload-images.jianshu.io/upload_images/9747350-27485661c90e94d5?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><p>  <img src="http://upload-images.jianshu.io/upload_images/9747350-6a160fc6a60808df?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><p>  <img src="http://upload-images.jianshu.io/upload_images/9747350-7d8df4e929f090cc?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><p>  <img src="http://upload-images.jianshu.io/upload_images/9747350-2c3349f41e6b43ef?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><p>  <img src="http://upload-images.jianshu.io/upload_images/9747350-ba8b95f0b6259bbf?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><p>  <img src="http://upload-images.jianshu.io/upload_images/9747350-bff2988b72753d28?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><p>  <img src="http://upload-images.jianshu.io/upload_images/9747350-d1888586d97f54ae?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><p>  <img src="http://upload-images.jianshu.io/upload_images/9747350-05b4d09807eadd4f?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><p>  <img src="http://upload-images.jianshu.io/upload_images/9747350-bf2ef18ac29200a5?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><p>  <img src="http://upload-images.jianshu.io/upload_images/9747350-bfb91707c711408b?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p></li></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul><li>至此，Ubuntu18.04的安装结束，接下来你就可以尽情的捣鼓安装好的系统了QAQ。</li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 系统 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Ubuntu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux知识点总结</title>
      <link href="/2019/10/02/linux-zhi-shi-dian-zong-jie/"/>
      <url>/2019/10/02/linux-zhi-shi-dian-zong-jie/</url>
      
        <content type="html"><![CDATA[<h3 id="操作系统"><a href="#操作系统" class="headerlink" title="操作系统"></a>操作系统</h3><ul><li><p>定义：操作系统是一个特殊软件，它作为接口供程序员开发使用；</p></li><li><p>作用：</p><p>  1、直接操作硬件；</p><p>  2、把操作硬件的代码封装成系统调用，供其他程序员通过系统调用间接操作硬件；</p></li><li><p>分类：</p><p>  1、桌面：Windows、macOs、Linux；</p><p>  2、服务器：Linux、Windows Server；</p><p>  3、嵌入式：Linux；</p><p>  4、移动设备：iOS、Andro；</p></li></ul><h3 id="Linux内核及发行版"><a href="#Linux内核及发行版" class="headerlink" title="Linux内核及发行版"></a>Linux内核及发行版</h3><ul><li><p>内核： 系统核心，运行程序和管理硬件设别的核心程序，提供一个设备和应用程序间的抽象层；</p></li><li><p>内核版本：</p><p>  1、稳定版：工业级强度，可广泛应用与部署，新版本的发布只是修复旧版本的一些bug或者加入新的驱动程序；</p><p>  2、开发版：用于实验各种解决方案，因此更新很快；</p></li><li><p>发行版本：包括桌面环境、办公套件、媒体播放器、数据库等；</p></li></ul><h3 id="单用户与多用户操作系统"><a href="#单用户与多用户操作系统" class="headerlink" title="单用户与多用户操作系统"></a>单用户与多用户操作系统</h3><ul><li>单用户：一台计算机在同一时间内只能由一个用户使用，一个用户独享系统硬件和软件资源；</li><li>多用户：一台计算机能被多个用户同时使用，用户之间共享系统硬件和软件资源；</li></ul><h3 id="Linux中查阅命令帮助信息"><a href="#Linux中查阅命令帮助信息" class="headerlink" title="Linux中查阅命令帮助信息"></a>Linux中查阅命令帮助信息</h3><ul><li><code>command --hlep</code>：显示命令帮助信息；</li><li><code>man command</code>：查阅命令使用手册；</li></ul><table><thead><tr><th align="center">操作键</th><th align="center">功能</th></tr></thead><tbody><tr><td align="center">空格</td><td align="center">显示下一屏</td></tr><tr><td align="center">回车</td><td align="center">一次滚动一行</td></tr><tr><td align="center">b</td><td align="center">回滚一屏</td></tr><tr><td align="center">f</td><td align="center">前滚一屏</td></tr><tr><td align="center">/keyword</td><td align="center">搜索关键词</td></tr><tr><td align="center">q</td><td align="center">退出</td></tr></tbody></table><ul><li>通配符</li></ul><table><thead><tr><th align="center">通配符</th><th align="center">含义</th></tr></thead><tbody><tr><td align="center">*</td><td align="center">代表任意个字符</td></tr><tr><td align="center">？</td><td align="center">代表任一个字符</td></tr><tr><td align="center">[]</td><td align="center">表示可以匹配字符组中任意一个</td></tr><tr><td align="center">[mn]</td><td align="center">匹配m、n中任意一个</td></tr><tr><td align="center">[a-z]</td><td align="center">匹配从a-z范围内任意一个字符</td></tr></tbody></table><ul><li>重定向：<code>&gt;</code>、<code>&gt;&gt;</code><ul><li><code>&gt;</code>：表示输出，会覆盖原有内容；</li><li><code>&gt;&gt;</code>：表示追加，将内容追加到原有文件末尾；</li></ul></li></ul><h3 id="网卡与IP"><a href="#网卡与IP" class="headerlink" title="网卡与IP"></a>网卡与IP</h3><ul><li>网卡：负责网络通信的硬件设备；</li><li>IP：设置在网卡上的地址信息；</li></ul><h3 id="ssh与scp"><a href="#ssh与scp" class="headerlink" title="ssh与scp"></a>ssh与scp</h3><ul><li>ssh</li></ul><p>传输时对数据进行加密，同时防止DNS欺骗和IP欺骗，安全可靠性高；另外，传输的数据是经过压缩的，这样可以加快传输速度；</p><ul><li>常见端口号</li></ul><table><thead><tr><th align="center">服务</th><th align="center">端口号</th></tr></thead><tbody><tr><td align="center">SSH</td><td align="center">22</td></tr><tr><td align="center">Web</td><td align="center">80</td></tr><tr><td align="center">HTTPS</td><td align="center">443</td></tr><tr><td align="center">FTP</td><td align="center">21</td></tr></tbody></table><ul><li>scp</li></ul><p>在Linux下用来进行远程拷贝文件；</p><h3 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h3><ul><li><code>tree</code>：显示目录的树结构；</li><li><code>groupadd</code>：添加组；</li><li><code>groupdel</code>：删除组； </li><li><code>useradd -m -g groupName newUser</code>：添加新用户，<code>-m</code> 自动创建用户家目录，<code>-g</code>指定用户所属组；</li><li><code>paddwd userName</code>：设置用户密码；</li><li><code>userdel -r userName</code>：删除用户，<code>-r</code>自动删除用户家目录；</li><li><code>etc/passwd</code>文件存放用户信息，存放信息如下：<ul><li>1、用户名；</li><li>2、密码（x表示加密的密码）；</li><li>3、UID，用户标识；</li><li>4、GID，组标识；</li><li>5、用户全名或本地账号；</li><li>6、家目录；</li><li>7、登录时所使用的<code>shell</code>；</li></ul></li><li><code>usermod</code>：设置用户的主组/附加组和登陆shell；<ul><li>主组：常在创建新用户时指定，<code>在etc/passwd</code>的第4列<code>GID</code>对应的组；</li><li>附加组：在<code>etc/group</code>中最后一列表示该组的用户列表，用于指定用户的附加权限；</li><li><strong>注意</strong>：<code>useradd</code>添加的用户默认是没有使用<code>sudo</code>权限的，需要使用<code>usermod -G sudo userName</code>命令将其添加到<code>sudo</code>附加组中；</li></ul></li><li><code>bin</code>与<code>sbin</code><ul><li><code>bin</code>：二进制执行文件目录，用于具体应用，存放后期安装的一些软件；</li><li><code>sbin</code>：系统管理员专用二进制代码存放目录，用于系统管理，存放<code>root</code>用户的一些管理程序；</li></ul></li><li><code>df</code>：<code>disk free</code>显示磁盘剩余空间；</li><li><code>du</code>：<code>disk usage</code>显示目录下文件大小；</li><li><code>ps aux</code>：查看所有用户的所有进程的详细信息；<ul><li><code>a</code>：显示终端所有进程，包括其他用户进程；</li><li><code>u</code>：显示进程当前详细状态；</li><li><code>x</code>：显示无控制终端的进程；</li></ul></li><li><code>top</code>：动态显示运行中的进程且排序；</li><li><code>find [路径] -name “要搜索的文件”</code>：查找指定目录及其子目录下的文件；</li><li>软链接：<code>ln -s 源文件 链接文件</code>，类似快捷方式，当删除源文件之后，链接文件也不能访问；</li><li>硬连接：<code>ln 源文件 链接文件</code>，相当于<code>copy</code>一份，源文件删除之后，链接文件仍然能够访问；</li><li><strong>注意</strong>：<strong>文件名</strong>和<strong>文件的数据</strong>分开存储；</li><li>打包：<code>tar -cvf 打包名.tar 打包源文件</code>；</li><li>解包：<code>tar -xvf 打包名.tar</code>；</li><li>压缩：<code>tar -zcvf 压缩文件.tar.gz 压缩源文件</code>、<code>tar -jcvf 压缩文件.tar.bz2 压缩源文件</code>；</li><li>解压缩：<code>tar -zxvf 压缩文件.tar.gz</code>、<code>tar -jxvf 压缩文件.tar.bz2</code>，<code>-C</code>用于指定解压缩目录，解压缩目录必须存在；</li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 系统 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++知识点总结</title>
      <link href="/2019/10/02/c-zhi-shi-dian-zong-jie/"/>
      <url>/2019/10/02/c-zhi-shi-dian-zong-jie/</url>
      
        <content type="html"><![CDATA[<h2 id="const在不同位置时的不同意义"><a href="#const在不同位置时的不同意义" class="headerlink" title="const在不同位置时的不同意义"></a>const在不同位置时的不同意义</h2><ul><li>指针类型前：声明一个指向常量的指针，程序中不能通过指针来改变它所指向的值，但指针本身的值可以改变，即指针可以指向其他数据；</li><li>"*”号和指针名之间，声明一个指针常量(常指针)，指针本身的值不可改变，即不能指向其他数据，但指向的数据的值可以改变；</li><li>两个地方都加，声明指向常量的指针常量，指针本身的值不可改变，指向的数据也不能通过指针改变；</li></ul><h2 id="函数指针"><a href="#函数指针" class="headerlink" title="函数指针"></a>函数指针</h2><ul><li>使用函数指针之前，必须先赋值，使它指向一个函数入口地址，赋值语法格式为：函数指针名 = 函数名，其中函数名代表的函数必须是一个已经定义过的，和函数指针具有相同返回类型的函数，指针调用函数格式：(*指针变量)(实参列表)；</li></ul><h2 id="访问权限"><a href="#访问权限" class="headerlink" title="访问权限"></a>访问权限</h2><ul><li>public：可被任意实体访问；</li><li>protected：只允许本类及子类的成员函数访问；</li><li>private：只允许本类的成员函数访问；</li></ul><h2 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h2><ul><li>创建对象时，自动调用构造函数，不能在程序中直接调用，可有任意类型参数，但不能有返回类型；</li><li>构造函数作用：为对象分配空间、为数据成员赋初值、请求其他资源；</li><li>构造函数工作：初始化虚函数表、建立基类对象、建立非静态数据成员对象、安置虚基类对象信息、执行构造函数体中的代码；</li><li>若一个类中没有定义构造函数，编译器会自动生成不带参数的默认构造函数，格式为：</li></ul><pre><code>&lt;类名&gt;::&lt;默认构造函数名&gt;(){}</code></pre><h2 id="析构函数"><a href="#析构函数" class="headerlink" title="析构函数"></a>析构函数</h2><ul><li>析构函数作用：清除对象、释放内存；</li><li>析构函数工作：执行析构函数中的代码、将对象占据的存储空间归还系统、做公共及用户要求的善后工作；</li><li>析构函数无参数和返回值，一个类中只能定义一个析构函数，故不能重载，格式为：</li></ul><pre><code>~&lt;类名&gt;();</code></pre><h2 id="内存布局"><a href="#内存布局" class="headerlink" title="内存布局"></a>内存布局</h2><ul><li>全局数据区：存放全局变量、静态数据、常量；</li><li>代码区：存放类成员函数、其他函数代码；</li><li>栈区：存放局部变量、函数参数、返回数据、返回地址；</li><li>堆区：自由存储区；</li></ul><h2 id="运算符重载重载形式"><a href="#运算符重载重载形式" class="headerlink" title="运算符重载重载形式"></a>运算符重载重载形式</h2><ul><li>重载为类的成员函数，参数个数比原来的运算数少一个</li></ul><pre><code>&lt;函数类型&gt; operator &lt;运算符&gt; (&lt;形参列表&gt;){&lt;函数体&gt;;}</code></pre><ul><li>重载为类的友元函数，参数个数与原运算数个数一样多；</li></ul><pre><code>friend &lt;函数类型&gt; operator &lt;运算符&gt; (&lt;形参列表&gt;){&lt;函数体&gt;;}</code></pre><ul><li>函数重载：返回值类型可以相同可以不同，但形参列表一定不同；</li></ul><h2 id="静态数据成员"><a href="#静态数据成员" class="headerlink" title="静态数据成员"></a>静态数据成员</h2><ul><li>初始化格式：<code>&lt;类型&gt;&lt;类名&gt;::&lt;静态数据成员&gt;=&lt;值&gt;;</code></li><li>引用格式：<code>&lt;类名&gt;::&lt;静态数据成员&gt;;</code></li></ul><h2 id="继承方式"><a href="#继承方式" class="headerlink" title="继承方式"></a>继承方式</h2><ul><li>私有继承private：父类的公有成员和保护成员作为子类的的私有成员，且不能被子类的派生类访问；</li><li>公有继承public：父类的公有成员和保护成员作为子类的成员时，仍保持原有状态，父类私有成员仍为私有；</li><li>保护继承protected：父类的公有成员和保护成员成为子类的保护成员，且只能被他的派生类成员函数或友元访问，父类私有成员仍为私有；<br><img src="http://upload-images.jianshu.io/upload_images/9747350-52e4395e21e3025c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></li></ul><h2 id="派生类构造函数调用顺序："><a href="#派生类构造函数调用顺序：" class="headerlink" title="派生类构造函数调用顺序："></a>派生类构造函数调用顺序：</h2><ul><li>调用基类的构造函数，调用顺序按继承时说明的顺序；</li><li>调用子对象类的构造函数，调用顺序按在类中说明的顺序；</li><li>派生类构造函数体中内容；</li></ul><h2 id="函数模版"><a href="#函数模版" class="headerlink" title="函数模版"></a>函数模版</h2><pre><code>template &lt; 模板形参表 &gt;template &lt;typename T&gt;返回值类型 函数名（形式参数列表）{    函数体语句}例：template &lt;typename T&gt;void swap( T&amp; v1, T&amp; v2){    T temp;    temp = v1;    v1 = v2;    v2 = temp;}</code></pre><h2 id="虚函数"><a href="#虚函数" class="headerlink" title="虚函数"></a>虚函数</h2><ul><li>虚函数必须是类的成员函数，不能是友元，但可以是另一个类的友元，不能为全局函数，也不能为静态函数，析构函数可以为虚函数，但构造函数不能为虚函数；</li></ul><h2 id="变量初始化"><a href="#变量初始化" class="headerlink" title="变量初始化"></a>变量初始化</h2><ul><li>局部变量：定义时，系统不会进行初始化；</li><li>全局变量：定义时，系统自动初始化，</li></ul><p><img src="http://upload-images.jianshu.io/upload_images/9747350-09bf0e212ee6b7f8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1000" alt=""></p><h2 id="友元函数"><a href="#友元函数" class="headerlink" title="友元函数"></a>友元函数</h2><ul><li>在类中定义过，但不是成员函数，定义在类外部，但有权访问类中成员；</li></ul><h2 id="this指针"><a href="#this指针" class="headerlink" title="this指针"></a>this指针</h2><ul><li>只有成员函数才有this指针，友元函数没有this指针；</li></ul><h2 id="静态成员函数与普通成员函数区别："><a href="#静态成员函数与普通成员函数区别：" class="headerlink" title="静态成员函数与普通成员函数区别："></a>静态成员函数与普通成员函数区别：</h2><ul><li>静态成员函数没有this指针，只能访问静态成员（包括静态成员变量和静态成员函数）；</li><li>普通成员函数有this指针，可以访问类中任意成员，而静态成员函数无this指针；</li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 编程语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C/C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C语言知识点总结</title>
      <link href="/2019/10/02/c-yu-yan-zhi-shi-dian-zong-jie/"/>
      <url>/2019/10/02/c-yu-yan-zhi-shi-dian-zong-jie/</url>
      
        <content type="html"><![CDATA[<h3 id="Debug和Release版本比较"><a href="#Debug和Release版本比较" class="headerlink" title="Debug和Release版本比较"></a>Debug和Release版本比较</h3><ul><li>Debug附加了许多调试信息，主要用于调试，故文件大；</li><li>Release是经过优化后的版本，去掉了调试信息，代码进行了优化，故文件较小，且编译速度快过Debug，用于发布平台的配置管理器的设置；</li></ul><h3 id="32位与64位"><a href="#32位与64位" class="headerlink" title="32位与64位"></a>32位与64位</h3><ul><li>32位，地址为32位，最大使用内存4G，只能运行32位的数据；</li><li>64位，地址为64位，既可以运行32位的数据，也可以运行64位的数据；</li></ul><h3 id="指针"><a href="#指针" class="headerlink" title="指针"></a>指针</h3><ul><li>指针是个量，对应一块内存区域；</li><li>指针存储的是某个内存单元的地址；</li><li>访问方式：<pre><code>    1、直接访问：按变量地址存取变量值，取地址符&amp;；    2、间接访问：通过存放变量地址的变量去访问变量，间接运算符*；</code></pre></li><li>在函数中改变一个外部变量，需要变量的地址；</li><li>若是数据，需要指向数据的指针存储数据的地址；</li><li>若是指针，需要指向指针的指针存用户指针的地址；</li></ul><h3 id="数组与指针"><a href="#数组与指针" class="headerlink" title="数组与指针"></a>数组与指针</h3><ul><li>p[i]等价于*(p+i)，&amp;p[i]等价于p+i;</li><li>a[i][j]等价于*(*(a+i)+j)，&amp;a[i][j]等价于*(a+i)+j， a[i]等价于*(a+i)；</li><li>行数组指针定义方法：数据类型（*指针变量名）[二维数组列数]；</li><li>二维数组地址不可变化，数据可以变化，可以在不修改地址的情况下管理数据，指针数组指向的数据不可变化，但地址可以变化，在不修改数据的情况下查看数据；</li><li>三维数组与指针，A[i][j][k]的三种表达形式：*(A[i][j]+k)、*(*(A[i]+j)+k)、*(*(*(A+i)+j)+k)；</li></ul><h3 id="函数与指针"><a href="#函数与指针" class="headerlink" title="函数与指针"></a>函数与指针</h3><ul><li>若在程序中定义了一个函数，在编译时，编译系统为函数代码分配一段存储空间，这段存储空间的起始地址，称为这个函数的指针，int(*p)(int, int)，代表定义p是指向函数的指针变量，可以指向类型为整形且有两个整形参数的函数；</li><li>定义返回值为指针值的函数的一般形式：类型名 *函数名（参数列表）；</li></ul><h3 id="malloc和free函数"><a href="#malloc和free函数" class="headerlink" title="malloc和free函数"></a>malloc和free函数</h3><ul><li>动态内存分配，无法知道内存具体位置时，想要绑定真正的内存空间，则要用到动态分配内存，原型为extern void* malloc(unsigned int size)，空指针可以转换为任何类型的指针，size仅仅是申请字节的大小，并不管申请的内存块中存储的数据类型，故申请内存的长度需通过“长度 x sizeof（类型）”的方式给出，使用完之后要用free释放内存；</li><li>一个类型的指针包含三个信息：地址、步长、内容如何解析；</li><li>在栈区开辟一段内存，系统会自己回收，在堆区开辟一段内存，需要手动用free释放；</li></ul><h3 id="calloc和realloc函数"><a href="#calloc和realloc函数" class="headerlink" title="calloc和realloc函数"></a>calloc和realloc函数</h3><ul><li>calloc原型：void* calloc（unsigned int num，unsigned int size），num：对象个数，size：对象占据的内存字节数，功能是为已经分配的内存重新分配空间并复制内容，会自动将内存初始化为0；</li><li>realloc原型：void<em>realloc（void</em> ptr，unsigned int size），ptr：已分配的内存地址，size：重新分配的字节数</li></ul><h3 id="内存分区"><a href="#内存分区" class="headerlink" title="内存分区"></a>内存分区</h3><ul><li>C/C++中，内存分为：堆、栈、自由存储区、全局/静态存储区、常量存储区；</li><li>堆：由new分配的内存块，一般对应一个delete，若没用释放，则程序结束后操作系统自动回收；</li><li>栈：编译器需要的时候分配，不需要时自动清楚的变量的存储区，通常是局部变量、函数参数等；</li><li>自由存储区：由malloc等分配的内存块，必须用free释放；</li><li>全局存储区：全局变量和静态变量的存储区域，未初始化的两者在相邻存的另一块区域，程序结束后自动释放；</li><li>常量存储区：存放常量，不可修改；</li></ul><h3 id="sizeof和strlen"><a href="#sizeof和strlen" class="headerlink" title="sizeof和strlen"></a>sizeof和strlen</h3><ul><li>实例</li></ul><pre><code>#include &lt;iostream&gt;#include &lt;string.h&gt;int main(){    char str[10] = "hello";    cout &lt;&lt; sizeof(str) &lt;&lt;endl &lt;&lt; sizeof("hello")&lt;&lt; endl &lt;&lt; str(str)&lt;&lt; endl;    system("pause");    return 0;}</code></pre><ul><li>结果：</li></ul><p><img src="http://upload-images.jianshu.io/upload_images/9747350-6aee95a3e2f42b7f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><ul><li>结论：对一个数组字符串，sizeof不管是否初始化，只输出其预留内存大小，而strlen()输出初始化后的字符串所占内存大小，不含’\0’；</li></ul><h3 id="gets和scanf"><a href="#gets和scanf" class="headerlink" title="gets和scanf"></a>gets和scanf</h3><ul><li>gets遇到换行符表示结束，而scanf遇到空格、制表符、换行则表示结束；</li></ul><h3 id="Unicode字符问题"><a href="#Unicode字符问题" class="headerlink" title="Unicode字符问题"></a>Unicode字符问题</h3><ul><li>char字符串可显示汉字，但字符不可以，字符连在一起用%c%c可以输出一个汉字；</li></ul><h3 id="结构体"><a href="#结构体" class="headerlink" title="结构体"></a>结构体</h3><ul><li>结构体引用方式：结构体数组名[下标].成员名；</li><li>结构体指针变量引用成员形式：(*结构体指针名).成员名、结构体指针名-&gt;成员名、结构体变量名.成员名；</li></ul><h3 id="结构体字节对齐机制"><a href="#结构体字节对齐机制" class="headerlink" title="结构体字节对齐机制"></a>结构体字节对齐机制</h3><ul><li>结构体变量大小是能够被其最宽基本类型成员的大小所整除；</li><li>结构体每个成员相对于结构体首地址的偏移量都是成员大小的整数倍，若有需要编译器会在成员之间加上填充字节；</li><li>结构体总大小为结构体最宽基本类型成员大小的整数倍，若有需要编译器会在最末一个成员之后加上填充字节；</li></ul><h3 id="共同体union"><a href="#共同体union" class="headerlink" title="共同体union"></a>共同体union</h3><ul><li>使几个不同类型的变量共占一段内存(相互覆盖)，长度=最长成员所占字节数，不能同时对所有成员初始化；</li></ul><h3 id="深拷贝与浅拷贝"><a href="#深拷贝与浅拷贝" class="headerlink" title="深拷贝与浅拷贝"></a>深拷贝与浅拷贝</h3><ul><li>深拷贝：根据指针指向的值，重新申请内存，再以此将指针指向内容复制过来，有相互独立的内存空间，一般复制构造函数和strcpy等函数都是深拷贝；</li><li>浅拷贝：把对象（结构）里的值完全复制给另一个对象（结构），对于地址也是照抄，类的默认复制构造函数是将类中非静态成员变量逐个复制，是浅拷贝；</li></ul><h3 id="文件分类"><a href="#文件分类" class="headerlink" title="文件分类"></a>文件分类</h3><h5 id="按逻辑"><a href="#按逻辑" class="headerlink" title="按逻辑"></a>按逻辑</h5><ul><li>记录文件：具有一定结构的记录组成（定长和不定长）；</li><li>流式文件：由一个个字符（字节）数据顺序组成；<h5 id="按存储介质"><a href="#按存储介质" class="headerlink" title="按存储介质"></a>按存储介质</h5></li><li>普通文件：存储介质文件（磁盘、磁带等）；</li><li>设备文件：非存储介质（键盘、显示器、打印机等）；<h6 id="按数据组织形式"><a href="#按数据组织形式" class="headerlink" title="按数据组织形式"></a>按数据组织形式</h6></li><li>文本文件：ASXII文件，每个字节存放一个字符的ASCII码；</li><li>二进制文件：数据按其在内存中的存储形式原样存放；</li></ul><h3 id="文件处理方法"><a href="#文件处理方法" class="headerlink" title="文件处理方法"></a>文件处理方法</h3><ul><li>缓冲文件系统：高级文件系统，系统自动为正在使用的文件开辟内存缓冲区和非缓冲文件系统；</li><li>低级文件系统：由用户在程序中为每个文件设定缓冲区；</li></ul><h3 id="fscanf和fprintf函数"><a href="#fscanf和fprintf函数" class="headerlink" title="fscanf和fprintf函数"></a>fscanf和fprintf函数</h3><ul><li>两者遇到空格或换行时结束；</li></ul><h3 id="文件型结构体"><a href="#文件型结构体" class="headerlink" title="文件型结构体"></a>文件型结构体</h3><pre><code>struct _iobuf {char *_ptr;//当前缓冲区内容指针int   _cnt;//缓冲区还有多少个字符char *_base;//缓冲区的起始地址int   _flag;//文件流的状态，是否错误或者结束int   _file;//文件描述符int   _charbuf;//双字节缓冲，缓冲2个字节int   _bufsiz;//缓冲区大小char *_tmpfname;//临时文件名};</code></pre><h3 id="fopen打开模式"><a href="#fopen打开模式" class="headerlink" title="fopen打开模式"></a>fopen打开模式</h3><ul><li>只读模式”r”打开文件，该文件必须存在，否则打开失败，r+,rb,rb+,rt,rt+模式打开文件，文件不存在也会失败；</li><li>只写模式”w”打开，文件存在则长度清0，不存在则建立文件，w+,wb,wb+,wt,wt+模式打开文件，文件不存在则建立文件；</li><li>a以附加的方式打开只写文件，若文件不存在，则建立文件，存在则在文件尾部添加数据，a+以附加的方式打开可读写文件，不存在则建立文件，存在则写入数据到文件尾，at二进制数据的追加，不存在则创建，只能写、at+读写打开一个文本文件，允许读或在文本末追加数据，ab二进制数据的追加，不存在则创建，只能写；</li></ul><h3 id="阻塞模式和非阻塞模式"><a href="#阻塞模式和非阻塞模式" class="headerlink" title="阻塞模式和非阻塞模式"></a>阻塞模式和非阻塞模式</h3><ul><li>非阻塞模式，会引起宕机，会一直执行；</li></ul><pre><code>system("start notepad");</code></pre><ul><li>阻塞模式，不会引起宕机，执行一步后才能执行下一步；</li></ul><pre><code>system("notepad");</code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 编程语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C/C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java知识点总结-3</title>
      <link href="/2019/10/02/java-zhi-shi-dian-zong-jie-3/"/>
      <url>/2019/10/02/java-zhi-shi-dian-zong-jie-3/</url>
      
        <content type="html"><![CDATA[<h2 id="抽象类"><a href="#抽象类" class="headerlink" title="抽象类"></a>抽象类</h2><ul><li>使用规则<ul><li>abstract定义抽象类；</li><li>abstract定义抽象方法，只有声明，不需要实现；</li><li>包含抽象方法的类是抽象类；</li><li>抽象类中可以包含普通方法，也可以没有抽象方法；</li><li>抽象类不能直接创建，可以定义引用变量；</li></ul></li></ul><h2 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h2><ul><li>定义：一种特殊的类，由全局常量和公共的抽象方法所组成；</li><li>类是一种具体实现体，而接口定义了某一批类所要遵守的规范，接口不关心这些类的内部数据，也不关心这些类中方法的实现细节，它只规定这些类中必须提供某些方法；</li></ul><p><img src="http://upload-images.jianshu.io/upload_images/9747350-43670d671624dbfc?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"> </p><ul><li>接口使用：一个类可以实现一个或多个接口，实现接口使用implements关键字。Java中一个类只能继承一个父类，可以通过多个接口做补充；</li></ul><p><img src="http://upload-images.jianshu.io/upload_images/9747350-984df175a489393a?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><h2 id="UML"><a href="#UML" class="headerlink" title="UML"></a>UML</h2><ul><li>定义：统一建模语言或标准建模语言，是一个支持模型化和软件系统开发的图形化语言，为软件开发的所有阶段提供模型化和可视化支持；</li></ul><h2 id="异常"><a href="#异常" class="headerlink" title="异常"></a>异常</h2><ul><li>处理运行时异常时，采用逻辑去合理规避同时辅助try-catch处理；</li><li>在多重catch块后面，可以加一个catch(Exception)来处理可能被遗漏的异常；</li><li>对于不确定的代码，也可以加上try-catc，处理潜在的异常；</li><li>尽量去处理异常，切忌只是简单的调用printStackTrace()去打印输出；</li><li>具体如何处理异常，要根据不用的业务需求和异常类型去决定；</li><li>尽量天剑finally语句块去释放占用的资源；</li></ul><h2 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h2><ul><li>String对象创建后不能被修改，是不可变的，所谓的修改其实是创建了新的对象，所指向的内存空间不同；</li><li>每次new一个字符串就是产生了一个新对象，即便两个字符串的内容相同，使用”==”比较时也为<code>false</code>，若只需比较内容是否相同，应使用<code>eauals()</code>方法；</li></ul><p><img src="http://upload-images.jianshu.io/upload_images/9747350-e286923822e8edd4?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="String类常用方法"></p><ul><li><code>==</code>和<code>equals()</code>的区别<ul><li><code>==</code>判断两个字符串在内存中首地址是否相同，即判断是否同一个字符串对象；</li><li><code>equals</code>：比较存储在两个字符串对象中的内容是否一致；</li></ul></li><li>StringBuffer是线程安全的，而StringBuilder则没有实现线程安全功能，所以性能更高；</li></ul><h2 id="包装类"><a href="#包装类" class="headerlink" title="包装类"></a>包装类</h2><ul><li>基本类型和包装类之间的对应关系：</li></ul><p><img src="http://upload-images.jianshu.io/upload_images/9747350-638245ec883cc52c?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><ul><li><p>包装类提供的两大类</p><ul><li>将本类型和其他基本类型进行转换的方法；</li><li>将字符串和本类型及包装类互相装换的方法；</li></ul></li><li><p>装箱：把基本类型转换成包装类，使其具有对象的性质，又可分为手动装箱和自动装箱；</p></li><li><p>拆箱：把包装类对象转换程基本类型的值，分为手动拆箱和自动拆箱；</p></li><li><p>基本类型转换为字符串的三种方法：</p><ul><li>使用包装类的<code>toString()</code>方法；</li><li>使用String类的<code>valueof()</code>方法；</li><li>用一个空字符串加上基本类型，得到的就是基本数据类型对应的字符串；</li></ul></li><li><p>将字符串转换为基本类型的两种方法：</p><ul><li>调用包装类的<code>parseXxx</code>静态方法；</li><li>调用包装类的<code>valueOf()</code>方法转换为基本类型的包装类，会自动拆箱；</li></ul></li></ul><h2 id="时间"><a href="#时间" class="headerlink" title="时间"></a>时间</h2><ul><li>调用<code>SimpleDateFormat</code>对象的<code>parse()</code>方法时可能会出现转换异常，即ParseException，因此需要进行异常处理；</li><li>使用Date类时需要导入<code>java.util</code>包，使用<code>SimpleDateFormat</code>时需要导入<code>java.text</code>包；</li><li>调用<code>Calendar</code>获取月份时，月份是从<code>0</code>开始的；</li></ul><p><img src="http://upload-images.jianshu.io/upload_images/9747350-7d6cc94dfde0f360?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><blockquote><p>###Math类</p></blockquote><ul><li><code>Math</code>位于<code>java.lang</code>包中，包含用于执行基本数学运算的方法，类中所有方法懂事静态方法，可以直接使用<code>类名.方法名()</code>；</li></ul><p><img src="http://upload-images.jianshu.io/upload_images/9747350-c5f27295fd8a698b?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><h2 id="集合框架"><a href="#集合框架" class="headerlink" title="集合框架"></a>集合框架</h2><ul><li>定义：一种工具类，就像是容器，储存任意数量的具有共同属性的对象；</li><li>作用<ul><li>在类的内部，对数据进行组织；</li><li>简单而快速的搜索大数量的条目；</li><li>有的集合接口，提供一系列排列有序的元素，且可以在序列中间快速插入或者删除有关元素； </li><li>有的集合接口，提供映射关系，可以通过关键字(key)去快速查找到对应的唯一对象，而这个关键字可以是任意类型；</li></ul></li><li>数组与集合区别<ul><li>数组长度固定，集合长度可变；</li><li>数组只能通过下标访问元素，类型固定，而有的集合可以通过任意类型查找所映射的具体对象；</li></ul></li></ul><p><img src="http://upload-images.jianshu.io/upload_images/9747350-aaa99fdeb8c71cc9?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><ul><li>Collection接口<ul><li>是List、Set、Queue接口的父接口；</li><li>定义了可用于操作List、Set、Queue的方法–增删改查；</li></ul></li><li>List接口及其实现类–ArrayList<ul><li>List是元素有序且可重复的集合，被称为序列；</li><li>List可以精确控制每个元素的插入位置，或删除某个位置元素；</li><li>ArrayList–数组序列，是List的一个重要实现类；</li><li>ArrayList底层由数组实现；</li></ul></li><li>Map接口<ul><li>Map提供了一种映射关系，其中的元素是以键值对<code>(key-value)</code>的形式存储的，能够实现根据key快速查找value；</li><li>Map中的键值对以Entry类型的对象实例形式存在；</li><li>键(key)不可以重复，value可以；</li><li>每个键最多只能映射到一个值；</li><li>Map接口提供了分别返回key值集合、value值集合以及Entry(键值对)集合的方法；</li><li>Map支持泛型，形如：Map&lt;K,V&gt;；</li></ul></li><li>HashMap类<ul><li>HashMap是Map的一个重要实现类，也是最常用的，基于哈希表实现；</li><li>HashMap中的Entry对象时无序排列的；</li><li>Key值和value值都可以为null，但是一个HashMap只能有一个key值为null的映射(key值不可重复)；</li></ul></li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 编程语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java知识点总结-2</title>
      <link href="/2019/10/02/java-zhi-shi-dian-zong-jie-2/"/>
      <url>/2019/10/02/java-zhi-shi-dian-zong-jie-2/</url>
      
        <content type="html"><![CDATA[<h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><h4 id="一维数组"><a href="#一维数组" class="headerlink" title="一维数组"></a>一维数组</h4><ul><li>声明<ul><li><code>数据类型[] 数组名；</code></li><li><code>数据类型 数组名[]；</code></li></ul></li><li>分配空间<ul><li><code>数组名 = new 数据类型 [数组长度]；</code></li></ul></li><li>可以在声明的同时分配空间，分配空间之后数组中才能放数据，数组元素都是通过下标来访问，声明数组的同时赋值时不能指定数组长度；</li><li>foreach：<code>for(元素类型 元素变量：遍历对象){ 执行的代码；}；</code></li></ul><h4 id="二维数组"><a href="#二维数组" class="headerlink" title="二维数组"></a>二维数组</h4><ul><li>声明并分配空间：<code>数据类型[][]  数组名 = new 数据类型 [行的个数][列的个数]；</code><br><img src="http://upload-images.jianshu.io/upload_images/9747350-e39f276df7b6fa68?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></li><li>在定义二维数组时可以只指定行的个数，然后再为每一行分别指定列的个数，若每行列数不同，则创建的是不规则的二维数组；</li></ul><h2 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h2><ul><li><p>定义语法：<code>访问修饰符 返回值类型 方法名(参数列表){  方法体；}；</code></p></li><li><p>分类：</p><ul><li>无参无返回值方法；</li><li>无参带返回值方法；</li><li>带参无返回值方法；</li><li>带参带返回值方法；<ul><li>调用方法：<code>对象名.方法名()</code></li><li>调用带参方法时，必须保证实参的数量，类型，顺序和形参一一对应；</li><li>调用方法时，实参不需要指定数据类型；</li><li>方法的参数既可以是基本数据类型，也可以是引用数据类型，当有多个参数时，多个参数间以逗号分割；</li><li>重载：在同一个类中，方法名相同，方法参数个数、顺序或类型不同称为方法的重载，与方法的修饰符或返回值无关系；</li></ul></li></ul></li></ul><h2 id="类与对象"><a href="#类与对象" class="headerlink" title="类与对象"></a>类与对象</h2><ul><li>类是模子，确定对象将拥有的特征(属性)和行为(方法)，特点：类是对象的类型，具有相同属性和方法的一组对象的集合；</li><li>定义类的步骤：<ul><li>定义类名；</li><li>编写类的属性；</li><li>编写类的方法；</li></ul></li><li>使用对象的步骤：<ul><li>创建对象：<code>类名 对象名 = new 类名()；</code></li><li>使用对象：<code>引用对象的属性：对象名.属性；</code></li></ul></li></ul><h2 id="成员变量与局部变量"><a href="#成员变量与局部变量" class="headerlink" title="成员变量与局部变量"></a>成员变量与局部变量</h2><ul><li>成员变量：在类中定义，用来描述对象将要有什么，既可被本类的方法使用，还能供其他类的方法使用；</li><li>局部变量：在类的方法中定义，在方法中临时保存数据，只能在当前方法中使用；</li><li>区别：<ul><li>局部变量作用域仅限于定义它的方法，成员变量的作用域在整个类内部都是可见的；</li><li>成员变量有初始值，但局部变量未赋予初始值；</li><li>不同方法中可以有同名局部变量，同一方法中，不允许有同名局部变量；</li><li>两者重名时，局部变量优先级更高；</li></ul></li></ul><h2 id="构造方法"><a href="#构造方法" class="headerlink" title="构造方法"></a>构造方法</h2><ul><li>使用new+构造方法，创建一个新对象；</li><li>构造方法是定义在Java类中的一个用来初始化对象的方法，构造方法与类同名且无返回值；</li><li>当无指定构造方法时，系统会自动添加无参的构造方法；</li><li>当有指定构造方法，无论是有参、无参的构造方法，都不会自动添加无参的构造方法；</li><li>构造方法的重载：方法名相同，但参数不同的多个方法，调用时会自动根据不同的参数选择相应方法；</li><li>构造方法不但可以给对象的属性赋值，还可以保证给对象的属性赋一个合理的值；</li></ul><h2 id="static"><a href="#static" class="headerlink" title="static"></a>static</h2><ul><li>static修饰的成员称为静态成员或类成员，属于整个类所有，而不是某个对象所有，即被类的所有对象所共享。静态成员可以使用类名直接访问，也可以使用对象名进行访问，static可以修饰变量、方法和代码块；</li><li>静态成员属于整个类，当系统第一次使用该类时，就会为其分配内存空间直到该类别卸载才会进行资源回收；</li><li>static修饰的方法称为静态方法或类方法，静态方法中可以直接调用同类中的静态成员，但不能直接调用非静态成员，如果想要在静态方法中调用非静态变量，可以通过创建类的对象，然后通过对象来访问非静态变量；</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloWorld</span><span class="token punctuation">{</span>    String name <span class="token operator">=</span> <span class="token string">"村雨"</span><span class="token punctuation">;</span>    <span class="token keyword">static</span> String hobby <span class="token operator">=</span> <span class="token string">"basketball"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"姓名"</span> <span class="token operator">+</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"爱好"</span> <span class="token operator">+</span> hobby<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="http://upload-images.jianshu.io/upload_images/9747350-dbc8da50a41f62dd?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><ul><li>普通成员方法中，可以直接访问同类的非静态变量和静态变量；</li></ul><p><img src="http://upload-images.jianshu.io/upload_images/9747350-6f990b75f477e757?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><ul><li>静态方法中不能直接调用非静态方法，需要通过对象来访问非静态方法；</li></ul><p><img src="http://upload-images.jianshu.io/upload_images/9747350-53423f3c52d8b389?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><ul><li>静态初始化块只在类加载时执行，且只执行一次，同时静态初始化块只能给静态变量复制，不能初始化普通的成员变量；</li></ul><h2 id="面向对象特点"><a href="#面向对象特点" class="headerlink" title="面向对象特点"></a>面向对象特点</h2><h4 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h4><ul><li>概念：将类的某些信息隐藏在类内部，不允许外部程序直接访问，而是通过该类提供的方法来实现对隐藏信息的操作和访问；</li><li>好处：只能通过规定的方法访问数据，隐藏类的实例细节，方便修改和实现；</li><li>实现步骤：<ul><li>修改属性可见性，设为private；</li><li>创建getter/setter方法用于属性读写；</li><li>在getter/setter方法中加入属性控制语句，对属性值的合法性进行判断；</li></ul></li></ul><h4 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h4><ul><li><p>Java中是单继承；</p></li><li><p>优点：</p><ul><li>子类拥有父类的所有属性和方法；</li><li>实现代码复用；</li></ul></li><li><p>重写：返回值类型，方法名，参数类型及个数都要与父类继承的方法相同，才叫方法的重写；</p></li><li><p>继承的初始化顺序</p><ul><li>初始化父类再初始化子类；</li><li>先执行初始化对象中属性，再执行构造方法中的初始化；</li></ul></li><li><p>final</p><ul><li>修饰类，则该类不允许被继承；</li><li>修饰方法，则该方法不允许被覆盖(重写)；</li><li>修饰属性：则该类属性不会进行隐式初始化(类的初始化属性必须有值)活在构造方法中赋值(但只能选其一)；</li><li>修饰变量，则该变量的值只能赋一次值，即变为常量；</li></ul></li><li><p>super</p><ul><li>子类构造过程中必须调用父类构造方法；</li><li>若子类构造方法中既没有显示调用父类构造方法，而父类有没有无参的构造方法，则编译出错；</li><li>若显式调用构造方法，必须在子类构造方法的第一行；</li><li>若子类构造方法中未显示调用父类的构造方法，则系统默认调用父类无参的构造方法；</li></ul></li><li><p>equals()方法：比较的是对象的引用是否指向同一块内存地址；</p></li></ul><h4 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h4><ul><li>引用多态<ul><li>父类引用可以指向本类对象；</li><li>父类引用可以指向子类对象；</li></ul></li><li>方法多态<ul><li>创建本类对象时，调用的方法为本类方法；</li><li>创建子类对象时，调用的方法为子类重写的方法或者继承的方法；</li></ul></li><li>引用类型转换<ul><li>向上类型转换(隐式/自动类型转换)，是小类型到大类型的转换，无风险；</li><li>向下类型转换(强制类型转换)，是大类型到小类型，存在风险；</li><li>instanceof运算符，用来解决引用对象的类型，避免类型转换的安全性问题；</li></ul></li></ul><h2 id="包"><a href="#包" class="headerlink" title="包"></a>包</h2><ul><li>作用：<ul><li>管理Java文件；</li><li>解决同名文件冲突；</li></ul></li><li>必须放在Java源程序的第一行，包名间可以使用<code>.</code>号隔开；</li><li>系统中的包<ul><li>java.(功能).(类)</li><li>java.lang.(类)  包含Java语言基础的类；</li><li>java.util.(类)  包含Java语言中各种工具类；</li><li>java.io.(类)  包含输入、输出相关功能的类；</li></ul></li></ul><h2 id="修饰符"><a href="#修饰符" class="headerlink" title="修饰符"></a>修饰符</h2><p><img src="http://upload-images.jianshu.io/upload_images/9747350-6950e2dd2ca27f1f?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><h2 id="内部类"><a href="#内部类" class="headerlink" title="内部类"></a>内部类</h2><ul><li>定义：定义在另一个类里面的类，与之对应，包含内部类的类被称为外部类；</li><li>作用<ul><li>提供更好的封装，可把内部类隐藏在外部类之内，不允许同一个包中的其他类访问该类；</li><li>内部类的方法可以直接访问外部类的所有数据，包括私有的数据；</li><li>内部类所实现的功能使用外部类同样可以实现，只是有时使用内部类更方便；</li></ul></li><li>分类<ul><li>成员内部类；</li><li>静态内部类；</li><li>方法内部类；</li><li>匿名内部类；</li></ul></li><li>调用方式</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo</span><span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Test test <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Demo demo <span class="token operator">=</span> test<span class="token punctuation">.</span><span class="token keyword">new</span> <span class="token class-name">Demo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>内部类 对象名 = 外部类对象.new 内部类();</code></pre><ul><li><p>内部类中方法可以直接访问外部类中的数据，而不受访问控制符的影响，但外部类是不能使用内部类的成员和方法；</p></li><li><p>若外部类和内部类具有相同的成员变量或方法，内部类默认访问自己的成员变量或方法，若要访问外部类的成员变量，可以使用this关键字；<br><img src="http://upload-images.jianshu.io/upload_images/9747350-42ecc9a1e6e191db?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p></li><li><p>静态内部类</p><ul><li>特点<ul><li>静态内部类不能直接访问外部的非静态成员，通过<code>new 外部类().成员</code>的方式访问；</li><li>若外部类的静态成员与内部类的成员名称相同，可通过“类名.静态成员”访问外部类的静态成员；若外部类的静态成员与内部类的成员名称不同，则可通过”成员名”直接调用外部类的静态成员；</li><li>创建静态内部类的对象时，不需要内部类的对象，可直接创建<code>内部类 对象名 = new 内部类();</code></li></ul></li></ul></li></ul><p><img src="http://upload-images.jianshu.io/upload_images/9747350-9bf85bc6ad25fa9a?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><ul><li>方法内部类：内部类定义在外部类的方法中，方法内部类只在该方法的内部可见，即只能在该方法中使用，由于方法内部类不能在外部类的方法以外的地方使用，因此方法内部类不能使用访问控制服和static修饰符；</li></ul><p><img src="http://upload-images.jianshu.io/upload_images/9747350-d41a0bb96f73f7e7?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 编程语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java知识点总结-1</title>
      <link href="/2019/10/02/java-zhi-shi-dian-zong-jie-1/"/>
      <url>/2019/10/02/java-zhi-shi-dian-zong-jie-1/</url>
      
        <content type="html"><![CDATA[<ul><li>JVM(Java Virtual Machine)：源文件-&gt;编译器-&gt;字节码文件-&gt;解释器-&gt;程序；</li><li>JDK:Java Development Kit，Java开发工具包；</li><li>JRE:Java Runtime Environment，Java运行时环境；</li><li>Java是一种强类型语言，即它所存储的数据都是有类型的，且必须在编译时就确定其类型；<h3 id="数据类型："><a href="#数据类型：" class="headerlink" title="数据类型："></a>数据类型：</h3><ul><li>基本数据类型;</li><li>数值型：<ul><li>整数类型：byte，short，int，long；</li><li>浮点型：float，double；</li></ul></li><li>字符型：char；</li><li>布尔型：boolean；</li></ul></li></ul><p><img src="http://upload-images.jianshu.io/upload_images/9747350-6af0245f95206ead?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><ul><li>引用数据类型：<ul><li>类；</li><li>接口；</li><li>数组；</li></ul></li></ul><p><img src="http://upload-images.jianshu.io/upload_images/9747350-f9f6f2216f98a90c?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><h3 id="变量使用规则："><a href="#变量使用规则：" class="headerlink" title="变量使用规则："></a>变量使用规则：</h3><ul><li>先声明再使用；</li><li>可以在声明的同时进行初始化；</li><li>变量中每次只能赋一个值，但可以修改多次；</li><li>变量名使用中文无语法错误，但不建议使用；</li></ul><h3 id="自动类型转换需满足的条件"><a href="#自动类型转换需满足的条件" class="headerlink" title="自动类型转换需满足的条件"></a>自动类型转换需满足的条件</h3><ul><li>目标类型能与源类型兼容；</li><li>目标类型大于源类型；</li></ul><h3 id="常量"><a href="#常量" class="headerlink" title="常量"></a>常量</h3><ul><li>设定后在程序运行过程中不允许改变；</li><li>语法：final 数据类型 变量名 = 值；</li></ul><h3 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h3><ul><li>单行注释：//</li><li>多行注释：/*     */</li><li>文档注释：/**   */</li></ul><h3 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h3><ul><li>算数运算符；</li><li>赋值运算符；</li><li>比较运算符；</li><li>逻辑运算符；</li><li>条件运算符：语法形式：布尔表达式？表达式1：表达式2；</li></ul><h3 id="运算符优先级"><a href="#运算符优先级" class="headerlink" title="运算符优先级"></a>运算符优先级</h3><p><img src="http://upload-images.jianshu.io/upload_images/9747350-9ae019ea388631e1?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><h3 id="if…else"><a href="#if…else" class="headerlink" title="if…else"></a>if…else</h3><ul><li>单重if</li></ul><p><img src="http://upload-images.jianshu.io/upload_images/9747350-63faddddd4116d84?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><ul><li>多重if</li></ul><p><img src="http://upload-images.jianshu.io/upload_images/9747350-a6857f15c433a075?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><ul><li>嵌套if</li></ul><p><img src="http://upload-images.jianshu.io/upload_images/9747350-a337d8b762278c0c?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><h3 id="条件之switch"><a href="#条件之switch" class="headerlink" title="条件之switch"></a>条件之switch</h3><ul><li>switch后小括号中表达式的值必须是整形或字符型；</li><li>case后的值可以是常量数值，也可以是常量表达式；</li><li>case匹配后，执行匹配快中程序代码，若未遇到break会继续执行下一个的case块的内容，直到遇到break或switch语句块结束；</li></ul><h3 id="循环"><a href="#循环" class="headerlink" title="循环"></a>循环</h3><ul><li>while：特点是先判断，后执行；</li><li>do…while：特点是先执行，后判断，保证循环至少被执行一次；</li><li>for：语法：for(循环变量初始化；循环条件；循环变量变化){<br> 循环条件；<br>}</li><li>do…while循环结束的条件是while后的条件成立；</li><li>break：作用是终止整个循环体的执行；</li><li>continue：跳过循环体中剩余的语句并进行下一次循环；</li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 编程语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java设计模式</title>
      <link href="/2019/10/02/java-she-ji-mo-shi/"/>
      <url>/2019/10/02/java-she-ji-mo-shi/</url>
      
        <content type="html"><![CDATA[<h2 id="设计模式基础"><a href="#设计模式基础" class="headerlink" title="设计模式基础"></a>设计模式基础</h2><ul><li><h4 id="设计模式主要基于的面向对象设计的原则："><a href="#设计模式主要基于的面向对象设计的原则：" class="headerlink" title="设计模式主要基于的面向对象设计的原则："></a>设计模式主要基于的面向对象设计的原则：</h4><ul><li>程序到一个接口不用实现</li><li>有利于对继承对象组合；</li></ul></li><li><h4 id="设计模式用途："><a href="#设计模式用途：" class="headerlink" title="设计模式用途："></a>设计模式用途：</h4><ul><li>开发人员的通用平台；</li><li>最佳实践；<ul><li><h4 id="类型："><a href="#类型：" class="headerlink" title="类型："></a>类型：</h4></li></ul></li><li>创造模式：提供了一种创建对象而隐藏创建逻辑的方法，而非直接使用<code>new</code>来实例化对象；</li><li>结构模式：涉及类和对象组成，继承概念用于组成接口并定义方法组合对象以获得新功能；</li><li>行为模式：侧重于对象之间的通信；</li><li>J2EE模式：设计表示层，由<code>Sun Java Center</code>标识；</li></ul></li></ul><h2 id="创造设计模式"><a href="#创造设计模式" class="headerlink" title="创造设计模式"></a>创造设计模式</h2><ul><li><h4 id="工厂模式"><a href="#工厂模式" class="headerlink" title="工厂模式"></a>工厂模式</h4><ul><li>无创建逻辑暴露给客户端创建对象，使用一个通用接口引用新创建的对象；<ul><li>实现步骤：<ul><li>创建一个接口；</li><li>创建实现相同接口的具体类；</li><li>创建工厂根据给定信息生成具体类的对象；</li><li>使用工厂通过传递类型等信息来获取具体类的对象；</li><li>验证结果；</li></ul></li></ul></li></ul></li></ul><ul><li><h4 id="抽象工厂模式"><a href="#抽象工厂模式" class="headerlink" title="抽象工厂模式"></a>抽象工厂模式</h4><ul><li>接口负责创建相关对象的工厂，而不明确指定他们的类，每个生成的工厂可按照工厂模式提供对象；</li></ul></li><li><h4 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h4><ul><li>设计一个类，负责创建一个对象，同时确保只创建一个对象，类提供一种方法来访问它的唯一对象，可直接访问而不需要实例化类对象；</li></ul></li><li><h4 id="原型模式"><a href="#原型模式" class="headerlink" title="原型模式"></a>原型模式</h4><ul><li>涉及实现一个原型接口，只创建当前对象的克隆；</li></ul></li><li><h4 id="Builder模式"><a href="#Builder模式" class="headerlink" title="Builder模式"></a><code>Builder</code>模式</h4><ul><li>构造器逐步构建最终对象，此构造器独立于其他对象；</li></ul></li></ul><h2 id="结构设计模式"><a href="#结构设计模式" class="headerlink" title="结构设计模式"></a>结构设计模式</h2><ul><li><h4 id="适配器-Adapter-模式"><a href="#适配器-Adapter-模式" class="headerlink" title="适配器(Adapter)模式"></a>适配器(<code>Adapter</code>)模式</h4><ul><li>组合两个相互独立不兼容接口之间的桥梁，涉及一个单独的类，负责连接独立或不兼容接口的功能；</li></ul></li><li><h4 id="桥接-Bridge-模式"><a href="#桥接-Bridge-模式" class="headerlink" title="桥接(````Bridge```)模式"></a>桥接(````Bridge```)模式</h4><ul><li>定义与实现分离，涉及一个充当桥接的接口，这样使得具体类与接口实现者类无关；</li></ul></li><li><h4 id="组合模式"><a href="#组合模式" class="headerlink" title="组合模式"></a>组合模式</h4><ul><li>以同样的方式处理一组对象作为单个对象，根据树结构组成对象，以表示部分以及整个层次结构；</li></ul></li><li><h4 id="过滤器-条件-模式"><a href="#过滤器-条件-模式" class="headerlink" title="过滤器(条件)模式"></a>过滤器(条件)模式</h4><ul><li>使开发人员可以使用不同条件过滤一组对象，并通过逻辑操作以解耦方式将其链接；</li></ul></li><li><h4 id="装饰者-Decorator-模式"><a href="#装饰者-Decorator-模式" class="headerlink" title="装饰者(Decorator)模式"></a>装饰者(<code>Decorator</code>)模式</h4><ul><li>允许用户向现有对象添加新功能而不改变其结构，创建一个修饰器类用于包装原始类并提供附加功能，保持类方法签名完整；</li></ul></li><li><h4 id="外观-Facade-模式"><a href="#外观-Facade-模式" class="headerlink" title="外观(Facade)模式"></a>外观(<code>Facade</code>)模式</h4><ul><li>隐藏系统复杂性，并为客户端提供一个可以访问系统的接口，提供客户端所需的简化方法和委托调用现有系统类的方法；</li></ul></li><li><h4 id="享元-Flyweight-模式"><a href="#享元-Flyweight-模式" class="headerlink" title="享元(Flyweight)模式"></a>享元(<code>Flyweight</code>)模式</h4><ul><li>主要用于减少创建的对象数量，减少内存占用并提高性能，此模式尝试通过存储已存在的类似对象以重用，并在找不到所匹配的对象时创建新对象；</li></ul></li><li><h4 id="业务代理模式"><a href="#业务代理模式" class="headerlink" title="业务代理模式"></a>业务代理模式</h4><ul><li>常用于解耦表示层和业务层，用于减少层代码中的业务层代码的通信或远程查找功能，业务层中实体如下：<ul><li>客户端：表示层代码可以是<code>JSP</code>，<code>servlet</code>或<code>UI java</code>代码；</li><li>业务代理：为客户端实体提供对业务服务方法的访问的单入口点类；</li><li>查找服务：负责获得相关业务的实施和提供业务的委托对象业务对性爱难过的访问；</li><li>业务服务：具体类实现这个业务服务以提供实际的业务实现逻辑；</li></ul></li></ul></li></ul><h2 id="行为设计模式"><a href="#行为设计模式" class="headerlink" title="行为设计模式"></a>行为设计模式</h2><ul><li><h4 id="责任链模式"><a href="#责任链模式" class="headerlink" title="责任链模式"></a>责任链模式</h4><ul><li>为请求创建一系列接收者对象，将发送方与接收方分离，每个接收器中都包含着对另一个接收器的引用，若有一个对象不能处理请求，则将相同对象传递给下一个接收者；</li></ul></li><li><h4 id="命令模式"><a href="#命令模式" class="headerlink" title="命令模式"></a>命令模式</h4><ul><li>数据驱动设计模式，请求作为命令包装在一个对象下，并传递给调用器对象，调用者对象查找可以处理此命令的适当对象，并将命令传递到执行命令的相应对象；</li></ul></li><li><h4 id="解释器模式"><a href="#解释器模式" class="headerlink" title="解释器模式"></a>解释器模式</h4><ul><li>提供了一种评估计算语法或表达式的方法，设计实现一个表达式接口，用于解释一个指定的上下文，常用于SQL解析，符号处理引擎等；</li></ul></li><li><h4 id="迭代器模式"><a href="#迭代器模式" class="headerlink" title="迭代器模式"></a>迭代器模式</h4><ul><li>用于以顺序方式访问集合对象的元素，且不需知道其底层表示；</li></ul></li><li><h4 id="调解者-Mediator-模式"><a href="#调解者-Mediator-模式" class="headerlink" title="调解者(Mediator)模式"></a>调解者(<code>Mediator</code>)模式</h4><ul><li>用于减少多个对象或类之间的通信复杂性，提供一个中介类，用于处理不同类之间的所有通信，并支持通过松散耦合来维护代码；</li></ul></li><li><h4 id="备忘录模式"><a href="#备忘录模式" class="headerlink" title="备忘录模式"></a>备忘录模式</h4><ul><li>用于恢复一个对象以前的状态；</li></ul></li><li><h4 id="观察者模式"><a href="#观察者模式" class="headerlink" title="观察者模式"></a>观察者模式</h4><ul><li>在对象之间存在一对多关系时使用；</li></ul></li><li><h4 id="状态模式"><a href="#状态模式" class="headerlink" title="状态模式"></a>状态模式</h4><ul><li>类根据其状态改变而变，在这个模式中，我们创建表示各种状态的对象，以及随对象状态变化而行为变化的上下文对象；     </li></ul></li><li><h4 id="策略模式"><a href="#策略模式" class="headerlink" title="策略模式"></a>策略模式</h4><ul><li>此模式中，可在运行时更改类行为或其算法，创建表示各种策略对象和其行为根据其策略对象而变化的上下文对象；</li></ul></li><li><h4 id="模版模式"><a href="#模版模式" class="headerlink" title="模版模式"></a>模版模式</h4><ul><li>抽象类中公开了定义的方法/模版来执行它的方法，其子类可以根据需要重写方法实现，但调用方式与抽象类定义的方式相同；</li></ul></li><li><h4 id="访问者模式"><a href="#访问者模式" class="headerlink" title="访问者模式"></a>访问者模式</h4><ul><li>使用访问者类来改变元素类的执行算法，通过此方式，元素执行算法可随访问者变化而变化，根据每个模式，元素对象必须接受访问者对象，以便访问者对象处理对元素对元素对象的操作；</li></ul></li><li><h4 id="空对象模式"><a href="#空对象模式" class="headerlink" title="空对象模式"></a>空对象模式</h4><ul><li>在这个模式中，空对象将替换<code>NULL</code>对象实例的检查，而非检查一个空值，<code>NULL</code>对象反映一个无关的关系，还可以用于在数据不可用时提供默认行为，空对象模式创建一个抽象类，指定要执行的各种操作，扩展此类的具体类和一个<code>NULL</code>对象类，不提供此类的任何实现，且无需检查空值；</li></ul></li><li><h4 id="MVC模式"><a href="#MVC模式" class="headerlink" title="MVC模式"></a>MVC模式</h4><ul><li>模型：表示携带数据对象或<code>JAVA POJO</code>，若其数据改变也可以具有逻辑来更新控制器；</li><li>视图：表示模型包含的数据的可视化层；</li><li>控制器：对模型和视图都起作用，控制数据流进入模型对象，并在数据更改时更新视图，保持视图与模型分开，也就是处于视图与模型的中间层；</li></ul></li><li><h4 id="组合实体模式"><a href="#组合实体模式" class="headerlink" title="组合实体模式"></a>组合实体模式</h4><ul><li>用于<code>EJB</code>持久化机制，表示对象图的<code>EJB</code>实体<code>bean</code>，组合实体更新时，内部依赖对象<code>bean</code>将自动更新为有EJB实体bean管理，<code>Bean</code>参与者为：<ul><li>组合实体：主要的实体<code>bean</code>，可以是粗粒度的或可以包含用于持久性目的的粗粒度对象；</li><li>粗粒实体：包含依赖对象，有自己的生命周期；</li><li>依赖对象：是一个对象，取决于其持久度生命周期粗粒对象；</li><li>策略：表示如何实现复组合实体；</li></ul></li></ul></li><li><h4 id="数据访问对象模式"><a href="#数据访问对象模式" class="headerlink" title="数据访问对象模式"></a>数据访问对象模式</h4><ul><li>用于将低级数据访问<code>API</code>或操作与高级业务服务分离，模式的参与者为：<ul><li>数据访问对象接口：定义要对模型对象执行的标准操作；</li><li>数据访问对象具体类：负责从数据源获取数据，数据源可以是数据库/<code>xml</code>或任何其他存储机制；</li><li>模型对象或值对象：简单的<code>POJO</code>，包含用于存储使用<code>DAO</code>类检索的<code>get/set</code>方法；</li></ul></li></ul></li><li><h4 id="前端控制器模式"><a href="#前端控制器模式" class="headerlink" title="前端控制器模式"></a>前端控制器模式</h4><ul><li>用于提供集中式请求处理机制，以便所有请求由单个处理程序处理，可以执行请求的身份验证、授权、记录或跟踪，然后将请求传递到相应处理程序，包含的实体为：<ul><li>前端控制器：用于处理应用程序(基于Web或桌面)的各种请求的单个处理程序；</li><li>分发器：前端控制器可以使用将请求分派到相应的特定处理器的分派器对象；</li><li>视图：进行请求的对象；</li></ul></li></ul></li><li><h4 id="拦截过滤器模式"><a href="#拦截过滤器模式" class="headerlink" title="拦截过滤器模式"></a>拦截过滤器模式</h4><ul><li>过滤器：请求处理程序执行前或后执行某些任务的过滤器；</li><li>过滤器链：携带多个过滤器，并帮助在目标上以定义的顺序执行；</li><li>目标：请求处理程序；</li><li>过滤器管理器：管理过滤器和过滤器链；</li><li>客户端：向目标对象发送请求的对象；</li></ul></li><li><h4 id="服务定位模式"><a href="#服务定位模式" class="headerlink" title="服务定位模式"></a>服务定位模式</h4><ul><li>服务：将处理请求的实际服务，将在<code>JNDI</code>服务器中查找此类服务的引用；</li><li>上下文/初始上下文：<code>JNDI</code>上下文携带对用于查找目的的服务的引用；</li><li>服务定位器：通过<code>JNDI</code>查找缓存服务获得服务的单一联系点；</li><li>缓存：用于存储服务的引用以重用他们的缓存；</li><li>客户端：通过<code>ServiceLocator</code>调用服务的对象；</li></ul></li><li><h4 id="传输对象模式"><a href="#传输对象模式" class="headerlink" title="传输对象模式"></a>传输对象模式</h4><ul><li>业务对象：业务服务使用数据填充传输对象；</li><li>传输对象：具有仅设置/获取属性的方法的简单<code>POJO</code>；</li><li>客户端：请求或发送传输对象到业务对象；</li></ul></li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 编程语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java中的四大变量解析</title>
      <link href="/2019/10/02/java-zhong-de-si-da-bian-liang-jie-xi/"/>
      <url>/2019/10/02/java-zhong-de-si-da-bian-liang-jie-xi/</url>
      
        <content type="html"><![CDATA[<h2 id="导读"><a href="#导读" class="headerlink" title="导读"></a>导读</h2><p>学习Java的过程中，一开始很容易被这些各种变量绕晕，这篇博客主要介绍了这几种变量之间的关系和区别。</p><h2 id="例程"><a href="#例程" class="headerlink" title="例程"></a>例程</h2><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>cunyu<span class="token punctuation">.</span>demo<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//成员变量、实例变量</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//成员变量、实例变量</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> ID<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//成员变量、实例变量</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String school <span class="token operator">=</span> <span class="token string">"卡塞尔学院"</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//成员变量、静态变量(类变量)</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> String level <span class="token operator">=</span> <span class="token string">"SSS"</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//成员变量、静态变量(类变量)</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> age<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> ID<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setAge</span><span class="token punctuation">(</span><span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setId</span><span class="token punctuation">(</span><span class="token keyword">int</span> ID<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>ID <span class="token operator">=</span> ID<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">study</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            String subject1 <span class="token operator">=</span> <span class="token string">"屠龙"</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//局部变量</span>            String subject2 <span class="token operator">=</span> <span class="token string">"炼金术"</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//局部变量</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"学习科目： "</span> <span class="token operator">+</span> subject1 <span class="token operator">+</span> <span class="token string">"、"</span> <span class="token operator">+</span> subject2<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Demo demo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Demo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        demo<span class="token punctuation">.</span><span class="token function">setAge</span><span class="token punctuation">(</span><span class="token number">23</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        demo<span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span><span class="token number">14000001</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        demo<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"楚子航"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"ID: "</span> <span class="token operator">+</span> demo<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"Age: "</span> <span class="token operator">+</span> demo<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"Name: "</span> <span class="token operator">+</span> demo<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"主修科目： "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        demo<span class="token punctuation">.</span><span class="token function">study</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"学院："</span> <span class="token operator">+</span> Demo<span class="token punctuation">.</span>school<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"等级："</span> <span class="token operator">+</span> Demo<span class="token punctuation">.</span>level<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="各变量联系与区别"><a href="#各变量联系与区别" class="headerlink" title="各变量联系与区别"></a>各变量联系与区别</h2><ul><li><p>成员变量：作用范围是整个类，相当于C中的全局变量，定义在方法体和语句块之外，一般定义在类的声明之下；成员变量包括实例变量和静态变量(类变量)；</p></li><li><p>实例变量：独立于与方法之外的变量，无static修饰，声明在一个类中，但在方法、构造方法和语句块之外，数值型变量默认值为0，布尔型默认值为false，引用类型默认值为null；</p></li><li><p>静态变量(类变量)：独立于方法之外的变量，用static修饰，默认值与实例变量相似，一个类中只有一份，属于对象共有，存储在静态存储区，经常被声明为常量，调用一般是类名.静态变量名，也可以用对象名.静态变量名调用；</p></li><li><p>局部变量：类的方法中的变量，访问修饰符不能用于局部变量，声明在方法、构造方法或语句块中，在栈上分配，无默认值，必须经初始化；</p></li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 编程语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>常用IDE代码开头模板</title>
      <link href="/2019/10/02/chang-yong-ide-dai-ma-kai-tou-mo-ban/"/>
      <url>/2019/10/02/chang-yong-ide-dai-ma-kai-tou-mo-ban/</url>
      
        <content type="html"><![CDATA[<h1 id="Pycharm"><a href="#Pycharm" class="headerlink" title="Pycharm"></a>Pycharm</h1><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/env python</span><span class="token comment" spellcheck="true"># -*- coding: utf-8 -*-</span><span class="token comment" spellcheck="true"># @version : 1.0</span><span class="token comment" spellcheck="true"># @Time    : ${DATE} ${TIME}</span><span class="token comment" spellcheck="true"># @Author  : cunyu</span><span class="token comment" spellcheck="true"># @Email   : cunyu1024@foxmail.com</span><span class="token comment" spellcheck="true"># @Site    : https://cunyu1943.github.io</span><span class="token comment" spellcheck="true"># @File    : ${NAME}.py</span><span class="token comment" spellcheck="true"># @Software: ${PRODUCT_NAME}</span><span class="token comment" spellcheck="true"># @Desc    :</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="IntelliJ-IDEA"><a href="#IntelliJ-IDEA" class="headerlink" title="IntelliJ IDEA"></a>IntelliJ IDEA</h1><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * Created with IntelliJ IDEA. * Version : 1.0 * Author  : cunyu * Email   : cunyu1024@foxmail.com * Website : https://cunyu1943.github.io  * Date    : ${DATE} ${TIME} * Project : ${PROJECT_NAME} * Package : ${PACKAGE_NAME} * Class   : ${CLASS_NAME} * Desc    :  */</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="Visual-Studio"><a href="#Visual-Studio" class="headerlink" title="Visual Studio"></a>Visual Studio</h1><pre class="line-numbers language-c++"><code class="language-c++">/************************************************************************  * 项目名称 :  $rootnamespace$    * 类 名 称 :  $safeitemrootname$  * 版 本 号 :  1.0         * 作    者 :  cunyu * 邮    箱 :  cunyu1024@foxmail.com * 网    站 :  https://cunyu1943.github.io * 创建时间 :  $time$ * 项目描述 :      ************************************************************************/  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="Vim"><a href="#Vim" class="headerlink" title="Vim"></a>Vim</h1><pre><code>set autoindent                  " 按下回车后，下一行缩进格式与上一行保持一直set tabstop=4                   " 设置Tab键显示的空格数set spell spelllang=en_us       "英语单词拼写检查set number                      " 设置行号set nocompatible                " 设置是否与Vi兼容syntax on                       " 语法高亮set showmode                    " 显示当前属于命令模式还是插入模式set encoding=utf-8              " 设置utf-8编码set t_Co=256                    " 启用256色filetype indent on              " 文件类型检查set noerrorbells                "出错时不要发出响声警告set mouse=a                     " 支持鼠标</code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 计算机知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Pycharm </tag>
            
            <tag> IntelliJ IDEA </tag>
            
            <tag> Visual Studio </tag>
            
            <tag> Vim </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>XMind使用入门教程</title>
      <link href="/2019/10/02/xmind-shi-yong-ru-men-jiao-cheng/"/>
      <url>/2019/10/02/xmind-shi-yong-ru-men-jiao-cheng/</url>
      
        <content type="html"><![CDATA[<h1 id="什么是思维导图"><a href="#什么是思维导图" class="headerlink" title="什么是思维导图"></a>什么是思维导图</h1><p>借用百度百科的介绍，思维导图又称脑图、心智导图。是一种将思维形象化的方法，它利用图文并重的方法，将各级主题之间的关系用相互隶属与相关的层级图表现出来，将主题关键词与图像、颜色等建立记忆连接，从而使人们能够充分利用左右脑的机能。总结来说，思维导图就是以层次感的方式展示我们想法的图像式思考辅助工具。</p><h1 id="思维导图的优点"><a href="#思维导图的优点" class="headerlink" title="思维导图的优点"></a>思维导图的优点</h1><p><img src="https://upload-images.jianshu.io/upload_images/9747350-13d35573dd8cdd72.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/620" alt=""></p><h1 id="XMind"><a href="#XMind" class="headerlink" title="XMind"></a>XMind</h1><p>XMind专业版是需要付费的，但是基础版的也可以使用，只是较之专业版的有的功能受限，但满足日常使用需求已经足以。<a href="https://www.xmind.cn/download/win/" target="_blank" rel="noopener">下载地址</a>；</p><p><img src="https://upload-images.jianshu.io/upload_images/9747350-50df2f974ae870db.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/620" alt=""></p><h1 id="XMind快捷键"><a href="#XMind快捷键" class="headerlink" title="XMind快捷键"></a>XMind快捷键</h1><p><img src="https://upload-images.jianshu.io/upload_images/9747350-8ea91ba973cea05c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/620" alt=""></p><h1 id="使用技巧"><a href="#使用技巧" class="headerlink" title="使用技巧"></a>使用技巧</h1><ul><li><p>修改节点中的内容；<br><img src="https://upload-images.jianshu.io/upload_images/9747350-3dc9270f213d08db.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/620" alt=""></p></li><li><p>创建同级节点和子节点；<br><img src="https://upload-images.jianshu.io/upload_images/9747350-70765e0ac61bd614.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/620" alt=""></p></li><li><p>添加优先等级图标；<br><img src="https://upload-images.jianshu.io/upload_images/9747350-30dde6317ffa6417.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/620" alt=""></p></li><li><p>更改思维导图样式；<br><img src="https://upload-images.jianshu.io/upload_images/9747350-4094f2b476273c87.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/620" alt=""></p></li></ul><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>XMind是一款十分有助于效率提高的工具，也很容易上手操作，绝对是学习生活中的一大利器。如果你对自己的学习工作效率不是十分满意，那么XMind绝对值得一试哦！！！<br>以下附上几张XMind官方给出的模版：</p><p><img src="https://upload-images.jianshu.io/upload_images/9747350-85a527c0aa1c3995.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/620" alt=""></p><p><img src="https://upload-images.jianshu.io/upload_images/9747350-3973bf4ef2004041.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/620" alt=""></p><p><img src="https://upload-images.jianshu.io/upload_images/9747350-5f8caf160bec24f6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/620" alt=""></p><p><img src="https://upload-images.jianshu.io/upload_images/9747350-2313556507b99455.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/620" alt=""></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> tools </category>
          
      </categories>
      
      
        <tags>
            
            <tag> XMind </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mysql-8.0.13压缩版安装之Windows10篇</title>
      <link href="/2019/10/02/mysql-8-0-13-ya-suo-ban-an-zhuang-zhi-windows10-pian/"/>
      <url>/2019/10/02/mysql-8-0-13-ya-suo-ban-an-zhuang-zhi-windows10-pian/</url>
      
        <content type="html"><![CDATA[<h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><ul><li>系统环境：Windows 10 1803版本；</li><li>压缩包：MySQL-8.0.13 Windows zip包<a href="https://cdn.mysql.com//Downloads/MySQL-8.0/mysql-8.0.13-winx64.zip" target="_blank" rel="noopener">下载</a>；</li></ul><h2 id="安装过程"><a href="#安装过程" class="headerlink" title="安装过程"></a>安装过程</h2><h4 id="1-加载安装包到你的安装目录"><a href="#1-加载安装包到你的安装目录" class="headerlink" title="1. 加载安装包到你的安装目录"></a>1. 加载安装包到你的安装目录</h4><p>将下载的MySQL压缩包解压并移到你所要安装的路径，下面以我的安装路径<code>D:\Program Files\mysql-8.0.13-winx64</code>为例；</p><h4 id="2-配置文件"><a href="#2-配置文件" class="headerlink" title="2.  配置文件"></a>2.  配置文件</h4><p>在上述目录下新建<code>my.ini</code>文件，然后在文件中加入以下配置：在上述目录下新建<code>my.ini</code>文件，然后在文件中加入以下配置：</p><pre class="line-numbers language-shell"><code class="language-shell">[mysqld]# 设置3306端口port=3306# 设置mysql的安装目录basedir=D:\Program Files\mysql-8.0.13-winx64# 设置mysql数据库的数据的存放目录datadir=D:\Program Files\mysql-8.0.13-winx64\data# 允许最大连接数max_connections=200# 允许连接失败的次数max_connect_errors=10# 服务端使用的字符集默认为utf8character-set-server=utf8#使用–skip-external-locking MySQL选项以避免外部锁定。该选项默认开启external-locking = FALSE# 创建新表时将使用的默认存储引擎default-storage-engine=INNODB # 默认使用“mysql_native_password”插件认证default_authentication_plugin=mysql_native_password[mysqld_safe]log-error=D:\Program Files\mysql-8.0.13-winx64\mysql_oldboy.errpid-file=D:\Program Files\mysql-8.0.13-winx64\mysqld.pid# 定义mysql应该支持的sql语法，数据校验sql_mode=NO_ENGINE_SUBSTITUTION,STRICT_TRANS_TABLES[mysql]# 设置mysql客户端默认字符集default-character-set=utf8[client]# 设置mysql客户端连接服务端时默认使用的端口port=3306# 设置mysql客户端默认字符集default-character-set=utf8<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-配置环境变量"><a href="#3-配置环境变量" class="headerlink" title="3. 配置环境变量"></a>3. 配置环境变量</h4><ul><li><p>打开控制面板-&gt;系统与安全-&gt;系统，进入高级系统设置，如下图所示；<br><img src="http://upload-images.jianshu.io/upload_images/9747350-e5eb79a0ed36843b?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p></li><li><p>然后进行环境变量的设置，如下图；</p></li></ul><p><img src="http://upload-images.jianshu.io/upload_images/9747350-7e1751a1f568266b?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"><br><img src="http://upload-images.jianshu.io/upload_images/9747350-c1cc60337028b17d?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"><br><img src="http://upload-images.jianshu.io/upload_images/9747350-7225cdc7ee9ef783?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><h4 id="4-初始化"><a href="#4-初始化" class="headerlink" title="4. 初始化"></a>4. 初始化</h4><p>控制台进入MySQL解压后的路径，然后以管理员身份执行如下命令；</p><pre class="line-numbers language-shell"><code class="language-shell">mysqld --initialize --console<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>注意</strong>：执行成功后会打印出初始的root用户密码，一定要记住！！！方便后边修改密码；<br><img src="http://upload-images.jianshu.io/upload_images/9747350-033f2e6de448ef2c?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><h4 id="5-安装数据库服务"><a href="#5-安装数据库服务" class="headerlink" title="5. 安装数据库服务"></a>5. 安装数据库服务</h4><p>接上一步初始化数据库后，继续执行如下命令；</p><pre class="line-numbers language-shell"><code class="language-shell">mysqld --install<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>因为博主已经安装过了，所以会提示服务已存在，若是第一次安装，则不会提示已安装；<br><img src="http://upload-images.jianshu.io/upload_images/9747350-6bfbcb57c014d944?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><h4 id="6-启动与关闭MySQL数据库服务"><a href="#6-启动与关闭MySQL数据库服务" class="headerlink" title="6. 启动与关闭MySQL数据库服务"></a>6. 启动与关闭MySQL数据库服务</h4><pre class="line-numbers language-shell"><code class="language-shell"># 开启net start mysql# 关闭net stop mysql<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="7-修改初始root用户密码"><a href="#7-修改初始root用户密码" class="headerlink" title="7. 修改初始root用户密码"></a>7. 修改初始root用户密码</h4><p>先用刚才记住的初始root用户密码登陆，然后进行密码更改，命令如下；</p><pre class="line-numbers language-shell"><code class="language-shell"># 登陆mysql -u root -p # 然后提示你输入密码，输入上边初始化时默认给的初始化密码，进行登陆# 密码修改alter user 'root'@'localhost' identified by '新密码';# 修改密码<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="http://upload-images.jianshu.io/upload_images/9747350-b3fbdeddb8aa4329?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><h5 id="8-创建普通用户并设置密码"><a href="#8-创建普通用户并设置密码" class="headerlink" title="8. 创建普通用户并设置密码"></a>8. 创建普通用户并设置密码</h5><p>登入root用户后，创建新的用户并指定密码密码如下；</p><pre class="line-numbers language-shell"><code class="language-shell">CREATE USER 'userName'@'localhost' IDENTIFIED BY 'password';<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后退出root用户登陆，尝试用你所创建的新用户进行登陆，登陆成功的提示如下；<br><img src="http://upload-images.jianshu.io/upload_images/9747350-eca60838194ccc4e?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>好了，通过上面的流程，是不是知道了如何在Windows 10系统下安装最新的压缩包版MySQL-8.0.13呢，而且文中也对如何修改root用户的默认密码以及如何创建新用户给出了解决方案，是不是简单，那就亲自动手试试吧；</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> tools </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
            <tag> Windows </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>不同情况下修改MySql的root用户密码对应的方法</title>
      <link href="/2019/10/02/bu-tong-qing-kuang-xia-xiu-gai-mysql-de-root-yong-hu-mi-ma-dui-ying-de-fang-fa/"/>
      <url>/2019/10/02/bu-tong-qing-kuang-xia-xiu-gai-mysql-de-root-yong-hu-mi-ma-dui-ying-de-fang-fa/</url>
      
        <content type="html"><![CDATA[<h2 id="在我们使用MySQL时，常常会因为不同的原因需要对root用户密码进行修改，这篇博客主要介绍了以下三种情况下修改root用户密码的方式。"><a href="#在我们使用MySQL时，常常会因为不同的原因需要对root用户密码进行修改，这篇博客主要介绍了以下三种情况下修改root用户密码的方式。" class="headerlink" title="在我们使用MySQL时，常常会因为不同的原因需要对root用户密码进行修改，这篇博客主要介绍了以下三种情况下修改root用户密码的方式。"></a>在我们使用MySQL时，常常会因为不同的原因需要对root用户密码进行修改，这篇博客主要介绍了以下三种情况下修改root用户密码的方式。</h2><h3 id="未设置root密码之前："><a href="#未设置root密码之前：" class="headerlink" title="未设置root密码之前："></a>未设置root密码之前：</h3><ul><li>SET PASSWORD命令的方式：<pre><code>mysql -u rootmysql&gt;SET PASSWORD FOR 'root'@'localhost' = PASSWORD('你要设置的密码');</code></pre></li><li>mysqladmin命令的方式：<pre><code>mysqladmin -u root password "你要设置的密码"</code></pre></li><li>UPDATE的方式直接编辑user表：<pre><code>mysql -u rootmysql&gt; USE mysql;mysql&gt; UPDATE user SET Password = PASSWORD('你要设置的密码') WHERE user = 'root';mysql&gt; FLUSH PRIVILEGES;</code></pre></li></ul><h3 id="设置过root之后："><a href="#设置过root之后：" class="headerlink" title="设置过root之后："></a>设置过root之后：</h3><ul><li>mysqladmin的方式：<pre><code>mysqladmin -u root password oldpass "你要设置的新密码"</code></pre></li></ul><h3 id="设置过root密码，但是忘记了："><a href="#设置过root密码，但是忘记了：" class="headerlink" title="设置过root密码，但是忘记了："></a>设置过root密码，但是忘记了：</h3><pre><code>mysqld_safe --skip-grant-tables&amp;mysql -u root mysqlmysql&gt; UPDATE user SET password = PASSWORD("你要设置的新密码") WHERE user = 'root' ;mysql&gt; FLUSH PRIVILEGES;</code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 计算机知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Socket在Server和Client间通信的工作原理</title>
      <link href="/2019/09/30/socket-zai-server-he-client-jian-tong-xin-de-gong-zuo-yuan-li/"/>
      <url>/2019/09/30/socket-zai-server-he-client-jian-tong-xin-de-gong-zuo-yuan-li/</url>
      
        <content type="html"><![CDATA[<h4 id="Socket之间的连接过程主要可以概括为以下三步："><a href="#Socket之间的连接过程主要可以概括为以下三步：" class="headerlink" title="Socket之间的连接过程主要可以概括为以下三步："></a>Socket之间的连接过程主要可以概括为以下三步：</h4><ol><li><p><strong>服务器建立监听</strong>：客户端初始化Socket动态库后创建套接字，然后指定客户端Socket的地址，循环绑定Socket直至成功，然后开始建立监听，此时客户端处于等待状态，实时监控网络状态；</p></li><li><p><strong>客户端提出请求</strong>：客户端的Socket向服务器端提出连接请求，此时客户端描述出它所要连接的Socket，指出要连接的Socket的相关属性，然后向服务器端Socket提出请求；</p></li><li><p><strong>连接确认并建立</strong>：当服务器端套接字监听到来自客户端的连接请求之后，立即响应请求并建立一个新进程，然后将服务器端的套接字的描述反馈给客户端，由客户端确认之后连接就建立成功，然后客户端和服务器两端之间可以相互通信，传输数据，此时服务器端的套接字继续等待监听来自其他客户端的请求；</p></li></ol><p><img src="http://upload-images.jianshu.io/upload_images/9747350-928b4a5b6d4526d4?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="server和client之间的基本工作原理流程图"></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 计算机知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Socket </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C语言中的内存管理函数</title>
      <link href="/2019/09/30/c-yu-yan-zhong-de-nei-cun-guan-li-han-shu/"/>
      <url>/2019/09/30/c-yu-yan-zhong-de-nei-cun-guan-li-han-shu/</url>
      
        <content type="html"><![CDATA[<h3 id="malloc函数"><a href="#malloc函数" class="headerlink" title="malloc函数"></a>malloc函数</h3><ul><li>原型：extern void* malloc(unsigned int size)；</li><li>功能：动态分配内存；</li><li>注意：size仅仅为申请内存字节大小，与申请内存块中存储的数据类型无关，故编程时需要通过以下方式给出：”长度 * sizeof(数据类型)”；</li></ul><ul><li>示例：</li></ul><pre class="line-numbers language-c"><code class="language-c"><span class="token comment" spellcheck="true">//动态分配内存，输入5个数据，并把低于60的值打印出来</span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> <span class="token operator">*</span>ptr <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">5</span> <span class="token operator">*</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//分配内存</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token function">scanf_s</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>ptr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//输入数据</span>        <span class="token punctuation">}</span>    <span class="token keyword">int</span> min <span class="token operator">=</span> <span class="token number">60</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>min <span class="token operator">></span> <span class="token operator">*</span><span class="token punctuation">(</span>ptr <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%5d"</span><span class="token punctuation">,</span> <span class="token operator">*</span><span class="token punctuation">(</span>ptr <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//打印出低于60的值</span>    <span class="token punctuation">}</span>    <span class="token function">free</span><span class="token punctuation">(</span>ptr<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="free函数"><a href="#free函数" class="headerlink" title="free函数"></a>free函数</h3><ul><li>原型：void free(void * ptr)；</li><li>功能：搭配malloc()函数，释放malloc函数申请的动态内存；</li><li>注意：对于free(ptr)，若ptr为NULL，则可进行多次释放，若ptr是非空指针，则free对ptr只能进行一次操作，否则程序将崩溃；</li><li>示例：见malloc函数；</li><li>结果：见malloc函数；</li></ul><h3 id="realloc函数"><a href="#realloc函数" class="headerlink" title="realloc函数"></a>realloc函数</h3><ul><li><p>原型： void* realloc(void * ptr,unsigned int size)；</p></li><li><p>功能：先判断当前指针是否有足够的连续空间，若足够，扩大ptr指向的地址并返回，若不够，怎按size指定的大小分配空间，将原数据copy到新分配的内存中，然后释放原ptr所指向区域；</p></li><li><p>注意：内存使用完毕后，应使用free()函数释放，但原来的指针是自动释放，不需要使用free；</p></li><li><p>示例：</p></li></ul><pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>   <span class="token keyword">char</span> <span class="token operator">*</span>str<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* 一开始的内存分配 */</span>    str <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">15</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">strcpy</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span> <span class="token string">"Hello World!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"String = %s\n"</span><span class="token punctuation">,</span> str<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* 重新分配内存 */</span>    str <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">realloc</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">strcat</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span> <span class="token string">", C"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"String = %s\n"</span><span class="token punctuation">,</span> str<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">free</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="calloc函数"><a href="#calloc函数" class="headerlink" title="calloc函数"></a>calloc函数</h3><ul><li>原型：void* calloc（unsigned int num，unsigned int size）；</li><li>功能：为已经分配的内存重新分配空间并复制内容；</li><li>注意：num：对象个数，size：对象占据的内存字节数，相较于malloc函数，calloc函数会自动将内存初始化为0；</li></ul><ul><li>示例：</li></ul><pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> num<span class="token punctuation">;</span>    <span class="token keyword">int</span> i<span class="token punctuation">;</span>    <span class="token keyword">int</span> <span class="token operator">*</span>ptr<span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"元素个数为："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>    ptr <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">calloc</span><span class="token punctuation">(</span>num<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"输入 %d 个数字：\n"</span><span class="token punctuation">,</span> num<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> num<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>ptr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"输入的数字为："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> num<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d "</span><span class="token punctuation">,</span> ptr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 编程语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C/C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>程序员常用编辑器推荐</title>
      <link href="/2019/09/30/cheng-xu-yuan-chang-yong-bian-ji-qi-tui-jian/"/>
      <url>/2019/09/30/cheng-xu-yuan-chang-yong-bian-ji-qi-tui-jian/</url>
      
        <content type="html"><![CDATA[<p>对于一个程序员而言，一款称手的代码编辑器是十分重要的。一款好的代码编辑器能够大大提高开发效率，节省开发时间。而且现在许多的代码编辑器功能十分强大，不仅仅只是编写代码、查看源文件，还可以查看txt文档，也支持Markdown格式的写作等等。下面就简要的介绍几款的代码编辑器，</p><h3 id="Vim"><a href="#Vim" class="headerlink" title="Vim"></a>Vim</h3><ul><li>官网下载地址：<a href="https://www.vim.org/" target="_blank" rel="noopener">https://www.vim.org/</a></li><li>Github下载地址：<a href="https://github.com/vim/vim/releases" target="_blank" rel="noopener">https://github.com/vim/vim/releases</a></li><li>使用教程：<a href="https://www.runoob.com/linux/linux-vim.html" target="_blank" rel="noopener">https://www.runoob.com/linux/linux-vim.html</a></li></ul><h3 id="EditPlus"><a href="#EditPlus" class="headerlink" title="EditPlus"></a>EditPlus</h3><ul><li>官网下载地址：<a href="https://www.editplus.com/" target="_blank" rel="noopener">https://www.editplus.com/</a></li><li>中文破解版：<a href="http://www.pc6.com/softview/SoftView_36775.html" target="_blank" rel="noopener">http://www.pc6.com/softview/SoftView_36775.html</a></li></ul><h3 id="UltraEdit"><a href="#UltraEdit" class="headerlink" title="UltraEdit"></a>UltraEdit</h3><ul><li>官网下载地址：<a href="https://www.ultraedit.com/" target="_blank" rel="noopener">https://www.ultraedit.com/</a></li><li>中文官网下载地址：<a href="http://www.ultraedit.cn/" target="_blank" rel="noopener">http://www.ultraedit.cn/</a></li></ul><h3 id="Sublime-Text"><a href="#Sublime-Text" class="headerlink" title="Sublime Text"></a>Sublime Text</h3><ul><li>官网下载地址：<a href="http://www.sublimetext.com/3" target="_blank" rel="noopener">http://www.sublimetext.com/3</a></li><li>中文版下载地址：<a href="http://sublimetextcn.com/" target="_blank" rel="noopener">http://sublimetextcn.com/</a></li><li>优点：功能强大、性能优良、界面美观、多平台兼容；</li><li>缺点：收费，不过收费也不是很贵，有条件的还是建议买个正版，省事又方便；</li></ul><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy85NzQ3MzUwLTY5MTdlYzk2MDgzMjI4YTMucG5n?x-oss-process=image/format,png" alt="图片来自百度"></p><h3 id="Notepad"><a href="#Notepad" class="headerlink" title="Notepad++"></a>Notepad++</h3><ul><li>官网下载地址：<a href="https://notepad-plus-plus.org/" target="_blank" rel="noopener">https://notepad-plus-plus.org/</a></li><li>优点：国人(台湾人侯金吾)开发，有完整的中文接口，并支持多国语言，免费开源，轻便；</li><li>缺点：目前只支持Windows平台；</li></ul><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy85NzQ3MzUwLWY4N2I5NDEyZGVjMTRhYjkucG5n?x-oss-process=image/format,png" alt="图片来自百度"></p><h3 id="Visual-Studio-Code"><a href="#Visual-Studio-Code" class="headerlink" title="Visual Studio Code"></a>Visual Studio Code</h3><ul><li>官网下载地址：<a href="https://code.visualstudio.com/" target="_blank" rel="noopener">https://code.visualstudio.com/</a></li><li>优点：作为宇宙最强IDE Visual Studio开发者微软旗下的一款产品，它的强大毋庸置疑，就不再赘述。而且最重要的一点，这款编辑器是完全开源免费的，也支持多平台；</li><li>缺点：相对来说，安装体积较大，比不上sublime、notepad等轻便；<br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy85NzQ3MzUwLWY3MDFjOWNkOTgyY2JiYmYucG5n?x-oss-process=image/format,png" alt=""></li></ul><h3 id="Atom"><a href="#Atom" class="headerlink" title="Atom"></a>Atom</h3><ul><li>官网下载地址：<a href="https://atom.io/" target="_blank" rel="noopener">https://atom.io/</a></li><li>优点：用户界面简洁直观，简单易用，上手很快，由全球最大同性交友平台github推出，完全免费开源，支持多平台，PS：还有各种意想不到的酷炫功能，自己去探索吧；</li><li>缺点：由于集成了许多功能，安装的时候相对臃肿，轻便性有待提高；</li></ul><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy85NzQ3MzUwLTkzN2ZhYmRmZDk4NWRhZDAucG5n?x-oss-process=image/format,png" alt="图片来自百度"></p><p>好了，以上就推荐了几款作为开发者最常用的几个代码编辑器。正所谓萝卜白菜，各有所爱，所以笔者也不能说哪一款是最好的。如果你更倾向于轻便，那Sublime Text和Notepad++或许是更好的选择。但如果你想要易上手之类的，Atom和VS Code也许会更适合你。当然了，Sublime Text和Notepad++也可以通过安装各种插件来使功能更加强大，这就需要你去折腾了。以上就是我的看法了，希望你看了这篇博客后能够选到最适合你的代码编辑器。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> tools </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vim </tag>
            
            <tag> Visual Studio Code </tag>
            
            <tag> Sublime Text </tag>
            
            <tag> Notepad++ </tag>
            
            <tag> Atom </tag>
            
            <tag> UltraEdit </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Markdown写作入门</title>
      <link href="/2019/09/30/markdown-xie-zuo-ru-men/"/>
      <url>/2019/09/30/markdown-xie-zuo-ru-men/</url>
      
        <content type="html"><![CDATA[<h3 id="什么是Markdown格式"><a href="#什么是Markdown格式" class="headerlink" title="什么是Markdown格式"></a>什么是Markdown格式</h3><p>Markdown格式是一种可用普通文本编辑器编写的标记语言，使用者能够通过简单的标记语法，对自己所写文本内容进行简单的格式排版；</p><h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h3><ul><li>语法简洁易学，且功能比纯文本强大；</li><li>格式转换方便，兼容性强，可读性极好；</li></ul><h3 id="写作格式"><a href="#写作格式" class="headerlink" title="写作格式"></a>写作格式</h3><h4 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h4><p>每多加一级则添加一个 # 号；<br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy85NzQ3MzUwLTI0OGM5ODA2ZmIyNGU4OTAucG5n" alt=""></p><h4 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h4><ul><li><p>有序列表<br>数字加上一个英文句点，空格后输入内容；<br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy85NzQ3MzUwLTFkMzRjNWU5ODcwMDU2YjEucG5n" alt=""></p></li><li><p>无序列表<br>-、+、*为无序列表标识；<br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy85NzQ3MzUwLWIzNmIxYWRjMzcxMTNmZWQucG5n" alt=""></p></li></ul><h4 id="加粗"><a href="#加粗" class="headerlink" title="加粗"></a>加粗</h4><p>两个连续 * 或者 _ 包含内容；<br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy85NzQ3MzUwLTJiMDFmYTdjODFmMWM1YjMucG5n" alt=""></p><h4 id="斜体"><a href="#斜体" class="headerlink" title="斜体"></a>斜体</h4><p>一个 * 或者 _ 包含内容；<br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy85NzQ3MzUwLTE5ZGI0ZjcwYTIwNGIyMTUucG5n" alt=""></p><h4 id="删除线"><a href="#删除线" class="headerlink" title="删除线"></a>删除线</h4><p>两个 ~~ 包含；<br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy85NzQ3MzUwLTE3M2M4NGM5NjZjMTAzMzYucG5n" alt=""></p><h4 id="标记文本"><a href="#标记文本" class="headerlink" title="标记文本"></a>标记文本</h4><p>两个<code>==</code>包含，格式如下；<br><code>==demo==</code></p><h4 id="上下标"><a href="#上下标" class="headerlink" title="上下标"></a>上下标</h4><ul><li>上标<br><code>^</code>包含，格式如下；<br><code>demo^demo^</code></li><li>下标<br><code>~</code>包含，格式如下；<br><code>demo~demo~</code></li></ul><h4 id="分割线"><a href="#分割线" class="headerlink" title="分割线"></a>分割线</h4><p>三个及以上的 *、_、- 用于建立分割线；<br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy85NzQ3MzUwLTcxM2M4ZDg3OWI0ODM5N2YucG5n" alt=""><br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy85NzQ3MzUwLWExYmY2MjRjYmQxOTU4YmIucG5n" alt=""><br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy85NzQ3MzUwLWU1N2U0YTI4ZmIxZjY1MWYucG5n" alt=""></p><h4 id="代码块"><a href="#代码块" class="headerlink" title="代码块"></a>代码块</h4><p>三个连续 ` 包含代码内容；<br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy85NzQ3MzUwLWQ4YTY4MjUzMzQ5MWNlMmQucG5n" alt=""></p><h4 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h4><p>单个 &gt; 标记区块引用；<br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy85NzQ3MzUwLTZmMWYxYTBjNzM3ZTliOTMucG5n" alt=""></p><h4 id="链接和图片"><a href="#链接和图片" class="headerlink" title="链接和图片"></a>链接和图片</h4><ul><li><code>[显示的文本](链接地址)；</code><br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy85NzQ3MzUwLTFkNzM3YzUwMTAzNmQzYTIucG5n" alt=""></li><li><code>[外链图片转存失败(img-XrVu45Zv-1563331849244)(图片链接地址)]；</code><br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy85NzQ3MzUwLWEzZWZjM2M2M2YxNTVkYzYucG5n" alt=""></li></ul><h4 id="上下角标"><a href="#上下角标" class="headerlink" title="上下角标"></a>上下角标</h4><h5 id="上角标"><a href="#上角标" class="headerlink" title="上角标"></a>上角标</h5><pre class="line-numbers language-text"><code class="language-text">1. <sup>内容</sup>2. ^<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h5 id="下角标"><a href="#下角标" class="headerlink" title="下角标"></a>下角标</h5><pre class="line-numbers language-text"><code class="language-text">1. <sub>内容</sub>2. _<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="数学公式"><a href="#数学公式" class="headerlink" title="数学公式"></a>数学公式</h4><ul><li><p>起始和结尾标志<br>数学公式以<code>$</code>开头和结尾，若公式要独占一行，则以<code>$$</code>开头和结尾；</p></li><li><p>符号上下标<br>上标：<code>^</code>，如$a^2$；<br>下标：<code>_</code>，如$a_2$；</p></li><li><p>分组<br>使用<code>{}</code>将具有相同等级的内容扩入其中，成组处理</p></li><li><p>括号</p><ul><li>小括号：<code>()</code>；</li><li>中括号：<code>[]</code>；</li><li>尖括号：<code>\langle，\rangle</code>；</li><li>大括号：使用<code>\left</code>或<code>\right</code>让符号大小与邻近的公式相适应，如<code>(\frac{x}{y})和\left(\frac{x}{y}\right)</code>的区别<br>$$(\frac{x}{y})$$<br>$$\left(\frac{x}{y}\right)$$</li></ul></li><li><p>求和、极限和积分</p><ul><li>求和：<code>\sum</code>；</li><li>极限：<code>\lim</code>；</li><li>积分：<code>\int</code>；</li></ul></li><li><p>分式与根式</p><ul><li>分式：<code>\frac{分子}{分母}</code>；</li><li>根式：<code>\sqrt{根次}{底数}</code>；</li></ul></li></ul><h3 id="编辑器推荐"><a href="#编辑器推荐" class="headerlink" title="编辑器推荐"></a>编辑器推荐</h3><ul><li><p>Typora<br>一款所见即所得的Markdown编辑器，支持跨平台，下载地址：<a href="https://www.typora.io/" target="_blank" rel="noopener">https://www.typora.io/</a>;</p></li><li><p>GitNote<br>一款基于git的支持Markdown格式的笔记应用，虽然界面比较简陋，但是支持直接链接到自己的github同步，还解决了Typora中上传到网上的图床问题，下载地址：<a href="https://www.gitnoteapp.com/；" target="_blank" rel="noopener">https://www.gitnoteapp.com/；</a></p></li><li><p>VScode<br>微软出品的VScode可谓功能齐全，当然也是可以用来写作Markdown格式的，关于介绍及下载见我的另一篇文章<a href="https://www.jianshu.com/p/94f312103f9d" target="_blank" rel="noopener">开发者编辑器推荐</a>;</p></li><li><p>Cmd Markdown<br>这是由作业部落出品的一款Markdown写作软件，既有网页版，也有离线版，最大的特点在于联网时可以实时保存到云，不用担心因为各种原因导致的数据丢失问题，具体见<a href="https://www.zybuluo.com/mdeditor" target="_blank" rel="noopener">Cmd Markdown介绍</a>，<a href="https://www.zybuluo.com/mdeditor" target="_blank" rel="noopener">下载地址</a>;<br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy85NzQ3MzUwLTc2NDExZGQ3ZDM5ODQ5OGEucG5n" alt=""></p></li></ul><h3 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h3><p>以上就是Markdown写作格式中最常用的语法，对于日常使用已经完全足够，至于更加高级的技巧，也可以在评论区贴出，大家一起交流学习！！！</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> tools </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Markdown </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>通过Xshell远程连接Ubuntu</title>
      <link href="/2019/09/30/tong-guo-xshell-lian-jie-ubuntu/"/>
      <url>/2019/09/30/tong-guo-xshell-lian-jie-ubuntu/</url>
      
        <content type="html"><![CDATA[<p>一般情况下，安装好的Ubuntu系统中默认是只安装了<code>openssh-client</code>，此时只能通过此系统连接访问其他系统，但不具有让其他系统访问的权限。在终端查看ssh进程，输入<code>ps -e|grep ssh</code>，如果有安装<code>openssh-client</code>只会出现<code>ssh -agent</code>，不会出现<code>sshd</code>(因为博主已经安装<code>openssh-server</code>，所以会出现<code>sshd</code>)。</p><p><img src="https://img-blog.csdn.net/20180801141631186?watermark/2/text/5p2R6ZuoMTk0Mw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/35" alt=""><br>此时要想开放本机SSH服务以便其他系统登陆访问，就必须安装<code>openssh-server</code>，安装过程如下：</p><ul><li>在终端中输入<code>sudo apt-get install openssh-server</code>，然后输入自己的<code>root</code>密码就可以了(因为博主已经安装过，所以提示的是升级)；</li></ul><p><img src="https://img-blog.csdn.net/20180801142429103?watermark/2/text/5p2R6ZuoMTk0Mw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/35" alt=""></p><ul><li>然后启动<code>ssh-server</code>服务即可，开启方式，当然这两种开启方式都是需要切换到<code>root</code>用户或者提供密码权限的；</li></ul><ol><li><p><code>service ssh start</code></p></li><li><p><code>/etc/init.d/ssh start</code></p></li></ol><p><img src="https://img-blog.csdn.net/20180801143049189?watermark/2/text/5p2R6ZuoMTk0Mw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/35" alt=""></p><ul><li>验证是否开启成功；</li></ul><p><img src="https://img-blog.csdn.net/20180801143318643?watermark/2/text/5p2R6ZuoMTk0Mw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/35" alt=""></p><ul><li>若再次查看<code>ssh</code>进程时，同时出现<code>sshd</code>、<code>ssh -agent</code>进程，则说明<code>openssh -service</code>已经安装成功；</li></ul><p><img src="https://img-blog.csdn.net/20180801143739776?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dpdGh1Yl8zOTY1NTAyOQ==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/35" alt=""></p><ul><li>此时便可通过XShell访问Ubuntu了，依次填入主机IP、用户名已经用户密码便可成功连接到Ubuntu；</li></ul><p><img src="https://img-blog.csdn.net/20180801144354326?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dpdGh1Yl8zOTY1NTAyOQ==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/35" alt=""></p><p><img src="https://img-blog.csdn.net/2018080114453685?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dpdGh1Yl8zOTY1NTAyOQ==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt=""></p><p><img src="https://img-blog.csdn.net/20180801143846201?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dpdGh1Yl8zOTY1NTAyOQ==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/35" alt=""></p><p><img src="https://img-blog.csdn.net/20180801144107643?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dpdGh1Yl8zOTY1NTAyOQ==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/35" alt=""></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> tools </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Ubuntu </tag>
            
            <tag> Xshell </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git使用学习笔记</title>
      <link href="/2019/09/30/git-shi-yong-xue-xi-bi-ji/"/>
      <url>/2019/09/30/git-shi-yong-xue-xi-bi-ji/</url>
      
        <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><ul><li><p>定义<br>  Git，最先进的分布式版本控制系统之一，最初是由Linux之父Linus为了更好管理开源Linux系统而开发的一个软件；</p></li><li><p>下载：<a href="https://git-scm.com/downloads" target="_blank" rel="noopener">https://git-scm.com/downloads</a></p></li><li><p>安装</p><ul><li>Linux：<code>sudo apt-get install git</code></li><li>Windows、macOS通过官网下载安装包后进行安装即可；</li></ul></li><li><p>设置</p><p>  安装完成后，需要进行以下设置：</p><pre><code>$ git config --global user.name "user name"$ git config --global user.email "example@email.com"# 可选，让Git命令行显示颜色$ git config --global color.ui true</code></pre></li></ul><hr><h1 id="版本库创建及管理"><a href="#版本库创建及管理" class="headerlink" title="版本库创建及管理"></a>版本库创建及管理</h1><ul><li>如何创建版本库</li></ul><ol><li>先创建一个空文件夹，Windows下不再介绍，Linux以及macOS下可通过<code>$ mkdir gitlearn</code>命令创建；</li><li>通过<code>$ git init</code>将刚才创建的目录变为可管理的仓库;</li></ol><p><img src="https://i.loli.net/2019/09/20/PjMfbN1OR3mK7r5.png" alt=""></p><ul><li>如何将文件添加到版本库</li></ul><ol><li>在刚才创建的空文件夹中，添加你自己的文件，以readme.md为例；</li><li>用<code>git add</code>命令将文件添加到仓库；</li></ol><pre><code>$ git add readme.md</code></pre><ol start="3"><li>用<code>git commit</code>将文件提交到仓库；</li></ol><pre><code>$ git commit -m "this is a readme.md file."</code></pre><ul><li>如何查看仓库修改的内容</li></ul><ol><li><p>用<code>git status</code>查看仓库当前状态；</p></li><li><p>用<code>git diff filename</code>查看文件具体修改的内容；</p></li></ol><pre><code>$ git diff readme.txt</code></pre><ol start="3"><li><code>git log</code>查看最近到最远的提交日志</li></ol><pre><code>$ git log --pretty=oneline</code></pre><ol start="4"><li>回退之前的版本，先用<code>git log</code>查看提交历史，以确定commit_id，回退后，当想要重返未来版本时，用<code>git reflog</code>查看命令历史，从而确定重返版本commit_id，<code>HEAD</code>指向当前版本，为了在版本的历史之间穿梭，使用命令<code>git resrt --hard commit_id</code></li></ol><pre><code>$ git reset --hard HEAD^</code></pre><ol start="5"><li>直接丢弃工作区的某文件修改内容时，使用命令<code>git checkout -- filename</code></li></ol><pre><code>$ git checkout -- readme.md</code></pre><ol start="6"><li>删除文件，先在工作区将文件删除后，然后使用命令<code>git rm</code>将版本库中文件删除，然后通过<code>git commit</code>提交</li></ol><pre><code>$ git rm readme.md$ git commit -m "delete readme.md"</code></pre><hr><h1 id="远程仓库"><a href="#远程仓库" class="headerlink" title="远程仓库"></a>远程仓库</h1><ul><li><p>为了将本地Git和远程Github相连接，可以进行如下操作：</p><ul><li><p>确定<code>.ssh</code>目录下是否存在文件<code>id_rsa</code>和<code>id_rsa.pub</code>，有则复制<code>id_rsa.pub</code>中内容明将其添加到Github中的SSH Key，建立两者联系，可以在本地管理，</p></li><li><p>不存在则通过如下命令生成；</p><pre><code>$ ssh-keygen -t rsa -C "example@email.com"</code></pre></li></ul></li><li><p>如何添加远程仓库</p><ul><li><p>在本地通过如下命令建立本地仓库与远程仓库进行管理，然后就可以将本地仓库内容推送到Github仓库；</p><pre><code>$ git remote add origin git@github.com:cunyu1943/gitlearn.git</code></pre></li><li><p>从远程仓库克隆岛本地：</p><pre><code>$ git clone https://github.com/cunyu1943/the_journey_to_nlp.git</code></pre></li></ul></li><li><p>将本地仓库内容推送到远程仓库；</p></li></ul><pre><code># 第一次推送$ git push -u origin master# 之后的推送$ git push origin master</code></pre><hr><h1 id="分支管理"><a href="#分支管理" class="headerlink" title="分支管理"></a>分支管理</h1><ul><li>创建并切换分支</li></ul><pre><code>$ git switch -c dev# 等价命令$ git checkout -b dev# 等价命令$ git branch dev$ git checkout dev</code></pre><ul><li>查看当前分支，前边标有$*$代表当前分支，切换回$master$分支；</li></ul><pre><code>$ git branch$ git checkout/switch master</code></pre><ul><li>将$dev$分支合并到$master$分支；</li></ul><pre><code>$ git merge dev</code></pre><ul><li>删除分支；</li></ul><pre><code>$ git branch -d dev</code></pre><ul><li>强制删除未合并分支；</li></ul><pre><code>$ git branch -D dev</code></pre><ul><li>查看分支合并图</li></ul><pre><code>$ git log --graph</code></pre><hr><h1 id="多人协作"><a href="#多人协作" class="headerlink" title="多人协作"></a>多人协作</h1><ul><li><p>查看远程库信息：<code>git remote -v</code>；</p></li><li><p>本地新建分支若不推送到远程，则对其他人不可见；</p></li><li><p>本地推送到远程库，<code>git push origin branch-name</code>，若推送失败，则用<code>git pull</code>抓取远程新提交；</p></li></ul><pre><code>$ git push origin master# 若推送失败，则先执行如下命令$ git pull</code></pre><ul><li>本地创建和远程分支对应分支，<code>git checkout -b branch-name origin/branch-name</code></li></ul><pre><code>$ git checkout -b dev origin/dev</code></pre><ul><li>建立本地分支和远程分支的关联，<code>git branch --set-upstream branch-name origin/branch-name</code></li></ul><pre><code>$ git branch --set-upstream dev origin/dev</code></pre><ul><li>从远程抓取分支则使用<code>git pull</code>，若有冲突，则先解决处理后再处理；</li></ul><hr><h1 id="标签管理"><a href="#标签管理" class="headerlink" title="标签管理"></a>标签管理</h1><ul><li><p>先切换到需要打标签的分支<code>git switch branch-name</code>；</p></li><li><p>打标签并查看；</p></li></ul><pre><code># 打一个名为"v1.0"的标签$ git tag v1.0# 查看所有标签$ git tag</code></pre><ul><li>查看标签信息，<code>git show &lt;tagname&gt;</code>；</li></ul><pre><code>$ git show v1.0</code></pre><ul><li>创建带有说明的标签，用<code>-a</code>打标签名，<code>-m</code>指定说明文字；</li></ul><pre><code>$ git tag -a v1.0 -m "version 1.0 released" 132gsfh</code></pre><ul><li>删除标签，本地使用<code>git tag -d &lt;tagname&gt;</code>，远程则使用<code>git push origin :refs/tags/&lt;tagname&gt;</code></li></ul><pre><code># 删除本地标签$ git tag -d v30.0# 删除远程标签$ git push origin :refs/tags/v30.0</code></pre><ul><li>将标签推送到远程<code>git push origin &lt;tagname&gt;</code></li></ul><pre><code># 推送某一标签$ git push origin v1.0# 推送所有标签$ git push origin --tags</code></pre><hr><h1 id="建立Github和Gitee共同远程连接"><a href="#建立Github和Gitee共同远程连接" class="headerlink" title="建立Github和Gitee共同远程连接"></a>建立Github和Gitee共同远程连接</h1><ul><li>删除某一关联的远程库，<code>git remote rm &lt;basename&gt;</code></li></ul><pre><code>$ git remote rm origin</code></pre><ul><li>关联Gitee远程库，<code>git remote add &lt;basename&gt; git@gitee.com:&lt;username&gt;/&lt;basename&gt;.git</code></li></ul><pre><code>$ git remote add gitee git@gitee.com:cunyu1943/notes.git</code></pre><ul><li>关联Github远程库，<code>git remote add &lt;basename&gt; git@github.com:&lt;username&gt;/&lt;basename&gt;.git</code></li></ul><pre><code>$ git remote add github git@github.com:cunyu1943/notes.git</code></pre><p>-推送到Gitee和Github</p><pre><code># 推送到Gitee$ git push gitee master# 推送到Github$ git push github master</code></pre><hr><h1 id="其他小技巧"><a href="#其他小技巧" class="headerlink" title="其他小技巧"></a>其他小技巧</h1><ul><li><p>忽略特殊文件</p><p>  此时需要编写<code>.gitignore</code>文件，文件要放到版本库中，且可以对<code>.gitignore</code>进行版本管理；</p></li><li><p>配置命令别名</p></li></ul><pre><code># 举例$ git config --global alias st status$ git config --global alias checkout co$ git config --global alias commit cm</code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> tools </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Github使用中遇到的问题集锦</title>
      <link href="/2019/09/30/github-shi-yong-zhong-yu-dao-de-wen-ti-ji-jin/"/>
      <url>/2019/09/30/github-shi-yong-zhong-yu-dao-de-wen-ti-ji-jin/</url>
      
        <content type="html"><![CDATA[<h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1><p>对于我们国内用户，有时候浏览器在进入github网站时，会出现无法加载或加载很慢的问题，针对这一问题，很是头疼，为解决这一问题，在网上搜索到的解决方法如下；</p><h1 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h1><ul><li>修改hosts文件，在hosts文件中加入以下内容：</li></ul><pre><code># GitHub Start# 针对无法加载或加载慢的问题192.30.253.112 github.com192.30.253.119 gist.github.com151.101.100.133 assets-cdn.github.com151.101.100.133 raw.githubusercontent.com151.101.100.133 gist.githubusercontent.com151.101.100.133 cloud.githubusercontent.com151.101.100.133 camo.githubusercontent.com151.101.100.133 avatars0.githubusercontent.com151.101.100.133 avatars1.githubusercontent.com151.101.100.133 avatars2.githubusercontent.com151.101.100.133 avatars3.githubusercontent.com151.101.100.133 avatars4.githubusercontent.com151.101.100.133 avatars5.githubusercontent.com151.101.100.133 avatars6.githubusercontent.com151.101.100.133 avatars7.githubusercontent.com151.101.100.133 avatars8.githubusercontent.com# 下载慢问题219.76.4.4 github-cloud.s3.amazonaws.com# GitHub End</code></pre><ul><li><p>hosts文件所在目录</p><ul><li>Windows：<code>C:\Windows\System32\drivers\etc\hosts</code></li><li>Linux：<code>\etc\hosts</code></li></ul></li><li><p>修改后生效方法</p><ul><li>关机重启</li><li>断网重连</li><li>Window：Win+R，输入cmd回车，然后在cmd窗口中输入：<code>ipconfig /flushdns</code></li><li>Linux：Ctrl+Alt+T打开终端，输入<code>sudo rcnscd restart</code></li></ul></li></ul><hr><h1 id="问题-1"><a href="#问题-1" class="headerlink" title="问题"></a>问题</h1><p>使用git同时同步github以及gitee；</p><h1 id="解决方案-1"><a href="#解决方案-1" class="headerlink" title="解决方案"></a>解决方案</h1><p>修改版本库<code>.git/config</code>文件，在文件中加入github和gitee中对应版本库的url，如下例，将我github和gitee中PTA版本库url同时加入，然后在使用git就可以同时同步两端；</p><pre><code>[core]    repositoryformatversion = 0    filemode = false    bare = false    logallrefupdates = true    symlinks = false    ignorecase = true[remote "origin"]    url = https://gitee.com/cunyu1943/PTA.git    url = https://github.com/cunyu1943/PTA.git    fetch = +refs/heads/*:refs/remotes/origin/*[branch "master"]    remote = origin    merge = refs/heads/master</code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> tools </category>
          
      </categories>
      
      
        <tags>
            
            <tag> github </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
